
;; Function dir_tester_create (dir_tester_create, funcdef_no=6, decl_uid=2045, cgraph_uid=7, symbol_order=6)

struct dir_tester * dir_tester_create (char * name)
{
  struct dir_tester * self;
  struct dir_tester * D.3254;
  char[21] * _1;
  char[21] * _2;
  struct directory * _3;
  struct dir_tester * _13;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  self_6 = calloc (1, 40);
  _1 = &self_6->name;
  strncpy (_1, name_7(D), 20);
  self_6->error = 0;
  _2 = &self_6->name;
  printf ("=== dir test %s: START ===\n", _2);
  _3 = dir_new (name_7(D));
  self_6->inner_dir = _3;
  _13 = self_6;
;;    succ:       3

;;   basic block 3, loop depth 0
;;    pred:       2
<L0>:
  return _13;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 6 (self_6 - 6 )
Partition 7 (name_7(D) - 7 )
Partition 13 (_13 - 13 )
Partition 14 (_14(D) - 14 )


Coalescible Partition map 

Partition 0, base 0 (name_7(D) - 7 )
Partition 1, base 1 (_14(D) - 14 )


Partition map 

Partition 0 (name_7(D) - 7 )
Partition 1 (_14(D) - 14 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (name_7(D) - 7 )
Partition 1 (_14(D) - 14 )

After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (self_6 - 6 )
Partition 4 (name_7(D) - 7 )
Partition 5 (_13 - 13 )
Partition 6 (_14(D) - 14 )

struct dir_tester * dir_tester_create (char * name)
{
  struct dir_tester * self;
  struct dir_tester * D.3254;
  char[21] * _1;
  char[21] * _2;
  struct directory * _3;
  struct dir_tester * _13;
  struct dir_tester * _14(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  self_6 = calloc (1, 40);
  _1 = &self_6->name;
  strncpy (_1, name_7(D), 20);
  self_6->error = 0;
  _2 = &self_6->name;
  printf ("=== dir test %s: START ===\n", _2);
  _3 = dir_new (name_7(D));
  self_6->inner_dir = _3;
  _13 = self_6;
;;    succ:       3

;;   basic block 3, loop depth 0
;;    pred:       2
<L0>:
  return _13;
;;    succ:       EXIT

}


Partition 0: size 8 align 8
	self_6

;; Generating RTL for gimple basic block 2

;; self_6 = calloc (1, 40);

(insn 6 5 7 (set (reg:DI 4 si)
        (const_int 40 [0x28])) "tester/dir_tester.c":10:29 -1
     (nil))

(insn 7 6 8 (set (reg:DI 5 di)
        (const_int 1 [0x1])) "tester/dir_tester.c":10:29 -1
     (nil))

(call_insn 8 7 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("calloc") [flags 0x41]  <function_decl 0x7f916dcd8500 calloc>) [0 __builtin_calloc S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":10:29 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))

(insn 9 8 10 (set (reg/f:DI 87)
        (reg:DI 0 ax)) "tester/dir_tester.c":10:29 -1
     (expr_list:REG_NOALIAS (reg/f:DI 87)
        (nil)))

(insn 10 9 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])
        (reg/f:DI 87)) "tester/dir_tester.c":10:29 -1
     (nil))

;; _1 = &self_6->name;

(insn 11 10 0 (set (reg/f:DI 82 [ _1 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":11:15 -1
     (nil))

;; strncpy (_1, name_7(D), 20);

(insn 12 11 13 (set (reg:DI 88)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [1 name+0 S8 A64])) "tester/dir_tester.c":11:3 -1
     (nil))

(insn 13 12 14 (set (reg:DI 1 dx)
        (const_int 20 [0x14])) "tester/dir_tester.c":11:3 -1
     (nil))

(insn 14 13 15 (set (reg:DI 4 si)
        (reg:DI 88)) "tester/dir_tester.c":11:3 -1
     (nil))

(insn 15 14 16 (set (reg:DI 5 di)
        (reg/f:DI 82 [ _1 ])) "tester/dir_tester.c":11:3 -1
     (nil))

(call_insn 16 15 0 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strncpy") [flags 0x41]  <function_decl 0x7f916dcc0e00 strncpy>) [0 __builtin_strncpy S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":11:3 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))

;; self_6->error = 0;

(insn 17 16 18 (set (reg/f:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":12:15 -1
     (nil))

(insn 18 17 0 (set (mem:SI (plus:DI (reg/f:DI 89)
                (const_int 32 [0x20])) [2 self_6->error+0 S4 A64])
        (const_int 0 [0])) "tester/dir_tester.c":12:15 -1
     (nil))

;; _2 = &self_6->name;

(insn 19 18 0 (set (reg/f:DI 83 [ _2 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":13:46 -1
     (nil))

;; printf ("=== dir test %s: START ===\n", _2);

(insn 20 19 21 (set (reg:DI 4 si)
        (reg/f:DI 83 [ _2 ])) "tester/dir_tester.c":13:3 -1
     (nil))

(insn 21 20 22 (set (reg:DI 90)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f916da457e0 *.LC0>)) "tester/dir_tester.c":13:3 -1
     (nil))

(insn 22 21 23 (set (reg:DI 5 di)
        (reg:DI 90)) "tester/dir_tester.c":13:3 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f916da457e0 *.LC0>)
        (nil)))

(insn 23 22 24 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":13:3 -1
     (nil))

(call_insn 24 23 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":13:3 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))

;; _3 = dir_new (name_7(D));

(insn 25 24 26 (set (reg:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [1 name+0 S8 A64])) "tester/dir_tester.c":14:21 -1
     (nil))

(insn 26 25 27 (set (reg:DI 5 di)
        (reg:DI 91)) "tester/dir_tester.c":14:21 -1
     (nil))

(call_insn 27 26 28 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_new") [flags 0x41]  <function_decl 0x7f916dd41800 dir_new>) [0 dir_new S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":14:21 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 28 27 0 (set (reg/f:DI 84 [ _3 ])
        (reg:DI 0 ax)) "tester/dir_tester.c":14:21 -1
     (nil))

;; self_6->inner_dir = _3;

(insn 29 28 30 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":14:19 -1
     (nil))

(insn 30 29 0 (set (mem/f:DI (plus:DI (reg/f:DI 92)
                (const_int 24 [0x18])) [4 self_6->inner_dir+0 S8 A64])
        (reg/f:DI 84 [ _3 ])) "tester/dir_tester.c":14:19 -1
     (nil))

;; _13 = self_6;

(insn 31 30 0 (set (reg/f:DI 85 [ _13 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":15:10 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; <L0>:

(code_label 32 31 33 2 (nil) [0 uses])

(note 33 32 0 NOTE_INSN_BASIC_BLOCK)

;; return _13;

(insn 34 33 35 (set (reg/f:DI 86 [ <retval> ])
        (reg/f:DI 85 [ _13 ])) "tester/dir_tester.c":15:10 -1
     (nil))

(jump_insn 35 34 36 (set (pc)
        (label_ref 0)) "tester/dir_tester.c":15:10 -1
     (nil))

(barrier 36 35 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 4 into block 2...
Merged blocks 2 and 4.
Merged 2 and 4 without moving.
Removing jump 35.
Merging block 5 into block 2...
Merged blocks 2 and 5.
Merged 2 and 5 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [1 name+0 S8 A64])
        (reg:DI 5 di [ name ])) "tester/dir_tester.c":9:50 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 4 si)
        (const_int 40 [0x28])) "tester/dir_tester.c":10:29 -1
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (const_int 1 [0x1])) "tester/dir_tester.c":10:29 -1
     (nil))
(call_insn 8 7 9 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("calloc") [flags 0x41]  <function_decl 0x7f916dcd8500 calloc>) [0 __builtin_calloc S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":10:29 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 9 8 10 2 (set (reg/f:DI 87)
        (reg:DI 0 ax)) "tester/dir_tester.c":10:29 -1
     (expr_list:REG_NOALIAS (reg/f:DI 87)
        (nil)))
(insn 10 9 11 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])
        (reg/f:DI 87)) "tester/dir_tester.c":10:29 -1
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 82 [ _1 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":11:15 -1
     (nil))
(insn 12 11 13 2 (set (reg:DI 88)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [1 name+0 S8 A64])) "tester/dir_tester.c":11:3 -1
     (nil))
(insn 13 12 14 2 (set (reg:DI 1 dx)
        (const_int 20 [0x14])) "tester/dir_tester.c":11:3 -1
     (nil))
(insn 14 13 15 2 (set (reg:DI 4 si)
        (reg:DI 88)) "tester/dir_tester.c":11:3 -1
     (nil))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg/f:DI 82 [ _1 ])) "tester/dir_tester.c":11:3 -1
     (nil))
(call_insn 16 15 17 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strncpy") [flags 0x41]  <function_decl 0x7f916dcc0e00 strncpy>) [0 __builtin_strncpy S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":11:3 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 17 16 18 2 (set (reg/f:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":12:15 -1
     (nil))
(insn 18 17 19 2 (set (mem:SI (plus:DI (reg/f:DI 89)
                (const_int 32 [0x20])) [2 self_6->error+0 S4 A64])
        (const_int 0 [0])) "tester/dir_tester.c":12:15 -1
     (nil))
(insn 19 18 20 2 (set (reg/f:DI 83 [ _2 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":13:46 -1
     (nil))
(insn 20 19 21 2 (set (reg:DI 4 si)
        (reg/f:DI 83 [ _2 ])) "tester/dir_tester.c":13:3 -1
     (nil))
(insn 21 20 22 2 (set (reg:DI 90)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f916da457e0 *.LC0>)) "tester/dir_tester.c":13:3 -1
     (nil))
(insn 22 21 23 2 (set (reg:DI 5 di)
        (reg:DI 90)) "tester/dir_tester.c":13:3 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f916da457e0 *.LC0>)
        (nil)))
(insn 23 22 24 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":13:3 -1
     (nil))
(call_insn 24 23 25 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":13:3 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 25 24 26 2 (set (reg:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [1 name+0 S8 A64])) "tester/dir_tester.c":14:21 -1
     (nil))
(insn 26 25 27 2 (set (reg:DI 5 di)
        (reg:DI 91)) "tester/dir_tester.c":14:21 -1
     (nil))
(call_insn 27 26 28 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_new") [flags 0x41]  <function_decl 0x7f916dd41800 dir_new>) [0 dir_new S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":14:21 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 28 27 29 2 (set (reg/f:DI 84 [ _3 ])
        (reg:DI 0 ax)) "tester/dir_tester.c":14:21 -1
     (nil))
(insn 29 28 30 2 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":14:19 -1
     (nil))
(insn 30 29 31 2 (set (mem/f:DI (plus:DI (reg/f:DI 92)
                (const_int 24 [0x18])) [4 self_6->inner_dir+0 S8 A64])
        (reg/f:DI 84 [ _3 ])) "tester/dir_tester.c":14:19 -1
     (nil))
(insn 31 30 34 2 (set (reg/f:DI 85 [ _13 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":15:10 -1
     (nil))
(insn 34 31 38 2 (set (reg/f:DI 86 [ <retval> ])
        (reg/f:DI 85 [ _13 ])) "tester/dir_tester.c":15:10 -1
     (nil))
(insn 38 34 39 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 86 [ <retval> ])) "tester/dir_tester.c":16:1 -1
     (nil))
(insn 39 38 0 2 (use (reg/i:DI 0 ax)) "tester/dir_tester.c":16:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function dir_tester_destory (dir_tester_destory, funcdef_no=7, decl_uid=2047, cgraph_uid=8, symbol_order=7)

void dir_tester_destory (struct dir_tester * self)
{
  struct directory * _1;
  struct directory * _2;
  int _3;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _1 = self_7(D)->inner_dir;
  if (_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  _2 = self_7(D)->inner_dir;
  dir_release (_2);
;;    succ:       4

;;   basic block 4, loop depth 0
;;    pred:       2
;;                3
  _3 = self_7(D)->error;
  if (_3 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]
;;    succ:       5
;;                6

;;   basic block 5, loop depth 0
;;    pred:       4
  __builtin_puts (&"=== FAILED ==="[0]);
  goto <bb 7>; [INV]
;;    succ:       7

;;   basic block 6, loop depth 0
;;    pred:       4
  __builtin_puts (&"=== PASS ==="[0]);
;;    succ:       7

;;   basic block 7, loop depth 0
;;    pred:       5
;;                6
  free (self_7(D));
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 7 (self_7(D) - 7 )


Coalescible Partition map 

Partition 0, base 0 (self_7(D) - 7 )


Partition map 

Partition 0 (self_7(D) - 7 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (self_7(D) - 7 )

After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (self_7(D) - 7 )

void dir_tester_destory (struct dir_tester * self)
{
  struct directory * _1;
  struct directory * _2;
  int _3;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _1 = self_7(D)->inner_dir;
  if (_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  _2 = self_7(D)->inner_dir;
  dir_release (_2);
;;    succ:       4

;;   basic block 4, loop depth 0
;;    pred:       2
;;                3
  _3 = self_7(D)->error;
  if (_3 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]
;;    succ:       5
;;                6

;;   basic block 5, loop depth 0
;;    pred:       4
  __builtin_puts (&"=== FAILED ==="[0]);
  goto <bb 7>; [INV]
;;    succ:       7

;;   basic block 6, loop depth 0
;;    pred:       4
  __builtin_puts (&"=== PASS ==="[0]);
;;    succ:       7

;;   basic block 7, loop depth 0
;;    pred:       5
;;                6
  free (self_7(D));
  return;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; _1 = self_7(D)->inner_dir;

(insn 6 5 7 (set (reg/f:DI 85)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":18:11 -1
     (nil))

(insn 7 6 0 (set (reg/f:DI 82 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 85)
                (const_int 24 [0x18])) [4 self_7(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":18:11 -1
     (nil))

;; if (_1 != 0B)

(insn 8 7 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 82 [ _1 ])
            (const_int 0 [0]))) "tester/dir_tester.c":18:6 -1
     (nil))

(jump_insn 9 8 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "tester/dir_tester.c":18:6 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; _2 = self_7(D)->inner_dir;

(insn 11 10 12 (set (reg/f:DI 86)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":19:5 -1
     (nil))

(insn 12 11 0 (set (reg/f:DI 83 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 86)
                (const_int 24 [0x18])) [4 self_7(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":19:5 -1
     (nil))

;; dir_release (_2);

(insn 13 12 14 (set (reg:DI 5 di)
        (reg/f:DI 83 [ _2 ])) "tester/dir_tester.c":19:5 -1
     (nil))

(call_insn 14 13 0 (call (mem:QI (symbol_ref:DI ("dir_release") [flags 0x41]  <function_decl 0x7f916dd41900 dir_release>) [0 dir_release S1 A8])
        (const_int 0 [0])) "tester/dir_tester.c":19:5 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; Generating RTL for gimple basic block 4

;; 

(code_label 15 14 16 4 (nil) [0 uses])

(note 16 15 0 NOTE_INSN_BASIC_BLOCK)

;; _3 = self_7(D)->error;

(insn 17 16 18 (set (reg/f:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":21:11 -1
     (nil))

(insn 18 17 0 (set (reg:SI 84 [ _3 ])
        (mem:SI (plus:DI (reg/f:DI 87)
                (const_int 32 [0x20])) [2 self_7(D)->error+0 S4 A64])) "tester/dir_tester.c":21:11 -1
     (nil))

;; if (_3 != 0)

(insn 19 18 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 84 [ _3 ])
            (const_int 0 [0]))) "tester/dir_tester.c":21:6 -1
     (nil))

(jump_insn 20 19 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "tester/dir_tester.c":21:6 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; __builtin_puts (&"=== FAILED ==="[0]);

(insn 22 21 23 (set (reg:DI 88)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f916da45c60 *.LC1>)) "tester/dir_tester.c":22:5 -1
     (nil))

(insn 23 22 24 (set (reg:DI 5 di)
        (reg:DI 88)) "tester/dir_tester.c":22:5 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f916da45c60 *.LC1>)
        (nil)))

(call_insn 24 23 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":22:5 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; Generating RTL for gimple basic block 6

;; 

(code_label 27 26 28 5 (nil) [0 uses])

(note 28 27 0 NOTE_INSN_BASIC_BLOCK)

;; __builtin_puts (&"=== PASS ==="[0]);

(insn 29 28 30 (set (reg:DI 89)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f916da45cf0 *.LC2>)) "tester/dir_tester.c":24:5 -1
     (nil))

(insn 30 29 31 (set (reg:DI 5 di)
        (reg:DI 89)) "tester/dir_tester.c":24:5 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f916da45cf0 *.LC2>)
        (nil)))

(call_insn 31 30 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":24:5 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; Generating RTL for gimple basic block 7

;; 

(code_label 32 31 33 6 (nil) [0 uses])

(note 33 32 0 NOTE_INSN_BASIC_BLOCK)

;; free (self_7(D));

(insn 34 33 35 (set (reg:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":26:3 -1
     (nil))

(insn 35 34 36 (set (reg:DI 5 di)
        (reg:DI 90)) "tester/dir_tester.c":26:3 -1
     (nil))

(call_insn 36 35 0 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f916dcddc00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "tester/dir_tester.c":26:3 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 9 into block 8...
Merged blocks 8 and 9.
Merged 8 and 9 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])
        (reg:DI 5 di [ self ])) "tester/dir_tester.c":17:50 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 85)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":18:11 -1
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 82 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 85)
                (const_int 24 [0x18])) [4 self_7(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":18:11 -1
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 82 [ _1 ])
            (const_int 0 [0]))) "tester/dir_tester.c":18:6 -1
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 15)
            (pc))) "tester/dir_tester.c":18:6 -1
     (nil)
 -> 15)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       2 (FALLTHRU)
(note 10 9 11 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 4 (set (reg/f:DI 86)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":19:5 -1
     (nil))
(insn 12 11 13 4 (set (reg/f:DI 83 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 86)
                (const_int 24 [0x18])) [4 self_7(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":19:5 -1
     (nil))
(insn 13 12 14 4 (set (reg:DI 5 di)
        (reg/f:DI 83 [ _2 ])) "tester/dir_tester.c":19:5 -1
     (nil))
(call_insn 14 13 15 4 (call (mem:QI (symbol_ref:DI ("dir_release") [flags 0x41]  <function_decl 0x7f916dd41900 dir_release>) [0 dir_release S1 A8])
        (const_int 0 [0])) "tester/dir_tester.c":19:5 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       5 (FALLTHRU)

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       2
;;              4 (FALLTHRU)
(code_label 15 14 16 5 4 (nil) [1 uses])
(note 16 15 17 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 5 (set (reg/f:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":21:11 -1
     (nil))
(insn 18 17 19 5 (set (reg:SI 84 [ _3 ])
        (mem:SI (plus:DI (reg/f:DI 87)
                (const_int 32 [0x20])) [2 self_7(D)->error+0 S4 A64])) "tester/dir_tester.c":21:11 -1
     (nil))
(insn 19 18 20 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 84 [ _3 ])
            (const_int 0 [0]))) "tester/dir_tester.c":21:6 -1
     (nil))
(jump_insn 20 19 21 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) "tester/dir_tester.c":21:6 -1
     (nil)
 -> 27)
;;  succ:       6 (FALLTHRU)
;;              7

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       5 (FALLTHRU)
(note 21 20 22 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 6 (set (reg:DI 88)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f916da45c60 *.LC1>)) "tester/dir_tester.c":22:5 -1
     (nil))
(insn 23 22 24 6 (set (reg:DI 5 di)
        (reg:DI 88)) "tester/dir_tester.c":22:5 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f916da45c60 *.LC1>)
        (nil)))
(call_insn 24 23 25 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":22:5 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 25 24 26 6 (set (pc)
        (label_ref 32)) -1
     (nil)
 -> 32)
;;  succ:       8

(barrier 26 25 27)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       5
(code_label 27 26 28 7 5 (nil) [1 uses])
(note 28 27 29 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 7 (set (reg:DI 89)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f916da45cf0 *.LC2>)) "tester/dir_tester.c":24:5 -1
     (nil))
(insn 30 29 31 7 (set (reg:DI 5 di)
        (reg:DI 89)) "tester/dir_tester.c":24:5 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f916da45cf0 *.LC2>)
        (nil)))
(call_insn 31 30 32 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":24:5 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       8 (FALLTHRU)

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       6
;;              7 (FALLTHRU)
(code_label 32 31 33 8 6 (nil) [1 uses])
(note 33 32 34 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 8 (set (reg:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":26:3 -1
     (nil))
(insn 35 34 36 8 (set (reg:DI 5 di)
        (reg:DI 90)) "tester/dir_tester.c":26:3 -1
     (nil))
(call_insn 36 35 0 8 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f916dcddc00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "tester/dir_tester.c":26:3 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [always]  (FALLTHRU) tester/dir_tester.c:27:1


;; Function dir_tester_find_node (dir_tester_find_node, funcdef_no=8, decl_uid=2051, cgraph_uid=9, symbol_order=8)

void dir_tester_find_node (struct dir_tester * self, const char * name, bool success)
{
  bool result;
  int _1;
  struct directory * _2;
  struct node * _3;
  _Bool _4;
  _bool _5;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _1 = self_8(D)->error;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 7>; [INV]
;;    succ:       7

;;   basic block 4, loop depth 0
;;    pred:       2
  _2 = self_8(D)->inner_dir;
  _3 = dir_find_node (_2, name_9(D));
  _4 = _3 == 0B;
  result_11 = (bool) _4;
  _5 = check_success (self_8(D), success_12(D), result_11, "exists", "non-exists");
  if (_5 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]
;;    succ:       5
;;                6

;;   basic block 5, loop depth 0
;;    pred:       4
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 7>; [INV]
;;    succ:       7

;;   basic block 6, loop depth 0
;;    pred:       4
  __builtin_puts (&"exists."[0]);
;;    succ:       7

;;   basic block 7, loop depth 0
;;    pred:       3
;;                5
;;                6
<L4>:
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (_5 - 5 )
Partition 8 (self_8(D) - 8 )
Partition 9 (name_9(D) - 9 )
Partition 11 (result_11 - 11 )
Partition 12 (success_12(D) - 12 )


Coalescible Partition map 

Partition 0, base 0 (self_8(D) - 8 )
Partition 1, base 1 (name_9(D) - 9 )
Partition 2, base 2 (success_12(D) - 12 )


Partition map 

Partition 0 (self_8(D) - 8 )
Partition 1 (name_9(D) - 9 )
Partition 2 (success_12(D) - 12 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (self_8(D) - 8 )
Partition 1 (name_9(D) - 9 )
Partition 2 (success_12(D) - 12 )

After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (_5 - 5 )
Partition 5 (self_8(D) - 8 )
Partition 6 (name_9(D) - 9 )
Partition 7 (result_11 - 11 )
Partition 8 (success_12(D) - 12 )

void dir_tester_find_node (struct dir_tester * self, const char * name, bool success)
{
  bool result;
  int _1;
  struct directory * _2;
  struct node * _3;
  _Bool _4;
  _bool _5;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _1 = self_8(D)->error;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 7>; [INV]
;;    succ:       7

;;   basic block 4, loop depth 0
;;    pred:       2
  _2 = self_8(D)->inner_dir;
  _3 = dir_find_node (_2, name_9(D));
  _4 = _3 == 0B;
  result_11 = (bool) _4;
  _5 = check_success (self_8(D), success_12(D), result_11, "exists", "non-exists");
  if (_5 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]
;;    succ:       5
;;                6

;;   basic block 5, loop depth 0
;;    pred:       4
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 7>; [INV]
;;    succ:       7

;;   basic block 6, loop depth 0
;;    pred:       4
  __builtin_puts (&"exists."[0]);
;;    succ:       7

;;   basic block 7, loop depth 0
;;    pred:       3
;;                5
;;                6
<L4>:
  return;
;;    succ:       EXIT

}


Partition 0: size 4 align 4
	result_11

;; Generating RTL for gimple basic block 2

;; _1 = self_8(D)->error;

(insn 8 7 9 (set (reg/f:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":31:11 -1
     (nil))

(insn 9 8 0 (set (reg:SI 82 [ _1 ])
        (mem:SI (plus:DI (reg/f:DI 87)
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])) "tester/dir_tester.c":31:11 -1
     (nil))

;; if (_1 != 0)

(insn 10 9 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 82 [ _1 ])
            (const_int 0 [0]))) "tester/dir_tester.c":31:6 -1
     (nil))

(jump_insn 11 10 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "tester/dir_tester.c":31:6 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 4

;; 

(code_label 15 14 16 8 (nil) [0 uses])

(note 16 15 0 NOTE_INSN_BASIC_BLOCK)

;; _2 = self_8(D)->inner_dir;

(insn 17 16 18 (set (reg/f:DI 88)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":33:36 -1
     (nil))

(insn 18 17 0 (set (reg/f:DI 83 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 88)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":33:36 -1
     (nil))

;; _3 = dir_find_node (_2, name_9(D));

(insn 19 18 20 (set (reg:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])) "tester/dir_tester.c":33:18 -1
     (nil))

(insn 20 19 21 (set (reg:DI 4 si)
        (reg:DI 89)) "tester/dir_tester.c":33:18 -1
     (nil))

(insn 21 20 22 (set (reg:DI 5 di)
        (reg/f:DI 83 [ _2 ])) "tester/dir_tester.c":33:18 -1
     (nil))

(call_insn 22 21 23 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_find_node") [flags 0x41]  <function_decl 0x7f916dd41a00 dir_find_node>) [0 dir_find_node S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":33:18 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))

(insn 23 22 0 (set (reg/f:DI 84 [ _3 ])
        (reg:DI 0 ax)) "tester/dir_tester.c":33:18 -1
     (nil))

;; _4 = _3 == 0B;

(insn 24 23 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 84 [ _3 ])
            (const_int 0 [0]))) "tester/dir_tester.c":33:17 -1
     (nil))

(insn 25 24 0 (set (reg:QI 85 [ _4 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "tester/dir_tester.c":33:17 -1
     (nil))

;; result_11 = (bool) _4;

(insn 26 25 27 (set (reg:SI 90)
        (zero_extend:SI (reg:QI 85 [ _4 ]))) "tester/dir_tester.c":33:8 -1
     (nil))

(insn 27 26 0 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [2 result+0 S4 A32])
        (reg:SI 90)) "tester/dir_tester.c":33:8 -1
     (nil))

;; _5 = check_success (self_8(D), success_12(D), result_11, "exists", "non-exists");

(insn 28 27 29 (set (reg:SI 91)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [2 result+0 S4 A32])) "tester/dir_tester.c":34:8 -1
     (nil))

(insn 29 28 30 (set (reg:SI 92)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [2 success+0 S4 A32])) "tester/dir_tester.c":34:8 -1
     (nil))

(insn 30 29 31 (set (reg:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":34:8 -1
     (nil))

(insn 31 30 32 (set (reg:DI 36 r8)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f916da573f0 *.LC3>)) "tester/dir_tester.c":34:8 -1
     (nil))

(insn 32 31 33 (set (reg:DI 94)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f916da57480 *.LC4>)) "tester/dir_tester.c":34:8 -1
     (nil))

(insn 33 32 34 (set (reg:DI 2 cx)
        (reg:DI 94)) "tester/dir_tester.c":34:8 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f916da57480 *.LC4>)
        (nil)))

(insn 34 33 35 (set (reg:SI 1 dx)
        (reg:SI 91)) "tester/dir_tester.c":34:8 -1
     (nil))

(insn 35 34 36 (set (reg:SI 4 si)
        (reg:SI 92)) "tester/dir_tester.c":34:8 -1
     (nil))

(insn 36 35 37 (set (reg:DI 5 di)
        (reg:DI 93)) "tester/dir_tester.c":34:8 -1
     (nil))

(call_insn 37 36 38 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_success") [flags 0x3]  <function_decl 0x7f916da16c00 check_success>) [0 check_success S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":34:8 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))

(insn 38 37 0 (set (reg:SI 86 [ _5 ])
        (reg:SI 0 ax)) "tester/dir_tester.c":34:8 -1
     (nil))

;; if (_5 == 0)

(insn 39 38 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 86 [ _5 ])
            (const_int 0 [0]))) "tester/dir_tester.c":34:6 -1
     (nil))

(jump_insn 40 39 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "tester/dir_tester.c":34:6 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 6

;; 

(code_label 44 43 45 10 (nil) [0 uses])

(note 45 44 0 NOTE_INSN_BASIC_BLOCK)

;; __builtin_puts (&"exists."[0]);

(insn 46 45 47 (set (reg:DI 95)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f916da57510 *.LC5>)) "tester/dir_tester.c":36:3 -1
     (nil))

(insn 47 46 48 (set (reg:DI 5 di)
        (reg:DI 95)) "tester/dir_tester.c":36:3 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f916da57510 *.LC5>)
        (nil)))

(call_insn 48 47 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":36:3 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; Generating RTL for gimple basic block 7

;; <L4>:

(code_label 49 48 50 9 (nil) [0 uses])

(note 50 49 0 NOTE_INSN_BASIC_BLOCK)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Forwarding edge 2->4 to 9 failed.
Forwarding edge 2->4 to 9 failed.
Redirecting jump 13 from 8 to 9.
Forwarding edge 5->6 to 9 failed.
Redirecting jump 42 from 8 to 9.
Merging block 8 into block 7...
Merged blocks 7 and 8.
Merged 7 and 8 without moving.


try_optimize_cfg iteration 2

Forwarding edge 2->4 to 9 failed.
Forwarding edge 5->6 to 9 failed.
fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       ENTRY (FALLTHRU)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])
        (reg:DI 5 di [ self ])) "tester/dir_tester.c":30:41 -1
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])
        (reg:DI 4 si [ name ])) "tester/dir_tester.c":30:41 -1
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [2 success+0 S4 A32])
        (reg:SI 1 dx [ success ])) "tester/dir_tester.c":30:41 -1
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":31:11 -1
     (nil))
(insn 9 8 10 2 (set (reg:SI 82 [ _1 ])
        (mem:SI (plus:DI (reg/f:DI 87)
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])) "tester/dir_tester.c":31:11 -1
     (nil))
(insn 10 9 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 82 [ _1 ])
            (const_int 0 [0]))) "tester/dir_tester.c":31:6 -1
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 15)
            (pc))) "tester/dir_tester.c":31:6 -1
     (nil)
 -> 15)
;;  succ:       4 (FALLTHRU) tester/dir_tester.c:32:5
;;              5

;; basic block 4, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED, VISITED)
;;  pred:       2 (FALLTHRU) tester/dir_tester.c:32:5
(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 13 12 14 4 (set (pc)
        (label_ref:DI 51)) "tester/dir_tester.c":32:5 892 {jump}
     (nil)
 -> 51)
;;  succ:       9 [always]  tester/dir_tester.c:32:5

(barrier 14 13 15)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       2
(code_label 15 14 16 5 8 (nil) [1 uses])
(note 16 15 17 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 5 (set (reg/f:DI 88)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":33:36 -1
     (nil))
(insn 18 17 19 5 (set (reg/f:DI 83 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 88)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":33:36 -1
     (nil))
(insn 19 18 20 5 (set (reg:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])) "tester/dir_tester.c":33:18 -1
     (nil))
(insn 20 19 21 5 (set (reg:DI 4 si)
        (reg:DI 89)) "tester/dir_tester.c":33:18 -1
     (nil))
(insn 21 20 22 5 (set (reg:DI 5 di)
        (reg/f:DI 83 [ _2 ])) "tester/dir_tester.c":33:18 -1
     (nil))
(call_insn 22 21 23 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_find_node") [flags 0x41]  <function_decl 0x7f916dd41a00 dir_find_node>) [0 dir_find_node S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":33:18 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 23 22 24 5 (set (reg/f:DI 84 [ _3 ])
        (reg:DI 0 ax)) "tester/dir_tester.c":33:18 -1
     (nil))
(insn 24 23 25 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 84 [ _3 ])
            (const_int 0 [0]))) "tester/dir_tester.c":33:17 -1
     (nil))
(insn 25 24 26 5 (set (reg:QI 85 [ _4 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "tester/dir_tester.c":33:17 -1
     (nil))
(insn 26 25 27 5 (set (reg:SI 90)
        (zero_extend:SI (reg:QI 85 [ _4 ]))) "tester/dir_tester.c":33:8 -1
     (nil))
(insn 27 26 28 5 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [2 result+0 S4 A32])
        (reg:SI 90)) "tester/dir_tester.c":33:8 -1
     (nil))
(insn 28 27 29 5 (set (reg:SI 91)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [2 result+0 S4 A32])) "tester/dir_tester.c":34:8 -1
     (nil))
(insn 29 28 30 5 (set (reg:SI 92)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [2 success+0 S4 A32])) "tester/dir_tester.c":34:8 -1
     (nil))
(insn 30 29 31 5 (set (reg:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":34:8 -1
     (nil))
(insn 31 30 32 5 (set (reg:DI 36 r8)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f916da573f0 *.LC3>)) "tester/dir_tester.c":34:8 -1
     (nil))
(insn 32 31 33 5 (set (reg:DI 94)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f916da57480 *.LC4>)) "tester/dir_tester.c":34:8 -1
     (nil))
(insn 33 32 34 5 (set (reg:DI 2 cx)
        (reg:DI 94)) "tester/dir_tester.c":34:8 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f916da57480 *.LC4>)
        (nil)))
(insn 34 33 35 5 (set (reg:SI 1 dx)
        (reg:SI 91)) "tester/dir_tester.c":34:8 -1
     (nil))
(insn 35 34 36 5 (set (reg:SI 4 si)
        (reg:SI 92)) "tester/dir_tester.c":34:8 -1
     (nil))
(insn 36 35 37 5 (set (reg:DI 5 di)
        (reg:DI 93)) "tester/dir_tester.c":34:8 -1
     (nil))
(call_insn 37 36 38 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_success") [flags 0x3]  <function_decl 0x7f916da16c00 check_success>) [0 check_success S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":34:8 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))
(insn 38 37 39 5 (set (reg:SI 86 [ _5 ])
        (reg:SI 0 ax)) "tester/dir_tester.c":34:8 -1
     (nil))
(insn 39 38 40 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 86 [ _5 ])
            (const_int 0 [0]))) "tester/dir_tester.c":34:6 -1
     (nil))
(jump_insn 40 39 41 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) "tester/dir_tester.c":34:6 -1
     (nil)
 -> 44)
;;  succ:       6 (FALLTHRU) tester/dir_tester.c:35:5
;;              7

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED, VISITED)
;;  pred:       5 (FALLTHRU) tester/dir_tester.c:35:5
(note 41 40 42 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(jump_insn 42 41 43 6 (set (pc)
        (label_ref:DI 51)) "tester/dir_tester.c":35:5 892 {jump}
     (nil)
 -> 51)
;;  succ:       9 [always]  tester/dir_tester.c:35:5

(barrier 43 42 44)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 9, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       5
(code_label 44 43 45 7 10 (nil) [1 uses])
(note 45 44 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 7 (set (reg:DI 95)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f916da57510 *.LC5>)) "tester/dir_tester.c":36:3 -1
     (nil))
(insn 47 46 48 7 (set (reg:DI 5 di)
        (reg:DI 95)) "tester/dir_tester.c":36:3 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f916da57510 *.LC5>)
        (nil)))
(call_insn 48 47 51 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":36:3 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       9 (FALLTHRU)

;; basic block 9, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 (FALLTHRU)
;;              4 [always]  tester/dir_tester.c:32:5
;;              6 [always]  tester/dir_tester.c:35:5
(code_label 51 48 52 9 7 (nil) [2 uses])
(note 52 51 0 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function dir_tester_add_file (dir_tester_add_file, funcdef_no=9, decl_uid=2056, cgraph_uid=10, symbol_order=9)

void dir_tester_add_file (struct dir_tester * self, int type, char * name, bool success)
{
  struct node * node;
  bool result;
  int _1;
  struct directory * _2;
  _bool _3;
  struct directory * _4;
  _bool _5;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _1 = self_8(D)->error;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 11>; [INV]
;;    succ:       11

;;   basic block 4, loop depth 0
;;    pred:       2
  printf ("add file...");
  _2 = self_8(D)->inner_dir;
  result_13 = dir_add_file (_2, type_10(D), name_11(D));
  _3 = check_success (self_8(D), success_14(D), result_13, "success", "error");
  if (_3 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]
;;    succ:       5
;;                6

;;   basic block 5, loop depth 0
;;    pred:       4
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 11>; [INV]
;;    succ:       11

;;   basic block 6, loop depth 0
;;    pred:       4
  self_8(D)->error = 1;
  _4 = self_8(D)->inner_dir;
  node_18 = dir_find_node (_4, name_11(D));
  if (node_18 == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]
;;    succ:       7
;;                8

;;   basic block 7, loop depth 0
;;    pred:       6
  __builtin_puts (&"\nfailed: file does not exist."[0]);
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 11>; [INV]
;;    succ:       11

;;   basic block 8, loop depth 0
;;    pred:       6
  _5 = node_18->is_dir;
  if (_5 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]
;;    succ:       9
;;                10

;;   basic block 9, loop depth 0
;;    pred:       8
  __builtin_puts (&"\nfailed: add dir instead of file."[0]);
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 11>; [INV]
;;    succ:       11

;;   basic block 10, loop depth 0
;;    pred:       8
  self_8(D)->error = 0;
  __builtin_puts (&"success."[0]);
;;    succ:       11

;;   basic block 11, loop depth 0
;;    pred:       3
;;                5
;;                7
;;                9
;;                10
<L8>:
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (_5 - 5 )
Partition 8 (self_8(D) - 8 )
Partition 10 (type_10(D) - 10 )
Partition 11 (name_11(D) - 11 )
Partition 13 (result_13 - 13 )
Partition 14 (success_14(D) - 14 )
Partition 18 (node_18 - 18 )


Coalescible Partition map 

Partition 0, base 0 (self_8(D) - 8 )
Partition 1, base 1 (type_10(D) - 10 )
Partition 2, base 2 (name_11(D) - 11 )
Partition 3, base 3 (success_14(D) - 14 )


Partition map 

Partition 0 (self_8(D) - 8 )
Partition 1 (type_10(D) - 10 )
Partition 2 (name_11(D) - 11 )
Partition 3 (success_14(D) - 14 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (self_8(D) - 8 )
Partition 1 (type_10(D) - 10 )
Partition 2 (name_11(D) - 11 )
Partition 3 (success_14(D) - 14 )

After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (_5 - 5 )
Partition 5 (self_8(D) - 8 )
Partition 6 (type_10(D) - 10 )
Partition 7 (name_11(D) - 11 )
Partition 8 (result_13 - 13 )
Partition 9 (success_14(D) - 14 )
Partition 10 (node_18 - 18 )

void dir_tester_add_file (struct dir_tester * self, int type, char * name, bool success)
{
  struct node * node;
  bool result;
  int _1;
  struct directory * _2;
  _bool _3;
  struct directory * _4;
  _bool _5;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _1 = self_8(D)->error;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 11>; [INV]
;;    succ:       11

;;   basic block 4, loop depth 0
;;    pred:       2
  printf ("add file...");
  _2 = self_8(D)->inner_dir;
  result_13 = dir_add_file (_2, type_10(D), name_11(D));
  _3 = check_success (self_8(D), success_14(D), result_13, "success", "error");
  if (_3 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]
;;    succ:       5
;;                6

;;   basic block 5, loop depth 0
;;    pred:       4
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 11>; [INV]
;;    succ:       11

;;   basic block 6, loop depth 0
;;    pred:       4
  self_8(D)->error = 1;
  _4 = self_8(D)->inner_dir;
  node_18 = dir_find_node (_4, name_11(D));
  if (node_18 == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]
;;    succ:       7
;;                8

;;   basic block 7, loop depth 0
;;    pred:       6
  __builtin_puts (&"\nfailed: file does not exist."[0]);
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 11>; [INV]
;;    succ:       11

;;   basic block 8, loop depth 0
;;    pred:       6
  _5 = node_18->is_dir;
  if (_5 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]
;;    succ:       9
;;                10

;;   basic block 9, loop depth 0
;;    pred:       8
  __builtin_puts (&"\nfailed: add dir instead of file."[0]);
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 11>; [INV]
;;    succ:       11

;;   basic block 10, loop depth 0
;;    pred:       8
  self_8(D)->error = 0;
  __builtin_puts (&"success."[0]);
;;    succ:       11

;;   basic block 11, loop depth 0
;;    pred:       3
;;                5
;;                7
;;                9
;;                10
<L8>:
  return;
;;    succ:       EXIT

}


Partition 1: size 8 align 8
	node_18
Partition 0: size 4 align 4
	result_13

;; Generating RTL for gimple basic block 2

;; _1 = self_8(D)->error;

(insn 9 8 10 (set (reg/f:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":40:11 -1
     (nil))

(insn 10 9 0 (set (reg:SI 82 [ _1 ])
        (mem:SI (plus:DI (reg/f:DI 87)
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])) "tester/dir_tester.c":40:11 -1
     (nil))

;; if (_1 != 0)

(insn 11 10 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 82 [ _1 ])
            (const_int 0 [0]))) "tester/dir_tester.c":40:6 -1
     (nil))

(jump_insn 12 11 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "tester/dir_tester.c":40:6 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 4

;; 

(code_label 16 15 17 14 (nil) [0 uses])

(note 17 16 0 NOTE_INSN_BASIC_BLOCK)

;; printf ("add file...");

(insn 18 17 19 (set (reg:DI 88)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f916da57bd0 *.LC6>)) "tester/dir_tester.c":42:3 -1
     (nil))

(insn 19 18 20 (set (reg:DI 5 di)
        (reg:DI 88)) "tester/dir_tester.c":42:3 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f916da57bd0 *.LC6>)
        (nil)))

(insn 20 19 21 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":42:3 -1
     (nil))

(call_insn 21 20 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":42:3 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))

;; _2 = self_8(D)->inner_dir;

(insn 22 21 23 (set (reg/f:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":43:17 -1
     (nil))

(insn 23 22 0 (set (reg/f:DI 83 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 89)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":43:17 -1
     (nil))

;; result_13 = dir_add_file (_2, type_10(D), name_11(D));

(insn 24 23 25 (set (reg:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [1 name+0 S8 A64])) "tester/dir_tester.c":43:17 -1
     (nil))

(insn 25 24 26 (set (reg:SI 91)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [2 type+0 S4 A32])) "tester/dir_tester.c":43:17 -1
     (nil))

(insn 26 25 27 (set (reg:DI 1 dx)
        (reg:DI 90)) "tester/dir_tester.c":43:17 -1
     (nil))

(insn 27 26 28 (set (reg:SI 4 si)
        (reg:SI 91)) "tester/dir_tester.c":43:17 -1
     (nil))

(insn 28 27 29 (set (reg:DI 5 di)
        (reg/f:DI 83 [ _2 ])) "tester/dir_tester.c":43:17 -1
     (nil))

(call_insn 29 28 30 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_add_file") [flags 0x41]  <function_decl 0x7f916dd41b00 dir_add_file>) [0 dir_add_file S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":43:17 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))

(insn 30 29 31 (set (reg:SI 92)
        (reg:SI 0 ax)) "tester/dir_tester.c":43:17 -1
     (nil))

(insn 31 30 0 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 result+0 S4 A32])
        (reg:SI 92)) "tester/dir_tester.c":43:17 -1
     (nil))

;; _3 = check_success (self_8(D), success_14(D), result_13, "success", "error");

(insn 32 31 33 (set (reg:SI 93)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 result+0 S4 A32])) "tester/dir_tester.c":44:8 -1
     (nil))

(insn 33 32 34 (set (reg:SI 94)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [2 success+0 S4 A32])) "tester/dir_tester.c":44:8 -1
     (nil))

(insn 34 33 35 (set (reg:DI 95)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":44:8 -1
     (nil))

(insn 35 34 36 (set (reg:DI 36 r8)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f916da57c60 *.LC7>)) "tester/dir_tester.c":44:8 -1
     (nil))

(insn 36 35 37 (set (reg:DI 96)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f916da57cf0 *.LC8>)) "tester/dir_tester.c":44:8 -1
     (nil))

(insn 37 36 38 (set (reg:DI 2 cx)
        (reg:DI 96)) "tester/dir_tester.c":44:8 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f916da57cf0 *.LC8>)
        (nil)))

(insn 38 37 39 (set (reg:SI 1 dx)
        (reg:SI 93)) "tester/dir_tester.c":44:8 -1
     (nil))

(insn 39 38 40 (set (reg:SI 4 si)
        (reg:SI 94)) "tester/dir_tester.c":44:8 -1
     (nil))

(insn 40 39 41 (set (reg:DI 5 di)
        (reg:DI 95)) "tester/dir_tester.c":44:8 -1
     (nil))

(call_insn 41 40 42 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_success") [flags 0x3]  <function_decl 0x7f916da16c00 check_success>) [0 check_success S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":44:8 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))

(insn 42 41 0 (set (reg:SI 84 [ _3 ])
        (reg:SI 0 ax)) "tester/dir_tester.c":44:8 -1
     (nil))

;; if (_3 == 0)

(insn 43 42 44 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 84 [ _3 ])
            (const_int 0 [0]))) "tester/dir_tester.c":44:6 -1
     (nil))

(jump_insn 44 43 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "tester/dir_tester.c":44:6 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 6

;; 

(code_label 48 47 49 16 (nil) [0 uses])

(note 49 48 0 NOTE_INSN_BASIC_BLOCK)

;; self_8(D)->error = 1;

(insn 50 49 51 (set (reg/f:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":46:15 -1
     (nil))

(insn 51 50 0 (set (mem:SI (plus:DI (reg/f:DI 97)
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])
        (const_int 1 [0x1])) "tester/dir_tester.c":46:15 -1
     (nil))

;; _4 = self_8(D)->inner_dir;

(insn 52 51 53 (set (reg/f:DI 98)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":47:41 -1
     (nil))

(insn 53 52 0 (set (reg/f:DI 85 [ _4 ])
        (mem/f:DI (plus:DI (reg/f:DI 98)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":47:41 -1
     (nil))

;; node_18 = dir_find_node (_4, name_11(D));

(insn 54 53 55 (set (reg:DI 99)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [1 name+0 S8 A64])) "tester/dir_tester.c":47:23 -1
     (nil))

(insn 55 54 56 (set (reg:DI 4 si)
        (reg:DI 99)) "tester/dir_tester.c":47:23 -1
     (nil))

(insn 56 55 57 (set (reg:DI 5 di)
        (reg/f:DI 85 [ _4 ])) "tester/dir_tester.c":47:23 -1
     (nil))

(call_insn 57 56 58 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_find_node") [flags 0x41]  <function_decl 0x7f916dd41a00 dir_find_node>) [0 dir_find_node S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":47:23 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))

(insn 58 57 59 (set (reg:DI 100)
        (reg:DI 0 ax)) "tester/dir_tester.c":47:23 -1
     (nil))

(insn 59 58 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])
        (reg:DI 100)) "tester/dir_tester.c":47:23 -1
     (nil))

;; if (node_18 == 0B)

(insn 60 59 61 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])
            (const_int 0 [0]))) "tester/dir_tester.c":48:6 -1
     (nil))

(jump_insn 61 60 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "tester/dir_tester.c":48:6 -1
     (nil))

;; Generating RTL for gimple basic block 7

;; __builtin_puts (&"\nfailed: file does not exist."[0]);

(insn 63 62 64 (set (reg:DI 101)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f916da57d80 *.LC9>)) "tester/dir_tester.c":49:5 -1
     (nil))

(insn 64 63 65 (set (reg:DI 5 di)
        (reg:DI 101)) "tester/dir_tester.c":49:5 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f916da57d80 *.LC9>)
        (nil)))

(call_insn 65 64 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":49:5 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 8

;; 

(code_label 68 67 69 17 (nil) [0 uses])

(note 69 68 0 NOTE_INSN_BASIC_BLOCK)

;; _5 = node_18->is_dir;

(insn 70 69 71 (set (reg/f:DI 102)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])) "tester/dir_tester.c":52:11 -1
     (nil))

(insn 71 70 0 (set (reg:SI 86 [ _5 ])
        (mem:SI (plus:DI (reg/f:DI 102)
                (const_int 32 [0x20])) [2 node_18->is_dir+0 S4 A64])) "tester/dir_tester.c":52:11 -1
     (nil))

;; if (_5 != 0)

(insn 72 71 73 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 86 [ _5 ])
            (const_int 0 [0]))) "tester/dir_tester.c":52:6 -1
     (nil))

(jump_insn 73 72 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "tester/dir_tester.c":52:6 -1
     (nil))

;; Generating RTL for gimple basic block 9

;; __builtin_puts (&"\nfailed: add dir instead of file."[0]);

(insn 75 74 76 (set (reg:DI 103)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f916da57e10 *.LC10>)) "tester/dir_tester.c":53:5 -1
     (nil))

(insn 76 75 77 (set (reg:DI 5 di)
        (reg:DI 103)) "tester/dir_tester.c":53:5 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f916da57e10 *.LC10>)
        (nil)))

(call_insn 77 76 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":53:5 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 10

;; 

(code_label 80 79 81 18 (nil) [0 uses])

(note 81 80 0 NOTE_INSN_BASIC_BLOCK)

;; self_8(D)->error = 0;

(insn 82 81 83 (set (reg/f:DI 104)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":56:15 -1
     (nil))

(insn 83 82 0 (set (mem:SI (plus:DI (reg/f:DI 104)
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])
        (const_int 0 [0])) "tester/dir_tester.c":56:15 -1
     (nil))

;; __builtin_puts (&"success."[0]);

(insn 84 83 85 (set (reg:DI 105)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)) "tester/dir_tester.c":57:3 -1
     (nil))

(insn 85 84 86 (set (reg:DI 5 di)
        (reg:DI 105)) "tester/dir_tester.c":57:3 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)
        (nil)))

(call_insn 86 85 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":57:3 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; Generating RTL for gimple basic block 11

;; <L8>:

(code_label 87 86 88 15 (nil) [0 uses])

(note 88 87 0 NOTE_INSN_BASIC_BLOCK)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Forwarding edge 2->4 to 13 failed.
Forwarding edge 2->4 to 13 failed.
Redirecting jump 14 from 12 to 13.
Forwarding edge 5->6 to 13 failed.
Redirecting jump 46 from 12 to 13.
Redirecting jump 66 from 12 to 13.
Redirecting jump 78 from 12 to 13.
Merging block 12 into block 11...
Merged blocks 11 and 12.
Merged 11 and 12 without moving.


try_optimize_cfg iteration 2

Forwarding edge 2->4 to 13 failed.
Forwarding edge 5->6 to 13 failed.
fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       ENTRY (FALLTHRU)
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])
        (reg:DI 5 di [ self ])) "tester/dir_tester.c":39:40 -1
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [2 type+0 S4 A32])
        (reg:SI 4 si [ type ])) "tester/dir_tester.c":39:40 -1
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [1 name+0 S8 A64])
        (reg:DI 1 dx [ name ])) "tester/dir_tester.c":39:40 -1
     (nil))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [2 success+0 S4 A32])
        (reg:SI 2 cx [ success ])) "tester/dir_tester.c":39:40 -1
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg/f:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":40:11 -1
     (nil))
(insn 10 9 11 2 (set (reg:SI 82 [ _1 ])
        (mem:SI (plus:DI (reg/f:DI 87)
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])) "tester/dir_tester.c":40:11 -1
     (nil))
(insn 11 10 12 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 82 [ _1 ])
            (const_int 0 [0]))) "tester/dir_tester.c":40:6 -1
     (nil))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 16)
            (pc))) "tester/dir_tester.c":40:6 -1
     (nil)
 -> 16)
;;  succ:       4 (FALLTHRU) tester/dir_tester.c:41:5
;;              5

;; basic block 4, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED, VISITED)
;;  pred:       2 (FALLTHRU) tester/dir_tester.c:41:5
(note 13 12 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 14 13 15 4 (set (pc)
        (label_ref:DI 89)) "tester/dir_tester.c":41:5 892 {jump}
     (nil)
 -> 89)
;;  succ:       13 [always]  tester/dir_tester.c:41:5

(barrier 15 14 16)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       2
(code_label 16 15 17 5 14 (nil) [1 uses])
(note 17 16 18 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 5 (set (reg:DI 88)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f916da57bd0 *.LC6>)) "tester/dir_tester.c":42:3 -1
     (nil))
(insn 19 18 20 5 (set (reg:DI 5 di)
        (reg:DI 88)) "tester/dir_tester.c":42:3 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f916da57bd0 *.LC6>)
        (nil)))
(insn 20 19 21 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":42:3 -1
     (nil))
(call_insn 21 20 22 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":42:3 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 22 21 23 5 (set (reg/f:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":43:17 -1
     (nil))
(insn 23 22 24 5 (set (reg/f:DI 83 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 89)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":43:17 -1
     (nil))
(insn 24 23 25 5 (set (reg:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [1 name+0 S8 A64])) "tester/dir_tester.c":43:17 -1
     (nil))
(insn 25 24 26 5 (set (reg:SI 91)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [2 type+0 S4 A32])) "tester/dir_tester.c":43:17 -1
     (nil))
(insn 26 25 27 5 (set (reg:DI 1 dx)
        (reg:DI 90)) "tester/dir_tester.c":43:17 -1
     (nil))
(insn 27 26 28 5 (set (reg:SI 4 si)
        (reg:SI 91)) "tester/dir_tester.c":43:17 -1
     (nil))
(insn 28 27 29 5 (set (reg:DI 5 di)
        (reg/f:DI 83 [ _2 ])) "tester/dir_tester.c":43:17 -1
     (nil))
(call_insn 29 28 30 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_add_file") [flags 0x41]  <function_decl 0x7f916dd41b00 dir_add_file>) [0 dir_add_file S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":43:17 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 30 29 31 5 (set (reg:SI 92)
        (reg:SI 0 ax)) "tester/dir_tester.c":43:17 -1
     (nil))
(insn 31 30 32 5 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 result+0 S4 A32])
        (reg:SI 92)) "tester/dir_tester.c":43:17 -1
     (nil))
(insn 32 31 33 5 (set (reg:SI 93)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 result+0 S4 A32])) "tester/dir_tester.c":44:8 -1
     (nil))
(insn 33 32 34 5 (set (reg:SI 94)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [2 success+0 S4 A32])) "tester/dir_tester.c":44:8 -1
     (nil))
(insn 34 33 35 5 (set (reg:DI 95)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":44:8 -1
     (nil))
(insn 35 34 36 5 (set (reg:DI 36 r8)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f916da57c60 *.LC7>)) "tester/dir_tester.c":44:8 -1
     (nil))
(insn 36 35 37 5 (set (reg:DI 96)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f916da57cf0 *.LC8>)) "tester/dir_tester.c":44:8 -1
     (nil))
(insn 37 36 38 5 (set (reg:DI 2 cx)
        (reg:DI 96)) "tester/dir_tester.c":44:8 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f916da57cf0 *.LC8>)
        (nil)))
(insn 38 37 39 5 (set (reg:SI 1 dx)
        (reg:SI 93)) "tester/dir_tester.c":44:8 -1
     (nil))
(insn 39 38 40 5 (set (reg:SI 4 si)
        (reg:SI 94)) "tester/dir_tester.c":44:8 -1
     (nil))
(insn 40 39 41 5 (set (reg:DI 5 di)
        (reg:DI 95)) "tester/dir_tester.c":44:8 -1
     (nil))
(call_insn 41 40 42 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_success") [flags 0x3]  <function_decl 0x7f916da16c00 check_success>) [0 check_success S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":44:8 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))
(insn 42 41 43 5 (set (reg:SI 84 [ _3 ])
        (reg:SI 0 ax)) "tester/dir_tester.c":44:8 -1
     (nil))
(insn 43 42 44 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 84 [ _3 ])
            (const_int 0 [0]))) "tester/dir_tester.c":44:6 -1
     (nil))
(jump_insn 44 43 45 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 48)
            (pc))) "tester/dir_tester.c":44:6 -1
     (nil)
 -> 48)
;;  succ:       6 (FALLTHRU) tester/dir_tester.c:45:5
;;              7

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED, VISITED)
;;  pred:       5 (FALLTHRU) tester/dir_tester.c:45:5
(note 45 44 46 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(jump_insn 46 45 47 6 (set (pc)
        (label_ref:DI 89)) "tester/dir_tester.c":45:5 892 {jump}
     (nil)
 -> 89)
;;  succ:       13 [always]  tester/dir_tester.c:45:5

(barrier 47 46 48)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       5
(code_label 48 47 49 7 16 (nil) [1 uses])
(note 49 48 50 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 7 (set (reg/f:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":46:15 -1
     (nil))
(insn 51 50 52 7 (set (mem:SI (plus:DI (reg/f:DI 97)
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])
        (const_int 1 [0x1])) "tester/dir_tester.c":46:15 -1
     (nil))
(insn 52 51 53 7 (set (reg/f:DI 98)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":47:41 -1
     (nil))
(insn 53 52 54 7 (set (reg/f:DI 85 [ _4 ])
        (mem/f:DI (plus:DI (reg/f:DI 98)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":47:41 -1
     (nil))
(insn 54 53 55 7 (set (reg:DI 99)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [1 name+0 S8 A64])) "tester/dir_tester.c":47:23 -1
     (nil))
(insn 55 54 56 7 (set (reg:DI 4 si)
        (reg:DI 99)) "tester/dir_tester.c":47:23 -1
     (nil))
(insn 56 55 57 7 (set (reg:DI 5 di)
        (reg/f:DI 85 [ _4 ])) "tester/dir_tester.c":47:23 -1
     (nil))
(call_insn 57 56 58 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_find_node") [flags 0x41]  <function_decl 0x7f916dd41a00 dir_find_node>) [0 dir_find_node S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":47:23 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 58 57 59 7 (set (reg:DI 100)
        (reg:DI 0 ax)) "tester/dir_tester.c":47:23 -1
     (nil))
(insn 59 58 60 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])
        (reg:DI 100)) "tester/dir_tester.c":47:23 -1
     (nil))
(insn 60 59 61 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])
            (const_int 0 [0]))) "tester/dir_tester.c":48:6 -1
     (nil))
(jump_insn 61 60 62 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) "tester/dir_tester.c":48:6 -1
     (nil)
 -> 68)
;;  succ:       8 (FALLTHRU)
;;              9

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED, VISITED)
;;  pred:       7 (FALLTHRU)
(note 62 61 63 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 8 (set (reg:DI 101)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f916da57d80 *.LC9>)) "tester/dir_tester.c":49:5 -1
     (nil))
(insn 64 63 65 8 (set (reg:DI 5 di)
        (reg:DI 101)) "tester/dir_tester.c":49:5 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f916da57d80 *.LC9>)
        (nil)))
(call_insn 65 64 66 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":49:5 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 66 65 67 8 (set (pc)
        (label_ref:DI 89)) "tester/dir_tester.c":50:5 892 {jump}
     (nil)
 -> 89)
;;  succ:       13 [always]  tester/dir_tester.c:50:5

(barrier 67 66 68)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       7
(code_label 68 67 69 9 17 (nil) [1 uses])
(note 69 68 70 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 71 9 (set (reg/f:DI 102)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])) "tester/dir_tester.c":52:11 -1
     (nil))
(insn 71 70 72 9 (set (reg:SI 86 [ _5 ])
        (mem:SI (plus:DI (reg/f:DI 102)
                (const_int 32 [0x20])) [2 node_18->is_dir+0 S4 A64])) "tester/dir_tester.c":52:11 -1
     (nil))
(insn 72 71 73 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 86 [ _5 ])
            (const_int 0 [0]))) "tester/dir_tester.c":52:6 -1
     (nil))
(jump_insn 73 72 74 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 80)
            (pc))) "tester/dir_tester.c":52:6 -1
     (nil)
 -> 80)
;;  succ:       10 (FALLTHRU)
;;              11

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED, VISITED)
;;  pred:       9 (FALLTHRU)
(note 74 73 75 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 10 (set (reg:DI 103)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f916da57e10 *.LC10>)) "tester/dir_tester.c":53:5 -1
     (nil))
(insn 76 75 77 10 (set (reg:DI 5 di)
        (reg:DI 103)) "tester/dir_tester.c":53:5 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f916da57e10 *.LC10>)
        (nil)))
(call_insn 77 76 78 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":53:5 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 78 77 79 10 (set (pc)
        (label_ref:DI 89)) "tester/dir_tester.c":54:5 892 {jump}
     (nil)
 -> 89)
;;  succ:       13 [always]  tester/dir_tester.c:54:5

(barrier 79 78 80)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 13, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       9
(code_label 80 79 81 11 18 (nil) [1 uses])
(note 81 80 82 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 11 (set (reg/f:DI 104)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":56:15 -1
     (nil))
(insn 83 82 84 11 (set (mem:SI (plus:DI (reg/f:DI 104)
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])
        (const_int 0 [0])) "tester/dir_tester.c":56:15 -1
     (nil))
(insn 84 83 85 11 (set (reg:DI 105)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)) "tester/dir_tester.c":57:3 -1
     (nil))
(insn 85 84 86 11 (set (reg:DI 5 di)
        (reg:DI 105)) "tester/dir_tester.c":57:3 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)
        (nil)))
(call_insn 86 85 89 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":57:3 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       13 (FALLTHRU)

;; basic block 13, loop depth 0, maybe hot
;;  prev block 11, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       11 (FALLTHRU)
;;              4 [always]  tester/dir_tester.c:41:5
;;              6 [always]  tester/dir_tester.c:45:5
;;              8 [always]  tester/dir_tester.c:50:5
;;              10 [always]  tester/dir_tester.c:54:5
(code_label 89 86 90 13 13 (nil) [4 uses])
(note 90 89 0 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function dir_tester_add_subdir (dir_tester_add_subdir, funcdef_no=10, decl_uid=2060, cgraph_uid=11, symbol_order=10)

void dir_tester_add_subdir (struct dir_tester * self, char * name, bool success)
{
  struct node * node;
  bool result;
  int _1;
  struct directory * _2;
  _bool _3;
  struct directory * _4;
  _bool _5;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _1 = self_8(D)->error;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 11>; [INV]
;;    succ:       11

;;   basic block 4, loop depth 0
;;    pred:       2
  printf ("add subdir...");
  _2 = self_8(D)->inner_dir;
  result_12 = dir_add_subdir (_2, name_10(D));
  _3 = check_success (self_8(D), success_13(D), result_12, "success", "error");
  if (_3 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]
;;    succ:       5
;;                6

;;   basic block 5, loop depth 0
;;    pred:       4
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 11>; [INV]
;;    succ:       11

;;   basic block 6, loop depth 0
;;    pred:       4
  self_8(D)->error = 1;
  _4 = self_8(D)->inner_dir;
  node_17 = dir_find_node (_4, name_10(D));
  if (node_17 == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]
;;    succ:       7
;;                8

;;   basic block 7, loop depth 0
;;    pred:       6
  __builtin_puts (&"\nfailed: dir does not exist."[0]);
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 11>; [INV]
;;    succ:       11

;;   basic block 8, loop depth 0
;;    pred:       6
  _5 = node_17->is_dir;
  if (_5 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]
;;    succ:       9
;;                10

;;   basic block 9, loop depth 0
;;    pred:       8
  __builtin_puts (&"\nfailed: add file instead of dir."[0]);
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 11>; [INV]
;;    succ:       11

;;   basic block 10, loop depth 0
;;    pred:       8
  self_8(D)->error = 0;
  __builtin_puts (&"success."[0]);
;;    succ:       11

;;   basic block 11, loop depth 0
;;    pred:       3
;;                5
;;                7
;;                9
;;                10
<L8>:
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (_5 - 5 )
Partition 8 (self_8(D) - 8 )
Partition 10 (name_10(D) - 10 )
Partition 12 (result_12 - 12 )
Partition 13 (success_13(D) - 13 )
Partition 17 (node_17 - 17 )


Coalescible Partition map 

Partition 0, base 0 (self_8(D) - 8 )
Partition 1, base 1 (name_10(D) - 10 )
Partition 2, base 2 (success_13(D) - 13 )


Partition map 

Partition 0 (self_8(D) - 8 )
Partition 1 (name_10(D) - 10 )
Partition 2 (success_13(D) - 13 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (self_8(D) - 8 )
Partition 1 (name_10(D) - 10 )
Partition 2 (success_13(D) - 13 )

After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (_5 - 5 )
Partition 5 (self_8(D) - 8 )
Partition 6 (name_10(D) - 10 )
Partition 7 (result_12 - 12 )
Partition 8 (success_13(D) - 13 )
Partition 9 (node_17 - 17 )

void dir_tester_add_subdir (struct dir_tester * self, char * name, bool success)
{
  struct node * node;
  bool result;
  int _1;
  struct directory * _2;
  _bool _3;
  struct directory * _4;
  _bool _5;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _1 = self_8(D)->error;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 11>; [INV]
;;    succ:       11

;;   basic block 4, loop depth 0
;;    pred:       2
  printf ("add subdir...");
  _2 = self_8(D)->inner_dir;
  result_12 = dir_add_subdir (_2, name_10(D));
  _3 = check_success (self_8(D), success_13(D), result_12, "success", "error");
  if (_3 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]
;;    succ:       5
;;                6

;;   basic block 5, loop depth 0
;;    pred:       4
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 11>; [INV]
;;    succ:       11

;;   basic block 6, loop depth 0
;;    pred:       4
  self_8(D)->error = 1;
  _4 = self_8(D)->inner_dir;
  node_17 = dir_find_node (_4, name_10(D));
  if (node_17 == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]
;;    succ:       7
;;                8

;;   basic block 7, loop depth 0
;;    pred:       6
  __builtin_puts (&"\nfailed: dir does not exist."[0]);
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 11>; [INV]
;;    succ:       11

;;   basic block 8, loop depth 0
;;    pred:       6
  _5 = node_17->is_dir;
  if (_5 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]
;;    succ:       9
;;                10

;;   basic block 9, loop depth 0
;;    pred:       8
  __builtin_puts (&"\nfailed: add file instead of dir."[0]);
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 11>; [INV]
;;    succ:       11

;;   basic block 10, loop depth 0
;;    pred:       8
  self_8(D)->error = 0;
  __builtin_puts (&"success."[0]);
;;    succ:       11

;;   basic block 11, loop depth 0
;;    pred:       3
;;                5
;;                7
;;                9
;;                10
<L8>:
  return;
;;    succ:       EXIT

}


Partition 1: size 8 align 8
	node_17
Partition 0: size 4 align 4
	result_12

;; Generating RTL for gimple basic block 2

;; _1 = self_8(D)->error;

(insn 8 7 9 (set (reg/f:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":60:11 -1
     (nil))

(insn 9 8 0 (set (reg:SI 82 [ _1 ])
        (mem:SI (plus:DI (reg/f:DI 87)
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])) "tester/dir_tester.c":60:11 -1
     (nil))

;; if (_1 != 0)

(insn 10 9 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 82 [ _1 ])
            (const_int 0 [0]))) "tester/dir_tester.c":60:6 -1
     (nil))

(jump_insn 11 10 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "tester/dir_tester.c":60:6 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 4

;; 

(code_label 15 14 16 22 (nil) [0 uses])

(note 16 15 0 NOTE_INSN_BASIC_BLOCK)

;; printf ("add subdir...");

(insn 17 16 18 (set (reg:DI 88)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7f916da637e0 *.LC12>)) "tester/dir_tester.c":62:3 -1
     (nil))

(insn 18 17 19 (set (reg:DI 5 di)
        (reg:DI 88)) "tester/dir_tester.c":62:3 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7f916da637e0 *.LC12>)
        (nil)))

(insn 19 18 20 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":62:3 -1
     (nil))

(call_insn 20 19 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":62:3 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))

;; _2 = self_8(D)->inner_dir;

(insn 21 20 22 (set (reg/f:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":63:17 -1
     (nil))

(insn 22 21 0 (set (reg/f:DI 83 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 89)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":63:17 -1
     (nil))

;; result_12 = dir_add_subdir (_2, name_10(D));

(insn 23 22 24 (set (reg:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])) "tester/dir_tester.c":63:17 -1
     (nil))

(insn 24 23 25 (set (reg:DI 4 si)
        (reg:DI 90)) "tester/dir_tester.c":63:17 -1
     (nil))

(insn 25 24 26 (set (reg:DI 5 di)
        (reg/f:DI 83 [ _2 ])) "tester/dir_tester.c":63:17 -1
     (nil))

(call_insn 26 25 27 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_add_subdir") [flags 0x41]  <function_decl 0x7f916dd41c00 dir_add_subdir>) [0 dir_add_subdir S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":63:17 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))

(insn 27 26 28 (set (reg:SI 91)
        (reg:SI 0 ax)) "tester/dir_tester.c":63:17 -1
     (nil))

(insn 28 27 0 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 result+0 S4 A32])
        (reg:SI 91)) "tester/dir_tester.c":63:17 -1
     (nil))

;; _3 = check_success (self_8(D), success_13(D), result_12, "success", "error");

(insn 29 28 30 (set (reg:SI 92)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 result+0 S4 A32])) "tester/dir_tester.c":64:8 -1
     (nil))

(insn 30 29 31 (set (reg:SI 93)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [2 success+0 S4 A32])) "tester/dir_tester.c":64:8 -1
     (nil))

(insn 31 30 32 (set (reg:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":64:8 -1
     (nil))

(insn 32 31 33 (set (reg:DI 36 r8)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f916da57c60 *.LC7>)) "tester/dir_tester.c":64:8 -1
     (nil))

(insn 33 32 34 (set (reg:DI 95)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f916da57cf0 *.LC8>)) "tester/dir_tester.c":64:8 -1
     (nil))

(insn 34 33 35 (set (reg:DI 2 cx)
        (reg:DI 95)) "tester/dir_tester.c":64:8 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f916da57cf0 *.LC8>)
        (nil)))

(insn 35 34 36 (set (reg:SI 1 dx)
        (reg:SI 92)) "tester/dir_tester.c":64:8 -1
     (nil))

(insn 36 35 37 (set (reg:SI 4 si)
        (reg:SI 93)) "tester/dir_tester.c":64:8 -1
     (nil))

(insn 37 36 38 (set (reg:DI 5 di)
        (reg:DI 94)) "tester/dir_tester.c":64:8 -1
     (nil))

(call_insn 38 37 39 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_success") [flags 0x3]  <function_decl 0x7f916da16c00 check_success>) [0 check_success S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":64:8 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))

(insn 39 38 0 (set (reg:SI 84 [ _3 ])
        (reg:SI 0 ax)) "tester/dir_tester.c":64:8 -1
     (nil))

;; if (_3 == 0)

(insn 40 39 41 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 84 [ _3 ])
            (const_int 0 [0]))) "tester/dir_tester.c":64:6 -1
     (nil))

(jump_insn 41 40 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "tester/dir_tester.c":64:6 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 6

;; 

(code_label 45 44 46 24 (nil) [0 uses])

(note 46 45 0 NOTE_INSN_BASIC_BLOCK)

;; self_8(D)->error = 1;

(insn 47 46 48 (set (reg/f:DI 96)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":66:15 -1
     (nil))

(insn 48 47 0 (set (mem:SI (plus:DI (reg/f:DI 96)
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])
        (const_int 1 [0x1])) "tester/dir_tester.c":66:15 -1
     (nil))

;; _4 = self_8(D)->inner_dir;

(insn 49 48 50 (set (reg/f:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":67:41 -1
     (nil))

(insn 50 49 0 (set (reg/f:DI 85 [ _4 ])
        (mem/f:DI (plus:DI (reg/f:DI 97)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":67:41 -1
     (nil))

;; node_17 = dir_find_node (_4, name_10(D));

(insn 51 50 52 (set (reg:DI 98)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])) "tester/dir_tester.c":67:23 -1
     (nil))

(insn 52 51 53 (set (reg:DI 4 si)
        (reg:DI 98)) "tester/dir_tester.c":67:23 -1
     (nil))

(insn 53 52 54 (set (reg:DI 5 di)
        (reg/f:DI 85 [ _4 ])) "tester/dir_tester.c":67:23 -1
     (nil))

(call_insn 54 53 55 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_find_node") [flags 0x41]  <function_decl 0x7f916dd41a00 dir_find_node>) [0 dir_find_node S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":67:23 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))

(insn 55 54 56 (set (reg:DI 99)
        (reg:DI 0 ax)) "tester/dir_tester.c":67:23 -1
     (nil))

(insn 56 55 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])
        (reg:DI 99)) "tester/dir_tester.c":67:23 -1
     (nil))

;; if (node_17 == 0B)

(insn 57 56 58 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])
            (const_int 0 [0]))) "tester/dir_tester.c":68:6 -1
     (nil))

(jump_insn 58 57 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "tester/dir_tester.c":68:6 -1
     (nil))

;; Generating RTL for gimple basic block 7

;; __builtin_puts (&"\nfailed: dir does not exist."[0]);

(insn 60 59 61 (set (reg:DI 100)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f916da63870 *.LC13>)) "tester/dir_tester.c":69:5 -1
     (nil))

(insn 61 60 62 (set (reg:DI 5 di)
        (reg:DI 100)) "tester/dir_tester.c":69:5 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f916da63870 *.LC13>)
        (nil)))

(call_insn 62 61 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":69:5 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 8

;; 

(code_label 65 64 66 25 (nil) [0 uses])

(note 66 65 0 NOTE_INSN_BASIC_BLOCK)

;; _5 = node_17->is_dir;

(insn 67 66 68 (set (reg/f:DI 101)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])) "tester/dir_tester.c":72:12 -1
     (nil))

(insn 68 67 0 (set (reg:SI 86 [ _5 ])
        (mem:SI (plus:DI (reg/f:DI 101)
                (const_int 32 [0x20])) [2 node_17->is_dir+0 S4 A64])) "tester/dir_tester.c":72:12 -1
     (nil))

;; if (_5 == 0)

(insn 69 68 70 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 86 [ _5 ])
            (const_int 0 [0]))) "tester/dir_tester.c":72:6 -1
     (nil))

(jump_insn 70 69 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "tester/dir_tester.c":72:6 -1
     (nil))

;; Generating RTL for gimple basic block 9

;; __builtin_puts (&"\nfailed: add file instead of dir."[0]);

(insn 72 71 73 (set (reg:DI 102)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f916da63900 *.LC14>)) "tester/dir_tester.c":73:5 -1
     (nil))

(insn 73 72 74 (set (reg:DI 5 di)
        (reg:DI 102)) "tester/dir_tester.c":73:5 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f916da63900 *.LC14>)
        (nil)))

(call_insn 74 73 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":73:5 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 10

;; 

(code_label 77 76 78 26 (nil) [0 uses])

(note 78 77 0 NOTE_INSN_BASIC_BLOCK)

;; self_8(D)->error = 0;

(insn 79 78 80 (set (reg/f:DI 103)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":76:15 -1
     (nil))

(insn 80 79 0 (set (mem:SI (plus:DI (reg/f:DI 103)
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])
        (const_int 0 [0])) "tester/dir_tester.c":76:15 -1
     (nil))

;; __builtin_puts (&"success."[0]);

(insn 81 80 82 (set (reg:DI 104)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)) "tester/dir_tester.c":77:3 -1
     (nil))

(insn 82 81 83 (set (reg:DI 5 di)
        (reg:DI 104)) "tester/dir_tester.c":77:3 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)
        (nil)))

(call_insn 83 82 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":77:3 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; Generating RTL for gimple basic block 11

;; <L8>:

(code_label 84 83 85 23 (nil) [0 uses])

(note 85 84 0 NOTE_INSN_BASIC_BLOCK)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Forwarding edge 2->4 to 13 failed.
Forwarding edge 2->4 to 13 failed.
Redirecting jump 13 from 12 to 13.
Forwarding edge 5->6 to 13 failed.
Redirecting jump 43 from 12 to 13.
Redirecting jump 63 from 12 to 13.
Redirecting jump 75 from 12 to 13.
Merging block 12 into block 11...
Merged blocks 11 and 12.
Merged 11 and 12 without moving.


try_optimize_cfg iteration 2

Forwarding edge 2->4 to 13 failed.
Forwarding edge 5->6 to 13 failed.
fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       ENTRY (FALLTHRU)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])
        (reg:DI 5 di [ self ])) "tester/dir_tester.c":59:79 -1
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])
        (reg:DI 4 si [ name ])) "tester/dir_tester.c":59:79 -1
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [2 success+0 S4 A32])
        (reg:SI 1 dx [ success ])) "tester/dir_tester.c":59:79 -1
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":60:11 -1
     (nil))
(insn 9 8 10 2 (set (reg:SI 82 [ _1 ])
        (mem:SI (plus:DI (reg/f:DI 87)
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])) "tester/dir_tester.c":60:11 -1
     (nil))
(insn 10 9 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 82 [ _1 ])
            (const_int 0 [0]))) "tester/dir_tester.c":60:6 -1
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 15)
            (pc))) "tester/dir_tester.c":60:6 -1
     (nil)
 -> 15)
;;  succ:       4 (FALLTHRU) tester/dir_tester.c:61:5
;;              5

;; basic block 4, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED, VISITED)
;;  pred:       2 (FALLTHRU) tester/dir_tester.c:61:5
(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 13 12 14 4 (set (pc)
        (label_ref:DI 86)) "tester/dir_tester.c":61:5 892 {jump}
     (nil)
 -> 86)
;;  succ:       13 [always]  tester/dir_tester.c:61:5

(barrier 14 13 15)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       2
(code_label 15 14 16 5 22 (nil) [1 uses])
(note 16 15 17 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 5 (set (reg:DI 88)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7f916da637e0 *.LC12>)) "tester/dir_tester.c":62:3 -1
     (nil))
(insn 18 17 19 5 (set (reg:DI 5 di)
        (reg:DI 88)) "tester/dir_tester.c":62:3 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7f916da637e0 *.LC12>)
        (nil)))
(insn 19 18 20 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":62:3 -1
     (nil))
(call_insn 20 19 21 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":62:3 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 21 20 22 5 (set (reg/f:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":63:17 -1
     (nil))
(insn 22 21 23 5 (set (reg/f:DI 83 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 89)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":63:17 -1
     (nil))
(insn 23 22 24 5 (set (reg:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])) "tester/dir_tester.c":63:17 -1
     (nil))
(insn 24 23 25 5 (set (reg:DI 4 si)
        (reg:DI 90)) "tester/dir_tester.c":63:17 -1
     (nil))
(insn 25 24 26 5 (set (reg:DI 5 di)
        (reg/f:DI 83 [ _2 ])) "tester/dir_tester.c":63:17 -1
     (nil))
(call_insn 26 25 27 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_add_subdir") [flags 0x41]  <function_decl 0x7f916dd41c00 dir_add_subdir>) [0 dir_add_subdir S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":63:17 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 27 26 28 5 (set (reg:SI 91)
        (reg:SI 0 ax)) "tester/dir_tester.c":63:17 -1
     (nil))
(insn 28 27 29 5 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 result+0 S4 A32])
        (reg:SI 91)) "tester/dir_tester.c":63:17 -1
     (nil))
(insn 29 28 30 5 (set (reg:SI 92)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 result+0 S4 A32])) "tester/dir_tester.c":64:8 -1
     (nil))
(insn 30 29 31 5 (set (reg:SI 93)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [2 success+0 S4 A32])) "tester/dir_tester.c":64:8 -1
     (nil))
(insn 31 30 32 5 (set (reg:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":64:8 -1
     (nil))
(insn 32 31 33 5 (set (reg:DI 36 r8)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f916da57c60 *.LC7>)) "tester/dir_tester.c":64:8 -1
     (nil))
(insn 33 32 34 5 (set (reg:DI 95)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f916da57cf0 *.LC8>)) "tester/dir_tester.c":64:8 -1
     (nil))
(insn 34 33 35 5 (set (reg:DI 2 cx)
        (reg:DI 95)) "tester/dir_tester.c":64:8 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f916da57cf0 *.LC8>)
        (nil)))
(insn 35 34 36 5 (set (reg:SI 1 dx)
        (reg:SI 92)) "tester/dir_tester.c":64:8 -1
     (nil))
(insn 36 35 37 5 (set (reg:SI 4 si)
        (reg:SI 93)) "tester/dir_tester.c":64:8 -1
     (nil))
(insn 37 36 38 5 (set (reg:DI 5 di)
        (reg:DI 94)) "tester/dir_tester.c":64:8 -1
     (nil))
(call_insn 38 37 39 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_success") [flags 0x3]  <function_decl 0x7f916da16c00 check_success>) [0 check_success S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":64:8 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))
(insn 39 38 40 5 (set (reg:SI 84 [ _3 ])
        (reg:SI 0 ax)) "tester/dir_tester.c":64:8 -1
     (nil))
(insn 40 39 41 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 84 [ _3 ])
            (const_int 0 [0]))) "tester/dir_tester.c":64:6 -1
     (nil))
(jump_insn 41 40 42 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 45)
            (pc))) "tester/dir_tester.c":64:6 -1
     (nil)
 -> 45)
;;  succ:       6 (FALLTHRU) tester/dir_tester.c:65:5
;;              7

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED, VISITED)
;;  pred:       5 (FALLTHRU) tester/dir_tester.c:65:5
(note 42 41 43 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(jump_insn 43 42 44 6 (set (pc)
        (label_ref:DI 86)) "tester/dir_tester.c":65:5 892 {jump}
     (nil)
 -> 86)
;;  succ:       13 [always]  tester/dir_tester.c:65:5

(barrier 44 43 45)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       5
(code_label 45 44 46 7 24 (nil) [1 uses])
(note 46 45 47 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 7 (set (reg/f:DI 96)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":66:15 -1
     (nil))
(insn 48 47 49 7 (set (mem:SI (plus:DI (reg/f:DI 96)
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])
        (const_int 1 [0x1])) "tester/dir_tester.c":66:15 -1
     (nil))
(insn 49 48 50 7 (set (reg/f:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":67:41 -1
     (nil))
(insn 50 49 51 7 (set (reg/f:DI 85 [ _4 ])
        (mem/f:DI (plus:DI (reg/f:DI 97)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":67:41 -1
     (nil))
(insn 51 50 52 7 (set (reg:DI 98)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])) "tester/dir_tester.c":67:23 -1
     (nil))
(insn 52 51 53 7 (set (reg:DI 4 si)
        (reg:DI 98)) "tester/dir_tester.c":67:23 -1
     (nil))
(insn 53 52 54 7 (set (reg:DI 5 di)
        (reg/f:DI 85 [ _4 ])) "tester/dir_tester.c":67:23 -1
     (nil))
(call_insn 54 53 55 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_find_node") [flags 0x41]  <function_decl 0x7f916dd41a00 dir_find_node>) [0 dir_find_node S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":67:23 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 55 54 56 7 (set (reg:DI 99)
        (reg:DI 0 ax)) "tester/dir_tester.c":67:23 -1
     (nil))
(insn 56 55 57 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])
        (reg:DI 99)) "tester/dir_tester.c":67:23 -1
     (nil))
(insn 57 56 58 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])
            (const_int 0 [0]))) "tester/dir_tester.c":68:6 -1
     (nil))
(jump_insn 58 57 59 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 65)
            (pc))) "tester/dir_tester.c":68:6 -1
     (nil)
 -> 65)
;;  succ:       8 (FALLTHRU)
;;              9

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED, VISITED)
;;  pred:       7 (FALLTHRU)
(note 59 58 60 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 8 (set (reg:DI 100)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f916da63870 *.LC13>)) "tester/dir_tester.c":69:5 -1
     (nil))
(insn 61 60 62 8 (set (reg:DI 5 di)
        (reg:DI 100)) "tester/dir_tester.c":69:5 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f916da63870 *.LC13>)
        (nil)))
(call_insn 62 61 63 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":69:5 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 63 62 64 8 (set (pc)
        (label_ref:DI 86)) "tester/dir_tester.c":70:5 892 {jump}
     (nil)
 -> 86)
;;  succ:       13 [always]  tester/dir_tester.c:70:5

(barrier 64 63 65)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       7
(code_label 65 64 66 9 25 (nil) [1 uses])
(note 66 65 67 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 9 (set (reg/f:DI 101)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])) "tester/dir_tester.c":72:12 -1
     (nil))
(insn 68 67 69 9 (set (reg:SI 86 [ _5 ])
        (mem:SI (plus:DI (reg/f:DI 101)
                (const_int 32 [0x20])) [2 node_17->is_dir+0 S4 A64])) "tester/dir_tester.c":72:12 -1
     (nil))
(insn 69 68 70 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 86 [ _5 ])
            (const_int 0 [0]))) "tester/dir_tester.c":72:6 -1
     (nil))
(jump_insn 70 69 71 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 77)
            (pc))) "tester/dir_tester.c":72:6 -1
     (nil)
 -> 77)
;;  succ:       10 (FALLTHRU)
;;              11

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED, VISITED)
;;  pred:       9 (FALLTHRU)
(note 71 70 72 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 10 (set (reg:DI 102)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f916da63900 *.LC14>)) "tester/dir_tester.c":73:5 -1
     (nil))
(insn 73 72 74 10 (set (reg:DI 5 di)
        (reg:DI 102)) "tester/dir_tester.c":73:5 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f916da63900 *.LC14>)
        (nil)))
(call_insn 74 73 75 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":73:5 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 75 74 76 10 (set (pc)
        (label_ref:DI 86)) "tester/dir_tester.c":74:5 892 {jump}
     (nil)
 -> 86)
;;  succ:       13 [always]  tester/dir_tester.c:74:5

(barrier 76 75 77)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 13, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       9
(code_label 77 76 78 11 26 (nil) [1 uses])
(note 78 77 79 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 11 (set (reg/f:DI 103)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":76:15 -1
     (nil))
(insn 80 79 81 11 (set (mem:SI (plus:DI (reg/f:DI 103)
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])
        (const_int 0 [0])) "tester/dir_tester.c":76:15 -1
     (nil))
(insn 81 80 82 11 (set (reg:DI 104)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)) "tester/dir_tester.c":77:3 -1
     (nil))
(insn 82 81 83 11 (set (reg:DI 5 di)
        (reg:DI 104)) "tester/dir_tester.c":77:3 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)
        (nil)))
(call_insn 83 82 86 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":77:3 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       13 (FALLTHRU)

;; basic block 13, loop depth 0, maybe hot
;;  prev block 11, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       11 (FALLTHRU)
;;              4 [always]  tester/dir_tester.c:61:5
;;              6 [always]  tester/dir_tester.c:65:5
;;              8 [always]  tester/dir_tester.c:70:5
;;              10 [always]  tester/dir_tester.c:74:5
(code_label 86 83 87 13 21 (nil) [4 uses])
(note 87 86 0 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function dir_tester_delete (dir_tester_delete, funcdef_no=11, decl_uid=2064, cgraph_uid=12, symbol_order=11)

void dir_tester_delete (struct dir_tester * self, const char * name, bool success)
{
  struct node * node;
  bool result;
  struct directory * _1;
  _bool _2;
  struct directory * _3;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  printf ("remove subordinate...");
  _1 = self_7(D)->inner_dir;
  result_10 = dir_delete (_1, name_8(D));
  _2 = check_success (self_7(D), success_11(D), result_10, "success", "error");
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 7>; [INV]
;;    succ:       7

;;   basic block 4, loop depth 0
;;    pred:       2
  _3 = self_7(D)->inner_dir;
  node_14 = dir_find_node (_3, name_8(D));
  if (node_14 != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]
;;    succ:       5
;;                6

;;   basic block 5, loop depth 0
;;    pred:       4
  self_7(D)->error = 1;
  __builtin_puts (&"\nfailed: subordinate still exists."[0]);
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 7>; [INV]
;;    succ:       7

;;   basic block 6, loop depth 0
;;    pred:       4
  __builtin_puts (&"success."[0]);
;;    succ:       7

;;   basic block 7, loop depth 0
;;    pred:       3
;;                5
;;                6
<L4>:
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 7 (self_7(D) - 7 )
Partition 8 (name_8(D) - 8 )
Partition 10 (result_10 - 10 )
Partition 11 (success_11(D) - 11 )
Partition 14 (node_14 - 14 )


Coalescible Partition map 

Partition 0, base 0 (self_7(D) - 7 )
Partition 1, base 1 (name_8(D) - 8 )
Partition 2, base 2 (success_11(D) - 11 )


Partition map 

Partition 0 (self_7(D) - 7 )
Partition 1 (name_8(D) - 8 )
Partition 2 (success_11(D) - 11 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (self_7(D) - 7 )
Partition 1 (name_8(D) - 8 )
Partition 2 (success_11(D) - 11 )

After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (self_7(D) - 7 )
Partition 4 (name_8(D) - 8 )
Partition 5 (result_10 - 10 )
Partition 6 (success_11(D) - 11 )
Partition 7 (node_14 - 14 )

void dir_tester_delete (struct dir_tester * self, const char * name, bool success)
{
  struct node * node;
  bool result;
  struct directory * _1;
  _bool _2;
  struct directory * _3;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  printf ("remove subordinate...");
  _1 = self_7(D)->inner_dir;
  result_10 = dir_delete (_1, name_8(D));
  _2 = check_success (self_7(D), success_11(D), result_10, "success", "error");
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 7>; [INV]
;;    succ:       7

;;   basic block 4, loop depth 0
;;    pred:       2
  _3 = self_7(D)->inner_dir;
  node_14 = dir_find_node (_3, name_8(D));
  if (node_14 != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]
;;    succ:       5
;;                6

;;   basic block 5, loop depth 0
;;    pred:       4
  self_7(D)->error = 1;
  __builtin_puts (&"\nfailed: subordinate still exists."[0]);
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 7>; [INV]
;;    succ:       7

;;   basic block 6, loop depth 0
;;    pred:       4
  __builtin_puts (&"success."[0]);
;;    succ:       7

;;   basic block 7, loop depth 0
;;    pred:       3
;;                5
;;                6
<L4>:
  return;
;;    succ:       EXIT

}


Partition 1: size 8 align 8
	node_14
Partition 0: size 4 align 4
	result_10

;; Generating RTL for gimple basic block 2

;; printf ("remove subordinate...");

(insn 8 7 9 (set (reg:DI 85)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f916da6b240 *.LC15>)) "tester/dir_tester.c":81:3 -1
     (nil))

(insn 9 8 10 (set (reg:DI 5 di)
        (reg:DI 85)) "tester/dir_tester.c":81:3 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f916da6b240 *.LC15>)
        (nil)))

(insn 10 9 11 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":81:3 -1
     (nil))

(call_insn 11 10 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":81:3 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))

;; _1 = self_7(D)->inner_dir;

(insn 12 11 13 (set (reg/f:DI 86)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":82:17 -1
     (nil))

(insn 13 12 0 (set (reg/f:DI 82 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 86)
                (const_int 24 [0x18])) [4 self_7(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":82:17 -1
     (nil))

;; result_10 = dir_delete (_1, name_8(D));

(insn 14 13 15 (set (reg:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])) "tester/dir_tester.c":82:17 -1
     (nil))

(insn 15 14 16 (set (reg:DI 4 si)
        (reg:DI 87)) "tester/dir_tester.c":82:17 -1
     (nil))

(insn 16 15 17 (set (reg:DI 5 di)
        (reg/f:DI 82 [ _1 ])) "tester/dir_tester.c":82:17 -1
     (nil))

(call_insn 17 16 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_delete") [flags 0x41]  <function_decl 0x7f916dd41d00 dir_delete>) [0 dir_delete S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":82:17 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))

(insn 18 17 19 (set (reg:SI 88)
        (reg:SI 0 ax)) "tester/dir_tester.c":82:17 -1
     (nil))

(insn 19 18 0 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 result+0 S4 A32])
        (reg:SI 88)) "tester/dir_tester.c":82:17 -1
     (nil))

;; _2 = check_success (self_7(D), success_11(D), result_10, "success", "error");

(insn 20 19 21 (set (reg:SI 89)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 result+0 S4 A32])) "tester/dir_tester.c":83:8 -1
     (nil))

(insn 21 20 22 (set (reg:SI 90)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [2 success+0 S4 A32])) "tester/dir_tester.c":83:8 -1
     (nil))

(insn 22 21 23 (set (reg:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":83:8 -1
     (nil))

(insn 23 22 24 (set (reg:DI 36 r8)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f916da57c60 *.LC7>)) "tester/dir_tester.c":83:8 -1
     (nil))

(insn 24 23 25 (set (reg:DI 92)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f916da57cf0 *.LC8>)) "tester/dir_tester.c":83:8 -1
     (nil))

(insn 25 24 26 (set (reg:DI 2 cx)
        (reg:DI 92)) "tester/dir_tester.c":83:8 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f916da57cf0 *.LC8>)
        (nil)))

(insn 26 25 27 (set (reg:SI 1 dx)
        (reg:SI 89)) "tester/dir_tester.c":83:8 -1
     (nil))

(insn 27 26 28 (set (reg:SI 4 si)
        (reg:SI 90)) "tester/dir_tester.c":83:8 -1
     (nil))

(insn 28 27 29 (set (reg:DI 5 di)
        (reg:DI 91)) "tester/dir_tester.c":83:8 -1
     (nil))

(call_insn 29 28 30 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_success") [flags 0x3]  <function_decl 0x7f916da16c00 check_success>) [0 check_success S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":83:8 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))

(insn 30 29 0 (set (reg:SI 83 [ _2 ])
        (reg:SI 0 ax)) "tester/dir_tester.c":83:8 -1
     (nil))

;; if (_2 == 0)

(insn 31 30 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 83 [ _2 ])
            (const_int 0 [0]))) "tester/dir_tester.c":83:6 -1
     (nil))

(jump_insn 32 31 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "tester/dir_tester.c":83:6 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 4

;; 

(code_label 36 35 37 30 (nil) [0 uses])

(note 37 36 0 NOTE_INSN_BASIC_BLOCK)

;; _3 = self_7(D)->inner_dir;

(insn 38 37 39 (set (reg/f:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":85:41 -1
     (nil))

(insn 39 38 0 (set (reg/f:DI 84 [ _3 ])
        (mem/f:DI (plus:DI (reg/f:DI 93)
                (const_int 24 [0x18])) [4 self_7(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":85:41 -1
     (nil))

;; node_14 = dir_find_node (_3, name_8(D));

(insn 40 39 41 (set (reg:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])) "tester/dir_tester.c":85:23 -1
     (nil))

(insn 41 40 42 (set (reg:DI 4 si)
        (reg:DI 94)) "tester/dir_tester.c":85:23 -1
     (nil))

(insn 42 41 43 (set (reg:DI 5 di)
        (reg/f:DI 84 [ _3 ])) "tester/dir_tester.c":85:23 -1
     (nil))

(call_insn 43 42 44 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_find_node") [flags 0x41]  <function_decl 0x7f916dd41a00 dir_find_node>) [0 dir_find_node S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":85:23 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))

(insn 44 43 45 (set (reg:DI 95)
        (reg:DI 0 ax)) "tester/dir_tester.c":85:23 -1
     (nil))

(insn 45 44 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])
        (reg:DI 95)) "tester/dir_tester.c":85:23 -1
     (nil))

;; if (node_14 != 0B)

(insn 46 45 47 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])
            (const_int 0 [0]))) "tester/dir_tester.c":86:6 -1
     (nil))

(jump_insn 47 46 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "tester/dir_tester.c":86:6 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; self_7(D)->error = 1;

(insn 49 48 50 (set (reg/f:DI 96)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":87:17 -1
     (nil))

(insn 50 49 0 (set (mem:SI (plus:DI (reg/f:DI 96)
                (const_int 32 [0x20])) [2 self_7(D)->error+0 S4 A64])
        (const_int 1 [0x1])) "tester/dir_tester.c":87:17 -1
     (nil))

;; __builtin_puts (&"\nfailed: subordinate still exists."[0]);

(insn 51 50 52 (set (reg:DI 97)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f916da6b2d0 *.LC16>)) "tester/dir_tester.c":88:5 -1
     (nil))

(insn 52 51 53 (set (reg:DI 5 di)
        (reg:DI 97)) "tester/dir_tester.c":88:5 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f916da6b2d0 *.LC16>)
        (nil)))

(call_insn 53 52 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":88:5 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 6

;; 

(code_label 56 55 57 32 (nil) [0 uses])

(note 57 56 0 NOTE_INSN_BASIC_BLOCK)

;; __builtin_puts (&"success."[0]);

(insn 58 57 59 (set (reg:DI 98)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)) "tester/dir_tester.c":91:3 -1
     (nil))

(insn 59 58 60 (set (reg:DI 5 di)
        (reg:DI 98)) "tester/dir_tester.c":91:3 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)
        (nil)))

(call_insn 60 59 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":91:3 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; Generating RTL for gimple basic block 7

;; <L4>:

(code_label 61 60 62 31 (nil) [0 uses])

(note 62 61 0 NOTE_INSN_BASIC_BLOCK)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Forwarding edge 2->4 to 9 failed.
Forwarding edge 2->4 to 9 failed.
Redirecting jump 34 from 8 to 9.
Redirecting jump 54 from 8 to 9.
Merging block 8 into block 7...
Merged blocks 7 and 8.
Merged 7 and 8 without moving.


try_optimize_cfg iteration 2

Forwarding edge 2->4 to 9 failed.
fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       ENTRY (FALLTHRU)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])
        (reg:DI 5 di [ self ])) "tester/dir_tester.c":80:38 -1
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])
        (reg:DI 4 si [ name ])) "tester/dir_tester.c":80:38 -1
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [2 success+0 S4 A32])
        (reg:SI 1 dx [ success ])) "tester/dir_tester.c":80:38 -1
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 85)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f916da6b240 *.LC15>)) "tester/dir_tester.c":81:3 -1
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 85)) "tester/dir_tester.c":81:3 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f916da6b240 *.LC15>)
        (nil)))
(insn 10 9 11 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":81:3 -1
     (nil))
(call_insn 11 10 12 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":81:3 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 12 11 13 2 (set (reg/f:DI 86)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":82:17 -1
     (nil))
(insn 13 12 14 2 (set (reg/f:DI 82 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 86)
                (const_int 24 [0x18])) [4 self_7(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":82:17 -1
     (nil))
(insn 14 13 15 2 (set (reg:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])) "tester/dir_tester.c":82:17 -1
     (nil))
(insn 15 14 16 2 (set (reg:DI 4 si)
        (reg:DI 87)) "tester/dir_tester.c":82:17 -1
     (nil))
(insn 16 15 17 2 (set (reg:DI 5 di)
        (reg/f:DI 82 [ _1 ])) "tester/dir_tester.c":82:17 -1
     (nil))
(call_insn 17 16 18 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_delete") [flags 0x41]  <function_decl 0x7f916dd41d00 dir_delete>) [0 dir_delete S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":82:17 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 18 17 19 2 (set (reg:SI 88)
        (reg:SI 0 ax)) "tester/dir_tester.c":82:17 -1
     (nil))
(insn 19 18 20 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 result+0 S4 A32])
        (reg:SI 88)) "tester/dir_tester.c":82:17 -1
     (nil))
(insn 20 19 21 2 (set (reg:SI 89)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 result+0 S4 A32])) "tester/dir_tester.c":83:8 -1
     (nil))
(insn 21 20 22 2 (set (reg:SI 90)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [2 success+0 S4 A32])) "tester/dir_tester.c":83:8 -1
     (nil))
(insn 22 21 23 2 (set (reg:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":83:8 -1
     (nil))
(insn 23 22 24 2 (set (reg:DI 36 r8)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f916da57c60 *.LC7>)) "tester/dir_tester.c":83:8 -1
     (nil))
(insn 24 23 25 2 (set (reg:DI 92)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f916da57cf0 *.LC8>)) "tester/dir_tester.c":83:8 -1
     (nil))
(insn 25 24 26 2 (set (reg:DI 2 cx)
        (reg:DI 92)) "tester/dir_tester.c":83:8 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f916da57cf0 *.LC8>)
        (nil)))
(insn 26 25 27 2 (set (reg:SI 1 dx)
        (reg:SI 89)) "tester/dir_tester.c":83:8 -1
     (nil))
(insn 27 26 28 2 (set (reg:SI 4 si)
        (reg:SI 90)) "tester/dir_tester.c":83:8 -1
     (nil))
(insn 28 27 29 2 (set (reg:DI 5 di)
        (reg:DI 91)) "tester/dir_tester.c":83:8 -1
     (nil))
(call_insn 29 28 30 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_success") [flags 0x3]  <function_decl 0x7f916da16c00 check_success>) [0 check_success S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":83:8 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))
(insn 30 29 31 2 (set (reg:SI 83 [ _2 ])
        (reg:SI 0 ax)) "tester/dir_tester.c":83:8 -1
     (nil))
(insn 31 30 32 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 83 [ _2 ])
            (const_int 0 [0]))) "tester/dir_tester.c":83:6 -1
     (nil))
(jump_insn 32 31 33 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) "tester/dir_tester.c":83:6 -1
     (nil)
 -> 36)
;;  succ:       4 (FALLTHRU) tester/dir_tester.c:84:5
;;              5

;; basic block 4, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED, VISITED)
;;  pred:       2 (FALLTHRU) tester/dir_tester.c:84:5
(note 33 32 34 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 34 33 35 4 (set (pc)
        (label_ref:DI 63)) "tester/dir_tester.c":84:5 892 {jump}
     (nil)
 -> 63)
;;  succ:       9 [always]  tester/dir_tester.c:84:5

(barrier 35 34 36)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       2
(code_label 36 35 37 5 30 (nil) [1 uses])
(note 37 36 38 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 5 (set (reg/f:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":85:41 -1
     (nil))
(insn 39 38 40 5 (set (reg/f:DI 84 [ _3 ])
        (mem/f:DI (plus:DI (reg/f:DI 93)
                (const_int 24 [0x18])) [4 self_7(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":85:41 -1
     (nil))
(insn 40 39 41 5 (set (reg:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])) "tester/dir_tester.c":85:23 -1
     (nil))
(insn 41 40 42 5 (set (reg:DI 4 si)
        (reg:DI 94)) "tester/dir_tester.c":85:23 -1
     (nil))
(insn 42 41 43 5 (set (reg:DI 5 di)
        (reg/f:DI 84 [ _3 ])) "tester/dir_tester.c":85:23 -1
     (nil))
(call_insn 43 42 44 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_find_node") [flags 0x41]  <function_decl 0x7f916dd41a00 dir_find_node>) [0 dir_find_node S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":85:23 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 44 43 45 5 (set (reg:DI 95)
        (reg:DI 0 ax)) "tester/dir_tester.c":85:23 -1
     (nil))
(insn 45 44 46 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])
        (reg:DI 95)) "tester/dir_tester.c":85:23 -1
     (nil))
(insn 46 45 47 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])
            (const_int 0 [0]))) "tester/dir_tester.c":86:6 -1
     (nil))
(jump_insn 47 46 48 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 56)
            (pc))) "tester/dir_tester.c":86:6 -1
     (nil)
 -> 56)
;;  succ:       6 (FALLTHRU)
;;              7

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED, VISITED)
;;  pred:       5 (FALLTHRU)
(note 48 47 49 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 6 (set (reg/f:DI 96)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":87:17 -1
     (nil))
(insn 50 49 51 6 (set (mem:SI (plus:DI (reg/f:DI 96)
                (const_int 32 [0x20])) [2 self_7(D)->error+0 S4 A64])
        (const_int 1 [0x1])) "tester/dir_tester.c":87:17 -1
     (nil))
(insn 51 50 52 6 (set (reg:DI 97)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f916da6b2d0 *.LC16>)) "tester/dir_tester.c":88:5 -1
     (nil))
(insn 52 51 53 6 (set (reg:DI 5 di)
        (reg:DI 97)) "tester/dir_tester.c":88:5 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f916da6b2d0 *.LC16>)
        (nil)))
(call_insn 53 52 54 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":88:5 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 54 53 55 6 (set (pc)
        (label_ref:DI 63)) "tester/dir_tester.c":89:5 892 {jump}
     (nil)
 -> 63)
;;  succ:       9 [always]  tester/dir_tester.c:89:5

(barrier 55 54 56)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 9, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       5
(code_label 56 55 57 7 32 (nil) [1 uses])
(note 57 56 58 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 7 (set (reg:DI 98)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)) "tester/dir_tester.c":91:3 -1
     (nil))
(insn 59 58 60 7 (set (reg:DI 5 di)
        (reg:DI 98)) "tester/dir_tester.c":91:3 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)
        (nil)))
(call_insn 60 59 63 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":91:3 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       9 (FALLTHRU)

;; basic block 9, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 (FALLTHRU)
;;              4 [always]  tester/dir_tester.c:84:5
;;              6 [always]  tester/dir_tester.c:89:5
(code_label 63 60 64 9 29 (nil) [2 uses])
(note 64 63 0 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function dir_tester_size (dir_tester_size, funcdef_no=12, decl_uid=2067, cgraph_uid=13, symbol_order=12)

void dir_tester_size (struct dir_tester * self, int size)
{
  struct directory * _1;
  int _2;
  struct directory * _3;
  int _4;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  printf ("checking size...");
  _1 = self_8(D)->inner_dir;
  _2 = _1->size;
  if (size_9(D) != _2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  _3 = self_8(D)->inner_dir;
  _4 = _3->size;
  printf ("\nfailed: wrong size.\nsize: %d, expected: %d", _4, size_9(D));
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  __builtin_puts (&"success."[0]);
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
<L2>:
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 8 (self_8(D) - 8 )
Partition 9 (size_9(D) - 9 )


Coalescible Partition map 

Partition 0, base 0 (self_8(D) - 8 )
Partition 1, base 1 (size_9(D) - 9 )


Partition map 

Partition 0 (self_8(D) - 8 )
Partition 1 (size_9(D) - 9 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (self_8(D) - 8 )
Partition 1 (size_9(D) - 9 )

After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (self_8(D) - 8 )
Partition 5 (size_9(D) - 9 )

void dir_tester_size (struct dir_tester * self, int size)
{
  struct directory * _1;
  int _2;
  struct directory * _3;
  int _4;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  printf ("checking size...");
  _1 = self_8(D)->inner_dir;
  _2 = _1->size;
  if (size_9(D) != _2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  _3 = self_8(D)->inner_dir;
  _4 = _3->size;
  printf ("\nfailed: wrong size.\nsize: %d, expected: %d", _4, size_9(D));
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  __builtin_puts (&"success."[0]);
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
<L2>:
  return;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; printf ("checking size...");

(insn 7 6 8 (set (reg:DI 86)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f916da6b990 *.LC17>)) "tester/dir_tester.c":95:3 -1
     (nil))

(insn 8 7 9 (set (reg:DI 5 di)
        (reg:DI 86)) "tester/dir_tester.c":95:3 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f916da6b990 *.LC17>)
        (nil)))

(insn 9 8 10 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":95:3 -1
     (nil))

(call_insn 10 9 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":95:3 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))

;; _1 = self_8(D)->inner_dir;

(insn 11 10 12 (set (reg/f:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":96:11 -1
     (nil))

(insn 12 11 0 (set (reg/f:DI 82 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 87)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":96:11 -1
     (nil))

;; _2 = _1->size;

(insn 13 12 0 (set (reg:SI 83 [ _2 ])
        (mem:SI (reg/f:DI 82 [ _1 ]) [2 _1->size+0 S4 A64])) "tester/dir_tester.c":96:22 -1
     (nil))

;; if (size_9(D) != _2)

(insn 14 13 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -12 [0xfffffffffffffff4])) [2 size+0 S4 A32])
            (reg:SI 83 [ _2 ]))) "tester/dir_tester.c":96:6 -1
     (nil))

(jump_insn 15 14 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "tester/dir_tester.c":96:6 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; _3 = self_8(D)->inner_dir;

(insn 17 16 18 (set (reg/f:DI 88)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":98:16 -1
     (nil))

(insn 18 17 0 (set (reg/f:DI 84 [ _3 ])
        (mem/f:DI (plus:DI (reg/f:DI 88)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":98:16 -1
     (nil))

;; _4 = _3->size;

(insn 19 18 0 (set (reg:SI 85 [ _4 ])
        (mem:SI (reg/f:DI 84 [ _3 ]) [2 _3->size+0 S4 A64])) "tester/dir_tester.c":97:5 -1
     (nil))

;; printf ("\nfailed: wrong size.\nsize: %d, expected: %d", _4, size_9(D));

(insn 20 19 21 (set (reg:SI 89)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 size+0 S4 A32])) "tester/dir_tester.c":97:5 -1
     (nil))

(insn 21 20 22 (set (reg:SI 1 dx)
        (reg:SI 89)) "tester/dir_tester.c":97:5 -1
     (nil))

(insn 22 21 23 (set (reg:SI 4 si)
        (reg:SI 85 [ _4 ])) "tester/dir_tester.c":97:5 -1
     (nil))

(insn 23 22 24 (set (reg:DI 90)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f916da6ba20 *.LC18>)) "tester/dir_tester.c":97:5 -1
     (nil))

(insn 24 23 25 (set (reg:DI 5 di)
        (reg:DI 90)) "tester/dir_tester.c":97:5 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f916da6ba20 *.LC18>)
        (nil)))

(insn 25 24 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":97:5 -1
     (nil))

(call_insn 26 25 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":97:5 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 4

;; 

(code_label 29 28 30 35 (nil) [0 uses])

(note 30 29 0 NOTE_INSN_BASIC_BLOCK)

;; __builtin_puts (&"success."[0]);

(insn 31 30 32 (set (reg:DI 91)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)) "tester/dir_tester.c":101:3 -1
     (nil))

(insn 32 31 33 (set (reg:DI 5 di)
        (reg:DI 91)) "tester/dir_tester.c":101:3 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)
        (nil)))

(call_insn 33 32 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":101:3 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; Generating RTL for gimple basic block 5

;; <L2>:

(code_label 34 33 35 36 (nil) [0 uses])

(note 35 34 0 NOTE_INSN_BASIC_BLOCK)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Redirecting jump 27 from 6 to 7.
Merging block 6 into block 5...
Merged blocks 5 and 6.
Merged 5 and 6 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       ENTRY (FALLTHRU)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])
        (reg:DI 5 di [ self ])) "tester/dir_tester.c":94:57 -1
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 size+0 S4 A32])
        (reg:SI 4 si [ size ])) "tester/dir_tester.c":94:57 -1
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 86)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f916da6b990 *.LC17>)) "tester/dir_tester.c":95:3 -1
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg:DI 86)) "tester/dir_tester.c":95:3 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f916da6b990 *.LC17>)
        (nil)))
(insn 9 8 10 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":95:3 -1
     (nil))
(call_insn 10 9 11 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":95:3 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 11 10 12 2 (set (reg/f:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":96:11 -1
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 82 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 87)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":96:11 -1
     (nil))
(insn 13 12 14 2 (set (reg:SI 83 [ _2 ])
        (mem:SI (reg/f:DI 82 [ _1 ]) [2 _1->size+0 S4 A64])) "tester/dir_tester.c":96:22 -1
     (nil))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -12 [0xfffffffffffffff4])) [2 size+0 S4 A32])
            (reg:SI 83 [ _2 ]))) "tester/dir_tester.c":96:6 -1
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) "tester/dir_tester.c":96:6 -1
     (nil)
 -> 29)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED, VISITED)
;;  pred:       2 (FALLTHRU)
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg/f:DI 88)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":98:16 -1
     (nil))
(insn 18 17 19 4 (set (reg/f:DI 84 [ _3 ])
        (mem/f:DI (plus:DI (reg/f:DI 88)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":98:16 -1
     (nil))
(insn 19 18 20 4 (set (reg:SI 85 [ _4 ])
        (mem:SI (reg/f:DI 84 [ _3 ]) [2 _3->size+0 S4 A64])) "tester/dir_tester.c":97:5 -1
     (nil))
(insn 20 19 21 4 (set (reg:SI 89)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 size+0 S4 A32])) "tester/dir_tester.c":97:5 -1
     (nil))
(insn 21 20 22 4 (set (reg:SI 1 dx)
        (reg:SI 89)) "tester/dir_tester.c":97:5 -1
     (nil))
(insn 22 21 23 4 (set (reg:SI 4 si)
        (reg:SI 85 [ _4 ])) "tester/dir_tester.c":97:5 -1
     (nil))
(insn 23 22 24 4 (set (reg:DI 90)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f916da6ba20 *.LC18>)) "tester/dir_tester.c":97:5 -1
     (nil))
(insn 24 23 25 4 (set (reg:DI 5 di)
        (reg:DI 90)) "tester/dir_tester.c":97:5 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f916da6ba20 *.LC18>)
        (nil)))
(insn 25 24 26 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":97:5 -1
     (nil))
(call_insn 26 25 27 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":97:5 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(jump_insn 27 26 28 4 (set (pc)
        (label_ref:DI 36)) "tester/dir_tester.c":99:5 892 {jump}
     (nil)
 -> 36)
;;  succ:       7 [always]  tester/dir_tester.c:99:5

(barrier 28 27 29)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 7, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       2
(code_label 29 28 30 5 35 (nil) [1 uses])
(note 30 29 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 5 (set (reg:DI 91)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)) "tester/dir_tester.c":101:3 -1
     (nil))
(insn 32 31 33 5 (set (reg:DI 5 di)
        (reg:DI 91)) "tester/dir_tester.c":101:3 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)
        (nil)))
(call_insn 33 32 36 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":101:3 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       7 (FALLTHRU)

;; basic block 7, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
;;              4 [always]  tester/dir_tester.c:99:5
(code_label 36 33 37 7 34 (nil) [1 uses])
(note 37 36 0 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function dir_tester_capacity (dir_tester_capacity, funcdef_no=13, decl_uid=2070, cgraph_uid=14, symbol_order=13)

void dir_tester_capacity (struct dir_tester * self, int capacity)
{
  struct directory * _1;
  int _2;
  struct directory * _3;
  int _4;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  printf ("checking capcity...");
  _1 = self_8(D)->inner_dir;
  _2 = _1->capacity;
  if (capacity_9(D) != _2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  _3 = self_8(D)->inner_dir;
  _4 = _3->capacity;
  printf ("\nfailed: wrong capacity.\napacity: %d, expected: %d", _4, capacity_9(D));
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  __builtin_puts (&"success."[0]);
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
<L2>:
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 8 (self_8(D) - 8 )
Partition 9 (capacity_9(D) - 9 )


Coalescible Partition map 

Partition 0, base 0 (self_8(D) - 8 )
Partition 1, base 1 (capacity_9(D) - 9 )


Partition map 

Partition 0 (self_8(D) - 8 )
Partition 1 (capacity_9(D) - 9 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (self_8(D) - 8 )
Partition 1 (capacity_9(D) - 9 )

After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (self_8(D) - 8 )
Partition 5 (capacity_9(D) - 9 )

void dir_tester_capacity (struct dir_tester * self, int capacity)
{
  struct directory * _1;
  int _2;
  struct directory * _3;
  int _4;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  printf ("checking capcity...");
  _1 = self_8(D)->inner_dir;
  _2 = _1->capacity;
  if (capacity_9(D) != _2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  _3 = self_8(D)->inner_dir;
  _4 = _3->capacity;
  printf ("\nfailed: wrong capacity.\napacity: %d, expected: %d", _4, capacity_9(D));
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  __builtin_puts (&"success."[0]);
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
<L2>:
  return;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; printf ("checking capcity...");

(insn 7 6 8 (set (reg:DI 86)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7f916da74000 *.LC19>)) "tester/dir_tester.c":105:3 -1
     (nil))

(insn 8 7 9 (set (reg:DI 5 di)
        (reg:DI 86)) "tester/dir_tester.c":105:3 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7f916da74000 *.LC19>)
        (nil)))

(insn 9 8 10 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":105:3 -1
     (nil))

(call_insn 10 9 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":105:3 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))

;; _1 = self_8(D)->inner_dir;

(insn 11 10 12 (set (reg/f:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":106:11 -1
     (nil))

(insn 12 11 0 (set (reg/f:DI 82 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 87)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":106:11 -1
     (nil))

;; _2 = _1->capacity;

(insn 13 12 0 (set (reg:SI 83 [ _2 ])
        (mem:SI (plus:DI (reg/f:DI 82 [ _1 ])
                (const_int 4 [0x4])) [2 _1->capacity+0 S4 A32])) "tester/dir_tester.c":106:22 -1
     (nil))

;; if (capacity_9(D) != _2)

(insn 14 13 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -12 [0xfffffffffffffff4])) [2 capacity+0 S4 A32])
            (reg:SI 83 [ _2 ]))) "tester/dir_tester.c":106:6 -1
     (nil))

(jump_insn 15 14 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "tester/dir_tester.c":106:6 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; _3 = self_8(D)->inner_dir;

(insn 17 16 18 (set (reg/f:DI 88)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":108:16 -1
     (nil))

(insn 18 17 0 (set (reg/f:DI 84 [ _3 ])
        (mem/f:DI (plus:DI (reg/f:DI 88)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":108:16 -1
     (nil))

;; _4 = _3->capacity;

(insn 19 18 0 (set (reg:SI 85 [ _4 ])
        (mem:SI (plus:DI (reg/f:DI 84 [ _3 ])
                (const_int 4 [0x4])) [2 _3->capacity+0 S4 A32])) "tester/dir_tester.c":107:5 -1
     (nil))

;; printf ("\nfailed: wrong capacity.\napacity: %d, expected: %d", _4, capacity_9(D));

(insn 20 19 21 (set (reg:SI 89)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 capacity+0 S4 A32])) "tester/dir_tester.c":107:5 -1
     (nil))

(insn 21 20 22 (set (reg:SI 1 dx)
        (reg:SI 89)) "tester/dir_tester.c":107:5 -1
     (nil))

(insn 22 21 23 (set (reg:SI 4 si)
        (reg:SI 85 [ _4 ])) "tester/dir_tester.c":107:5 -1
     (nil))

(insn 23 22 24 (set (reg:DI 90)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7f916da74090 *.LC20>)) "tester/dir_tester.c":107:5 -1
     (nil))

(insn 24 23 25 (set (reg:DI 5 di)
        (reg:DI 90)) "tester/dir_tester.c":107:5 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7f916da74090 *.LC20>)
        (nil)))

(insn 25 24 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":107:5 -1
     (nil))

(call_insn 26 25 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":107:5 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 4

;; 

(code_label 29 28 30 38 (nil) [0 uses])

(note 30 29 0 NOTE_INSN_BASIC_BLOCK)

;; __builtin_puts (&"success."[0]);

(insn 31 30 32 (set (reg:DI 91)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)) "tester/dir_tester.c":111:3 -1
     (nil))

(insn 32 31 33 (set (reg:DI 5 di)
        (reg:DI 91)) "tester/dir_tester.c":111:3 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)
        (nil)))

(call_insn 33 32 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":111:3 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; Generating RTL for gimple basic block 5

;; <L2>:

(code_label 34 33 35 39 (nil) [0 uses])

(note 35 34 0 NOTE_INSN_BASIC_BLOCK)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Redirecting jump 27 from 6 to 7.
Merging block 6 into block 5...
Merged blocks 5 and 6.
Merged 5 and 6 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       ENTRY (FALLTHRU)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])
        (reg:DI 5 di [ self ])) "tester/dir_tester.c":104:65 -1
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 capacity+0 S4 A32])
        (reg:SI 4 si [ capacity ])) "tester/dir_tester.c":104:65 -1
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 86)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7f916da74000 *.LC19>)) "tester/dir_tester.c":105:3 -1
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg:DI 86)) "tester/dir_tester.c":105:3 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7f916da74000 *.LC19>)
        (nil)))
(insn 9 8 10 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":105:3 -1
     (nil))
(call_insn 10 9 11 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":105:3 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 11 10 12 2 (set (reg/f:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":106:11 -1
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 82 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 87)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":106:11 -1
     (nil))
(insn 13 12 14 2 (set (reg:SI 83 [ _2 ])
        (mem:SI (plus:DI (reg/f:DI 82 [ _1 ])
                (const_int 4 [0x4])) [2 _1->capacity+0 S4 A32])) "tester/dir_tester.c":106:22 -1
     (nil))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -12 [0xfffffffffffffff4])) [2 capacity+0 S4 A32])
            (reg:SI 83 [ _2 ]))) "tester/dir_tester.c":106:6 -1
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) "tester/dir_tester.c":106:6 -1
     (nil)
 -> 29)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED, VISITED)
;;  pred:       2 (FALLTHRU)
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg/f:DI 88)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":108:16 -1
     (nil))
(insn 18 17 19 4 (set (reg/f:DI 84 [ _3 ])
        (mem/f:DI (plus:DI (reg/f:DI 88)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":108:16 -1
     (nil))
(insn 19 18 20 4 (set (reg:SI 85 [ _4 ])
        (mem:SI (plus:DI (reg/f:DI 84 [ _3 ])
                (const_int 4 [0x4])) [2 _3->capacity+0 S4 A32])) "tester/dir_tester.c":107:5 -1
     (nil))
(insn 20 19 21 4 (set (reg:SI 89)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 capacity+0 S4 A32])) "tester/dir_tester.c":107:5 -1
     (nil))
(insn 21 20 22 4 (set (reg:SI 1 dx)
        (reg:SI 89)) "tester/dir_tester.c":107:5 -1
     (nil))
(insn 22 21 23 4 (set (reg:SI 4 si)
        (reg:SI 85 [ _4 ])) "tester/dir_tester.c":107:5 -1
     (nil))
(insn 23 22 24 4 (set (reg:DI 90)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7f916da74090 *.LC20>)) "tester/dir_tester.c":107:5 -1
     (nil))
(insn 24 23 25 4 (set (reg:DI 5 di)
        (reg:DI 90)) "tester/dir_tester.c":107:5 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7f916da74090 *.LC20>)
        (nil)))
(insn 25 24 26 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":107:5 -1
     (nil))
(call_insn 26 25 27 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":107:5 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(jump_insn 27 26 28 4 (set (pc)
        (label_ref:DI 36)) "tester/dir_tester.c":109:5 892 {jump}
     (nil)
 -> 36)
;;  succ:       7 [always]  tester/dir_tester.c:109:5

(barrier 28 27 29)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 7, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       2
(code_label 29 28 30 5 38 (nil) [1 uses])
(note 30 29 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 5 (set (reg:DI 91)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)) "tester/dir_tester.c":111:3 -1
     (nil))
(insn 32 31 33 5 (set (reg:DI 5 di)
        (reg:DI 91)) "tester/dir_tester.c":111:3 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)
        (nil)))
(call_insn 33 32 36 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":111:3 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       7 (FALLTHRU)

;; basic block 7, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
;;              4 [always]  tester/dir_tester.c:109:5
(code_label 36 33 37 7 37 (nil) [1 uses])
(note 37 36 0 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function check_success (check_success, funcdef_no=14, decl_uid=3202, cgraph_uid=15, symbol_order=14)

bool check_success (struct dir_tester * self, bool success, bool result, char * success_tip, char * failed_tip)
{
  bool D.3300;
  bool _1;
  bool _6;
  bool _10;
  bool _16;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (success_4(D) != result_5(D))
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]
;;    succ:       3
;;                7

;;   basic block 3, loop depth 0
;;    pred:       2
  if (result_5(D) != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]
;;    succ:       4
;;                5

;;   basic block 4, loop depth 0
;;    pred:       3
  printf ("\nfailed.\nresult: %s, expected : %s.\n", success_tip_11(D), failed_tip_8(D));
  goto <bb 6>; [INV]
;;    succ:       6

;;   basic block 5, loop depth 0
;;    pred:       3
  printf ("\nfailed.\nresult: %s, expected : %s.\n", failed_tip_8(D), success_tip_11(D));
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       4
;;                5
  self_14(D)->error = 1;
  _16 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 10>; [INV]
;;    succ:       10

;;   basic block 7, loop depth 0
;;    pred:       2
  if (result_5(D) == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]
;;    succ:       8
;;                9

;;   basic block 8, loop depth 0
;;    pred:       7
  printf ("%s.\n", failed_tip_8(D));
  _10 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 10>; [INV]
;;    succ:       10

;;   basic block 9, loop depth 0
;;    pred:       7
  _6 = 1;
;;    succ:       10

;;   basic block 10, loop depth 0
;;    pred:       6
;;                8
;;                9
  # _1 = PHI <_16(6), _10(8), _6(9)>
<L7>:
  return _1;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 4 (success_4(D) - 4 )
Partition 5 (result_5(D) - 5 )
Partition 6 (_6 - 6 )
Partition 8 (failed_tip_8(D) - 8 )
Partition 10 (_10 - 10 )
Partition 11 (success_tip_11(D) - 11 )
Partition 14 (self_14(D) - 14 )
Partition 16 (_16 - 16 )
Partition 17 (_17(D) - 17 )


Coalescible Partition map 

Partition 0, base 0 (_1 - 1 6 10 16 )
Partition 1, base 1 (success_4(D) - 4 )
Partition 2, base 2 (result_5(D) - 5 )
Partition 4, base 3 (failed_tip_8(D) - 8 )
Partition 6, base 4 (success_tip_11(D) - 11 )
Partition 7, base 5 (self_14(D) - 14 )
Partition 9, base 6 (_17(D) - 17 )


Partition map 

Partition 0 (_1 - 1 )
Partition 1 (success_4(D) - 4 )
Partition 2 (result_5(D) - 5 )
Partition 3 (_6 - 6 )
Partition 4 (failed_tip_8(D) - 8 )
Partition 5 (_10 - 10 )
Partition 6 (success_tip_11(D) - 11 )
Partition 7 (self_14(D) - 14 )
Partition 8 (_16 - 16 )
Partition 9 (_17(D) - 17 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(10000, 0) _1 <-> _16
(10000, 0) _1 <-> _10
(10000, 0) _1 <-> _6

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (success_4(D) - 4 )
Partition 2 (result_5(D) - 5 )
Partition 3 (_6 - 6 )
Partition 4 (failed_tip_8(D) - 8 )
Partition 5 (_10 - 10 )
Partition 6 (success_tip_11(D) - 11 )
Partition 7 (self_14(D) - 14 )
Partition 8 (_16 - 16 )
Partition 9 (_17(D) - 17 )

Coalesce list: (1)_1 & (16)_16 [map: 0, 8] : Success -> 0
Coalesce list: (1)_1 & (10)_10 [map: 0, 5] : Success -> 0
Coalesce list: (1)_1 & (6)_6 [map: 0, 3] : Success -> 0
After Coalescing:

Partition map 

Partition 0 (_1 - 1 6 10 16 )
Partition 1 (success_4(D) - 4 )
Partition 2 (result_5(D) - 5 )
Partition 3 (failed_tip_8(D) - 8 )
Partition 4 (success_tip_11(D) - 11 )
Partition 5 (self_14(D) - 14 )
Partition 6 (_17(D) - 17 )

bool check_success (struct dir_tester * self, bool success, bool result, char * success_tip, char * failed_tip)
{
  bool D.3300;
  bool _1;
  bool _6;
  bool _10;
  bool _16;
  bool _17(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (success_4(D) != result_5(D))
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]
;;    succ:       3
;;                7

;;   basic block 3, loop depth 0
;;    pred:       2
  if (result_5(D) != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]
;;    succ:       4
;;                5

;;   basic block 4, loop depth 0
;;    pred:       3
  printf ("\nfailed.\nresult: %s, expected : %s.\n", success_tip_11(D), failed_tip_8(D));
  goto <bb 6>; [INV]
;;    succ:       6

;;   basic block 5, loop depth 0
;;    pred:       3
  printf ("\nfailed.\nresult: %s, expected : %s.\n", failed_tip_8(D), success_tip_11(D));
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       4
;;                5
  self_14(D)->error = 1;
  _16 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 10>; [INV]
;;    succ:       10

;;   basic block 7, loop depth 0
;;    pred:       2
  if (result_5(D) == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]
;;    succ:       8
;;                9

;;   basic block 8, loop depth 0
;;    pred:       7
  printf ("%s.\n", failed_tip_8(D));
  _10 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 10>; [INV]
;;    succ:       10

;;   basic block 9, loop depth 0
;;    pred:       7
  _6 = 1;
;;    succ:       10

;;   basic block 10, loop depth 0
;;    pred:       6
;;                8
;;                9
  # _1 = PHI <_16(6), _10(8), _6(9)>
<L7>:
  return _1;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; if (success_4(D) != result_5(D))

(insn 10 9 11 (set (reg:SI 84)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 success+0 S4 A32])) "tester/dir_tester.c":117:6 -1
     (nil))

(insn 11 10 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 84)
            (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -16 [0xfffffffffffffff0])) [2 result+0 S4 A32]))) "tester/dir_tester.c":117:6 -1
     (nil))

(jump_insn 12 11 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "tester/dir_tester.c":117:6 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; if (result_5(D) != 0)

(insn 14 13 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -16 [0xfffffffffffffff0])) [2 result+0 S4 A32])
            (const_int 0 [0]))) "tester/dir_tester.c":118:8 -1
     (nil))

(jump_insn 15 14 0 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "tester/dir_tester.c":118:8 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; printf ("\nfailed.\nresult: %s, expected : %s.\n", success_tip_11(D), failed_tip_8(D));

(insn 17 16 18 (set (reg:DI 85)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [1 failed_tip+0 S8 A64])) "tester/dir_tester.c":119:7 -1
     (nil))

(insn 18 17 19 (set (reg:DI 86)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [1 success_tip+0 S8 A64])) "tester/dir_tester.c":119:7 -1
     (nil))

(insn 19 18 20 (set (reg:DI 1 dx)
        (reg:DI 85)) "tester/dir_tester.c":119:7 -1
     (nil))

(insn 20 19 21 (set (reg:DI 4 si)
        (reg:DI 86)) "tester/dir_tester.c":119:7 -1
     (nil))

(insn 21 20 22 (set (reg:DI 87)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f916da746c0 *.LC21>)) "tester/dir_tester.c":119:7 -1
     (nil))

(insn 22 21 23 (set (reg:DI 5 di)
        (reg:DI 87)) "tester/dir_tester.c":119:7 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f916da746c0 *.LC21>)
        (nil)))

(insn 23 22 24 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":119:7 -1
     (nil))

(call_insn 24 23 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":119:7 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))

;; Generating RTL for gimple basic block 5

;; 

(code_label 27 26 28 42 (nil) [0 uses])

(note 28 27 0 NOTE_INSN_BASIC_BLOCK)

;; printf ("\nfailed.\nresult: %s, expected : %s.\n", failed_tip_8(D), success_tip_11(D));

(insn 29 28 30 (set (reg:DI 88)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [1 success_tip+0 S8 A64])) "tester/dir_tester.c":122:7 -1
     (nil))

(insn 30 29 31 (set (reg:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [1 failed_tip+0 S8 A64])) "tester/dir_tester.c":122:7 -1
     (nil))

(insn 31 30 32 (set (reg:DI 1 dx)
        (reg:DI 88)) "tester/dir_tester.c":122:7 -1
     (nil))

(insn 32 31 33 (set (reg:DI 4 si)
        (reg:DI 89)) "tester/dir_tester.c":122:7 -1
     (nil))

(insn 33 32 34 (set (reg:DI 90)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f916da746c0 *.LC21>)) "tester/dir_tester.c":122:7 -1
     (nil))

(insn 34 33 35 (set (reg:DI 5 di)
        (reg:DI 90)) "tester/dir_tester.c":122:7 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f916da746c0 *.LC21>)
        (nil)))

(insn 35 34 36 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":122:7 -1
     (nil))

(call_insn 36 35 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":122:7 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))

;; Generating RTL for gimple basic block 6

;; 

(code_label 37 36 38 43 (nil) [0 uses])

(note 38 37 0 NOTE_INSN_BASIC_BLOCK)

;; self_14(D)->error = 1;

(insn 39 38 40 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":125:17 -1
     (nil))

(insn 40 39 0 (set (mem:SI (plus:DI (reg/f:DI 91)
                (const_int 32 [0x20])) [2 self_14(D)->error+0 S4 A64])
        (const_int 1 [0x1])) "tester/dir_tester.c":125:17 -1
     (nil))

;; _16 = 0;

(insn 41 40 0 (set (reg:SI 82 [ _1 ])
        (const_int 0 [0])) "tester/dir_tester.c":126:12 -1
     (nil))

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 7

;; 

(code_label 44 43 45 41 (nil) [0 uses])

(note 45 44 0 NOTE_INSN_BASIC_BLOCK)

;; if (result_5(D) == 0)

(insn 46 45 47 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -16 [0xfffffffffffffff0])) [2 result+0 S4 A32])
            (const_int 0 [0]))) "tester/dir_tester.c":128:6 -1
     (nil))

(jump_insn 47 46 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "tester/dir_tester.c":128:6 -1
     (nil))

;; Generating RTL for gimple basic block 8

;; printf ("%s.\n", failed_tip_8(D));

(insn 49 48 50 (set (reg:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [1 failed_tip+0 S8 A64])) "tester/dir_tester.c":129:5 -1
     (nil))

(insn 50 49 51 (set (reg:DI 4 si)
        (reg:DI 92)) "tester/dir_tester.c":129:5 -1
     (nil))

(insn 51 50 52 (set (reg:DI 93)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f916da74750 *.LC22>)) "tester/dir_tester.c":129:5 -1
     (nil))

(insn 52 51 53 (set (reg:DI 5 di)
        (reg:DI 93)) "tester/dir_tester.c":129:5 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f916da74750 *.LC22>)
        (nil)))

(insn 53 52 54 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":129:5 -1
     (nil))

(call_insn 54 53 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":129:5 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))

;; _10 = 0;

(insn 55 54 0 (set (reg:SI 82 [ _1 ])
        (const_int 0 [0])) "tester/dir_tester.c":130:12 -1
     (nil))

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 9

;; 

(code_label 58 57 59 45 (nil) [0 uses])

(note 59 58 0 NOTE_INSN_BASIC_BLOCK)

;; _6 = 1;

(insn 60 59 0 (set (reg:SI 82 [ _1 ])
        (const_int 1 [0x1])) "tester/dir_tester.c":132:10 -1
     (nil))

;; Generating RTL for gimple basic block 10

;; <L7>:

(code_label 61 60 62 44 (nil) [0 uses])

(note 62 61 0 NOTE_INSN_BASIC_BLOCK)

;; return _1;

(insn 63 62 64 (set (reg:SI 83 [ <retval> ])
        (reg:SI 82 [ _1 ])) "tester/dir_tester.c":133:1 -1
     (nil))

(jump_insn 64 63 65 (set (pc)
        (label_ref 0)) "tester/dir_tester.c":133:1 -1
     (nil))

(barrier 65 64 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Removing jump 64.
Merging block 12 into block 11...
Merged blocks 11 and 12.
Merged 11 and 12 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       ENTRY (FALLTHRU)
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])
        (reg:DI 5 di [ self ])) "tester/dir_tester.c":115:64 -1
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 success+0 S4 A32])
        (reg:SI 4 si [ success ])) "tester/dir_tester.c":115:64 -1
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 result+0 S4 A32])
        (reg:SI 1 dx [ result ])) "tester/dir_tester.c":115:64 -1
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [1 success_tip+0 S8 A64])
        (reg:DI 2 cx [ success_tip ])) "tester/dir_tester.c":115:64 -1
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [1 failed_tip+0 S8 A64])
        (reg:DI 36 r8 [ failed_tip ])) "tester/dir_tester.c":115:64 -1
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg:SI 84)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 success+0 S4 A32])) "tester/dir_tester.c":117:6 -1
     (nil))
(insn 11 10 12 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 84)
            (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -16 [0xfffffffffffffff0])) [2 result+0 S4 A32]))) "tester/dir_tester.c":117:6 -1
     (nil))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) "tester/dir_tester.c":117:6 -1
     (nil)
 -> 44)
;;  succ:       4 (FALLTHRU)
;;              8

;; basic block 4, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       2 (FALLTHRU)
(note 13 12 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -16 [0xfffffffffffffff0])) [2 result+0 S4 A32])
            (const_int 0 [0]))) "tester/dir_tester.c":118:8 -1
     (nil))
(jump_insn 15 14 16 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) "tester/dir_tester.c":118:8 -1
     (nil)
 -> 27)
;;  succ:       5 (FALLTHRU)
;;              6

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       4 (FALLTHRU)
(note 16 15 17 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 5 (set (reg:DI 85)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [1 failed_tip+0 S8 A64])) "tester/dir_tester.c":119:7 -1
     (nil))
(insn 18 17 19 5 (set (reg:DI 86)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [1 success_tip+0 S8 A64])) "tester/dir_tester.c":119:7 -1
     (nil))
(insn 19 18 20 5 (set (reg:DI 1 dx)
        (reg:DI 85)) "tester/dir_tester.c":119:7 -1
     (nil))
(insn 20 19 21 5 (set (reg:DI 4 si)
        (reg:DI 86)) "tester/dir_tester.c":119:7 -1
     (nil))
(insn 21 20 22 5 (set (reg:DI 87)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f916da746c0 *.LC21>)) "tester/dir_tester.c":119:7 -1
     (nil))
(insn 22 21 23 5 (set (reg:DI 5 di)
        (reg:DI 87)) "tester/dir_tester.c":119:7 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f916da746c0 *.LC21>)
        (nil)))
(insn 23 22 24 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":119:7 -1
     (nil))
(call_insn 24 23 25 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":119:7 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(jump_insn 25 24 26 5 (set (pc)
        (label_ref 37)) -1
     (nil)
 -> 37)
;;  succ:       7

(barrier 26 25 27)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       4
(code_label 27 26 28 6 42 (nil) [1 uses])
(note 28 27 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 6 (set (reg:DI 88)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [1 success_tip+0 S8 A64])) "tester/dir_tester.c":122:7 -1
     (nil))
(insn 30 29 31 6 (set (reg:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [1 failed_tip+0 S8 A64])) "tester/dir_tester.c":122:7 -1
     (nil))
(insn 31 30 32 6 (set (reg:DI 1 dx)
        (reg:DI 88)) "tester/dir_tester.c":122:7 -1
     (nil))
(insn 32 31 33 6 (set (reg:DI 4 si)
        (reg:DI 89)) "tester/dir_tester.c":122:7 -1
     (nil))
(insn 33 32 34 6 (set (reg:DI 90)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f916da746c0 *.LC21>)) "tester/dir_tester.c":122:7 -1
     (nil))
(insn 34 33 35 6 (set (reg:DI 5 di)
        (reg:DI 90)) "tester/dir_tester.c":122:7 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f916da746c0 *.LC21>)
        (nil)))
(insn 35 34 36 6 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":122:7 -1
     (nil))
(call_insn 36 35 37 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":122:7 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
;;  succ:       7 (FALLTHRU)

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       5
;;              6 (FALLTHRU)
(code_label 37 36 38 7 43 (nil) [1 uses])
(note 38 37 39 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 7 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":125:17 -1
     (nil))
(insn 40 39 41 7 (set (mem:SI (plus:DI (reg/f:DI 91)
                (const_int 32 [0x20])) [2 self_14(D)->error+0 S4 A64])
        (const_int 1 [0x1])) "tester/dir_tester.c":125:17 -1
     (nil))
(insn 41 40 42 7 (set (reg:SI 82 [ _1 ])
        (const_int 0 [0])) "tester/dir_tester.c":126:12 -1
     (nil))
(jump_insn 42 41 43 7 (set (pc)
        (label_ref 61)) "tester/dir_tester.c":126:12 -1
     (nil)
 -> 61)
;;  succ:       11 tester/dir_tester.c:126:12

(barrier 43 42 44)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       2
(code_label 44 43 45 8 41 (nil) [1 uses])
(note 45 44 46 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -16 [0xfffffffffffffff0])) [2 result+0 S4 A32])
            (const_int 0 [0]))) "tester/dir_tester.c":128:6 -1
     (nil))
(jump_insn 47 46 48 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 58)
            (pc))) "tester/dir_tester.c":128:6 -1
     (nil)
 -> 58)
;;  succ:       9 (FALLTHRU)
;;              10

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       8 (FALLTHRU)
(note 48 47 49 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 9 (set (reg:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [1 failed_tip+0 S8 A64])) "tester/dir_tester.c":129:5 -1
     (nil))
(insn 50 49 51 9 (set (reg:DI 4 si)
        (reg:DI 92)) "tester/dir_tester.c":129:5 -1
     (nil))
(insn 51 50 52 9 (set (reg:DI 93)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f916da74750 *.LC22>)) "tester/dir_tester.c":129:5 -1
     (nil))
(insn 52 51 53 9 (set (reg:DI 5 di)
        (reg:DI 93)) "tester/dir_tester.c":129:5 -1
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f916da74750 *.LC22>)
        (nil)))
(insn 53 52 54 9 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":129:5 -1
     (nil))
(call_insn 54 53 55 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":129:5 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 55 54 56 9 (set (reg:SI 82 [ _1 ])
        (const_int 0 [0])) "tester/dir_tester.c":130:12 -1
     (nil))
(jump_insn 56 55 57 9 (set (pc)
        (label_ref 61)) "tester/dir_tester.c":130:12 -1
     (nil)
 -> 61)
;;  succ:       11 tester/dir_tester.c:130:12

(barrier 57 56 58)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       8
(code_label 58 57 59 10 45 (nil) [1 uses])
(note 59 58 60 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 10 (set (reg:SI 82 [ _1 ])
        (const_int 1 [0x1])) "tester/dir_tester.c":132:10 -1
     (nil))
;;  succ:       11 (FALLTHRU) tester/dir_tester.c:132:10

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 1, flags: (NEW, REACHABLE, RTL, VISITED)
;;  pred:       7 tester/dir_tester.c:126:12
;;              9 tester/dir_tester.c:130:12
;;              10 (FALLTHRU) tester/dir_tester.c:132:10
(code_label 61 60 62 11 44 (nil) [2 uses])
(note 62 61 63 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 67 11 (set (reg:SI 83 [ <retval> ])
        (reg:SI 82 [ _1 ])) "tester/dir_tester.c":133:1 -1
     (nil))
(insn 67 63 68 11 (set (reg/i:SI 0 ax)
        (reg:SI 83 [ <retval> ])) "tester/dir_tester.c":133:1 -1
     (nil))
(insn 68 67 0 11 (use (reg/i:SI 0 ax)) "tester/dir_tester.c":133:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)

