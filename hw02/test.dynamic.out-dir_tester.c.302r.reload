
;; Function dir_tester_create (dir_tester_create, funcdef_no=6, decl_uid=2045, cgraph_uid=7, symbol_order=6)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 6:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 7:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 30:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 39: point = 0, n_alt = -1
   Insn 38: point = 0, n_alt = -2
   Insn 34: point = 1, n_alt = -2
   Insn 31: point = 3, n_alt = 3
   Insn 30: point = 4, n_alt = 5
   Insn 29: point = 5, n_alt = 3
   Insn 28: point = 6, n_alt = -2
   Insn 27: point = 7, n_alt = 0
   Insn 26: point = 7, n_alt = -2
   Insn 25: point = 8, n_alt = 3
   Insn 24: point = 9, n_alt = 0
   Insn 23: point = 9, n_alt = 3
   Insn 22: point = 9, n_alt = -2
   Insn 21: point = 10, n_alt = 4
   Insn 20: point = 11, n_alt = -2
   Insn 19: point = 12, n_alt = 3
   Insn 18: point = 13, n_alt = 1
   Insn 17: point = 14, n_alt = 3
   Insn 16: point = 15, n_alt = 0
   Insn 15: point = 15, n_alt = -2
   Insn 14: point = 16, n_alt = -2
   Insn 13: point = 17, n_alt = 2
   Insn 12: point = 17, n_alt = 3
   Insn 11: point = 18, n_alt = 3
   Insn 10: point = 19, n_alt = 5
   Insn 9: point = 20, n_alt = -2
   Insn 8: point = 21, n_alt = 0
   Insn 7: point = 21, n_alt = 2
   Insn 6: point = 21, n_alt = 2
   Insn 2: point = 21, n_alt = 5
 r82: [15..18]
 r83: [11..12]
 r84: [4..6]
 r85: [2..3]
 r86: [0..1]
 r87: [19..20]
 r88: [16..17]
 r89: [13..14]
 r90: [9..10]
 r91: [7..8]
 r92: [4..5]
Compressing live ranges: from 21 to 18 - 85%
Ranges after the compression:
 r82: [14..15]
 r83: [10..11]
 r84: [4..5]
 r85: [2..3]
 r86: [0..1]
 r87: [16..17]
 r88: [14..15]
 r89: [12..13]
 r90: [8..9]
 r91: [6..7]
 r92: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 15
changing reg in insn 19
changing reg in insn 20
changing reg in insn 28
changing reg in insn 30
changing reg in insn 31
changing reg in insn 34
changing reg in insn 34
changing reg in insn 38
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 14
changing reg in insn 17
changing reg in insn 18
changing reg in insn 21
changing reg in insn 22
changing reg in insn 25
changing reg in insn 26
changing reg in insn 29
changing reg in insn 30
deleting insn with uid = 9.
deleting insn with uid = 28.
deleting insn with uid = 34.
deleting insn with uid = 38.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 27.


dir_tester_create

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={12d,10u} r1={7d,2u} r2={6d,1u} r4={8d,3u} r5={9d,5u} r6={1d,11u} r7={1d,6u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={4d} r18={4d} r19={1d,1u} r20={5d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={5d} r37={5d} r38={4d} r39={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} 
;;    total ref usage 342{303d,39u,0e} in 26{22 regular + 4 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 84 85 86 87 88 89 90 91 92
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 name+0 S8 A64])
        (reg:DI 5 di [ name ])) "tester/dir_tester.c":9:50 80 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 4 si)
        (const_int 40 [0x28])) "tester/dir_tester.c":10:29 80 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (const_int 1 [0x1])) "tester/dir_tester.c":10:29 80 {*movdi_internal}
     (nil))
(call_insn 8 7 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("calloc") [flags 0x41]  <function_decl 0x7f916dcd8500 calloc>) [0 __builtin_calloc S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":10:29 909 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 10 8 11 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])
        (reg/f:DI 0 ax [87])) "tester/dir_tester.c":10:29 80 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [orig:82 _1 ] [82])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":11:15 80 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 2 cx [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 name+0 S8 A64])) "tester/dir_tester.c":11:3 80 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 1 dx)
        (const_int 20 [0x14])) "tester/dir_tester.c":11:3 80 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 4 si)
        (reg:DI 2 cx [88])) "tester/dir_tester.c":11:3 80 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:82 _1 ] [82])) "tester/dir_tester.c":11:3 80 {*movdi_internal}
     (nil))
(call_insn 16 15 17 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strncpy") [flags 0x41]  <function_decl 0x7f916dcc0e00 strncpy>) [0 __builtin_strncpy S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":11:3 909 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 17 16 18 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":12:15 80 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (mem:SI (plus:DI (reg/f:DI 0 ax [89])
                (const_int 32 [0x20])) [2 self_6->error+0 S4 A64])
        (const_int 0 [0])) "tester/dir_tester.c":12:15 81 {*movsi_internal}
     (nil))
(insn 19 18 20 2 (set (reg/f:DI 0 ax [orig:83 _2 ] [83])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":13:46 80 {*movdi_internal}
     (nil))
(insn 20 19 21 2 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:83 _2 ] [83])) "tester/dir_tester.c":13:3 80 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:DI 0 ax [90])
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f916da457e0 *.LC0>)) "tester/dir_tester.c":13:3 80 {*movdi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [90])) "tester/dir_tester.c":13:3 80 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f916da457e0 *.LC0>)
        (nil)))
(insn 23 22 24 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":13:3 83 {*movqi_internal}
     (nil))
(call_insn 24 23 25 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":13:3 909 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 25 24 26 2 (set (reg:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 name+0 S8 A64])) "tester/dir_tester.c":14:21 80 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [91])) "tester/dir_tester.c":14:21 80 {*movdi_internal}
     (nil))
(call_insn 27 26 29 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_new") [flags 0x41]  <function_decl 0x7f916dd41800 dir_new>) [0 dir_new S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":14:21 909 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 29 27 30 2 (set (reg/f:DI 1 dx [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":14:19 80 {*movdi_internal}
     (nil))
(insn 30 29 31 2 (set (mem/f:DI (plus:DI (reg/f:DI 1 dx [92])
                (const_int 24 [0x18])) [4 self_6->inner_dir+0 S8 A64])
        (reg/f:DI 0 ax [orig:84 _3 ] [84])) "tester/dir_tester.c":14:19 80 {*movdi_internal}
     (nil))
(insn 31 30 39 2 (set (reg/f:DI 0 ax [orig:85 _13 ] [85])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":15:10 80 {*movdi_internal}
     (nil))
(insn 39 31 41 2 (use (reg/i:DI 0 ax)) "tester/dir_tester.c":16:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 41 39 0 NOTE_INSN_DELETED)

;; Function dir_tester_destory (dir_tester_destory, funcdef_no=7, decl_uid=2047, cgraph_uid=8, symbol_order=7)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 22:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 29:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 6
EBB 7 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 42: point = 0, n_alt = -1
  BB 7
   Insn 36: point = 0, n_alt = 0
   Insn 35: point = 0, n_alt = -2
   Insn 34: point = 1, n_alt = 3
  BB 5
   Insn 39: point = 2, n_alt = -1
   Insn 24: point = 2, n_alt = 0
   Insn 23: point = 2, n_alt = -2
   Insn 22: point = 3, n_alt = 4
  BB 6
   Insn 31: point = 4, n_alt = 0
   Insn 30: point = 4, n_alt = -2
   Insn 29: point = 5, n_alt = 4
  BB 4
   Insn 20: point = 6, n_alt = -1
   Insn 19: point = 6, n_alt = 0
   Insn 18: point = 7, n_alt = 0
   Insn 17: point = 9, n_alt = 3
  BB 3
   Insn 14: point = 10, n_alt = 0
   Insn 13: point = 10, n_alt = -2
   Insn 12: point = 11, n_alt = 3
   Insn 11: point = 13, n_alt = 3
  BB 2
   Insn 9: point = 14, n_alt = -1
   Insn 8: point = 14, n_alt = 0
   Insn 7: point = 15, n_alt = 3
   Insn 6: point = 17, n_alt = 3
   Insn 2: point = 18, n_alt = 5
 r82: [14..15]
 r83: [10..11]
 r84: [6..7]
 r85: [16..17]
 r86: [12..13]
 r87: [8..9]
 r88: [2..3]
 r89: [4..5]
 r90: [0..1]
Compressing live ranges: from 18 to 18 - 100%
Ranges after the compression:
 r82: [14..15]
 r83: [10..11]
 r84: [6..7]
 r85: [16..17]
 r86: [12..13]
 r87: [8..9]
 r88: [2..3]
 r89: [4..5]
 r90: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 12
changing reg in insn 13
changing reg in insn 18
changing reg in insn 19
changing reg in insn 6
changing reg in insn 7
changing reg in insn 11
changing reg in insn 12
changing reg in insn 17
changing reg in insn 18
changing reg in insn 22
changing reg in insn 23
changing reg in insn 29
changing reg in insn 30
changing reg in insn 34
changing reg in insn 35
starting the processing of deferred insns
ending the processing of deferred insns


dir_tester_destory

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={14d,9u} r1={5d} r2={5d} r4={5d} r5={9d,5u} r6={1d,13u} r7={1d,12u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={6d,2u} r18={4d} r19={1d,1u} r20={5d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={5d} r37={5d} r38={4d} r39={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} 
;;    total ref usage 343{301d,42u,0e} in 24{20 regular + 4 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 85
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])
        (reg:DI 5 di [ self ])) "tester/dir_tester.c":17:50 80 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [85])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":18:11 80 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [orig:82 _1 ] [82])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [85])
                (const_int 24 [0x18])) [4 self_7(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":18:11 80 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:82 _1 ] [82])
            (const_int 0 [0]))) "tester/dir_tester.c":18:6 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 15)
            (pc))) "tester/dir_tester.c":18:6 891 {*jcc}
     (nil)
 -> 15)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 83 86
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:DI 0 ax [86])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":19:5 80 {*movdi_internal}
     (nil))
(insn 12 11 13 3 (set (reg/f:DI 0 ax [orig:83 _2 ] [83])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [86])
                (const_int 24 [0x18])) [4 self_7(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":19:5 80 {*movdi_internal}
     (nil))
(insn 13 12 14 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:83 _2 ] [83])) "tester/dir_tester.c":19:5 80 {*movdi_internal}
     (nil))
(call_insn 14 13 15 3 (call (mem:QI (symbol_ref:DI ("dir_release") [flags 0x41]  <function_decl 0x7f916dd41900 dir_release>) [0 dir_release S1 A8])
        (const_int 0 [0])) "tester/dir_tester.c":19:5 898 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 84 87
(code_label 15 14 16 4 4 (nil) [1 uses])
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg/f:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":21:11 80 {*movdi_internal}
     (nil))
(insn 18 17 19 4 (set (reg:SI 0 ax [orig:84 _3 ] [84])
        (mem:SI (plus:DI (reg/f:DI 0 ax [87])
                (const_int 32 [0x20])) [2 self_7(D)->error+0 S4 A64])) "tester/dir_tester.c":21:11 81 {*movsi_internal}
     (nil))
(insn 19 18 20 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:84 _3 ] [84])
            (const_int 0 [0]))) "tester/dir_tester.c":21:6 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 20 19 21 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) "tester/dir_tester.c":21:6 891 {*jcc}
     (nil)
 -> 27)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 88
(note 21 20 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 5 (set (reg:DI 0 ax [88])
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f916da45c60 *.LC1>)) "tester/dir_tester.c":22:5 80 {*movdi_internal}
     (nil))
(insn 23 22 24 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "tester/dir_tester.c":22:5 80 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f916da45c60 *.LC1>)
        (nil)))
(call_insn 24 23 39 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":22:5 909 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 39 24 40 5 (set (pc)
        (label_ref 32)) 892 {jump}
     (nil)
 -> 32)
;;  succ:       7 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 40 39 27)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 89
(code_label 27 40 28 6 5 (nil) [1 uses])
(note 28 27 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 6 (set (reg:DI 0 ax [89])
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f916da45cf0 *.LC2>)) "tester/dir_tester.c":24:5 80 {*movdi_internal}
     (nil))
(insn 30 29 31 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [89])) "tester/dir_tester.c":24:5 80 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f916da45cf0 *.LC2>)
        (nil)))
(call_insn 31 30 32 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":24:5 909 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              5 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 90
(code_label 32 31 33 7 6 (nil) [1 uses])
(note 33 32 34 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 7 (set (reg:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":26:3 80 {*movdi_internal}
     (nil))
(insn 35 34 36 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [90])) "tester/dir_tester.c":26:3 80 {*movdi_internal}
     (nil))
(call_insn 36 35 41 7 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f916dcddc00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "tester/dir_tester.c":26:3 898 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       8 [always]  (FALLTHRU) tester/dir_tester.c:27:1
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7 [always]  (FALLTHRU) tester/dir_tester.c:27:1
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 41 36 42 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 8 (const_int 0 [0]) "tester/dir_tester.c":27:1 928 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 43 42 0 NOTE_INSN_DELETED)

;; Function dir_tester_find_node (dir_tester_find_node, funcdef_no=8, decl_uid=2051, cgraph_uid=9, symbol_order=8)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=48, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 31:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 32:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 46:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3 4
EBB 6
EBB 7
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
  BB 6
   Insn 58: point = 0, n_alt = -1
   Insn 57: point = 0, n_alt = -1
  BB 4
   Insn 53: point = 0, n_alt = -1
   Insn 48: point = 0, n_alt = 0
   Insn 47: point = 0, n_alt = -2
   Insn 46: point = 1, n_alt = 4
  BB 7
   Insn 62: point = 2, n_alt = -1
  BB 3
   Insn 40: point = 2, n_alt = -1
   Insn 39: point = 2, n_alt = 0
   Insn 38: point = 3, n_alt = -2
   Insn 37: point = 4, n_alt = 0
   Insn 36: point = 4, n_alt = -2
   Insn 35: point = 5, n_alt = -2
   Insn 34: point = 6, n_alt = -2
   Insn 33: point = 7, n_alt = -2
   Insn 32: point = 8, n_alt = 4
   Insn 31: point = 9, n_alt = 4
   Insn 30: point = 9, n_alt = 3
   Insn 29: point = 10, n_alt = 0
   Insn 28: point = 11, n_alt = 0
   Insn 27: point = 12, n_alt = 1
   Insn 26: point = 13, n_alt = 0
   Insn 25: point = 15, n_alt = 0
   Insn 24: point = 16, n_alt = 0
   Insn 23: point = 17, n_alt = -2
   Insn 22: point = 18, n_alt = 0
   Insn 21: point = 18, n_alt = -2
   Insn 20: point = 19, n_alt = -2
   Insn 19: point = 20, n_alt = 3
   Insn 18: point = 21, n_alt = 3
   Insn 17: point = 23, n_alt = 3
  BB 2
   Insn 11: point = 24, n_alt = -1
   Insn 10: point = 24, n_alt = 0
   Insn 9: point = 25, n_alt = 0
   Insn 8: point = 27, n_alt = 3
   Insn 4: point = 28, n_alt = 1
   Insn 3: point = 28, n_alt = 5
   Insn 2: point = 28, n_alt = 5
 r82: [24..25]
 r83: [18..21]
 r84: [16..17]
 r85: [14..15]
 r86: [2..3]
 r87: [26..27]
 r88: [22..23]
 r89: [19..20]
 r90: [12..13]
 r91: [6..11]
 r92: [5..10]
 r93: [4..9]
 r94: [7..8]
 r95: [0..1]
Compressing live ranges: from 28 to 20 - 71%
Ranges after the compression:
 r82: [16..17]
 r83: [12..13]
 r84: [10..11]
 r85: [8..9]
 r86: [2..3]
 r87: [18..19]
 r88: [14..15]
 r89: [12..13]
 r90: [6..7]
 r91: [4..5]
 r92: [4..5]
 r93: [4..5]
 r94: [4..5]
 r95: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=48, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 10
changing reg in insn 18
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 38
changing reg in insn 39
changing reg in insn 8
changing reg in insn 9
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 34
changing reg in insn 29
changing reg in insn 35
changing reg in insn 30
changing reg in insn 36
changing reg in insn 32
changing reg in insn 33
changing reg in insn 46
changing reg in insn 47
deleting insn with uid = 23.
deleting insn with uid = 33.
deleting insn with uid = 34.
deleting insn with uid = 35.
deleting insn with uid = 38.
starting the processing of deferred insns
ending the processing of deferred insns


dir_tester_find_node

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 36 [r8]
;;  ref usage 	r0={12d,10u} r1={6d,3u} r2={5d,1u} r4={6d,3u} r5={7d,4u} r6={1d,17u} r7={1d,10u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={6d,3u} r18={3d} r19={1d,1u} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={5d,1u} r37={4d} r38={3d} r39={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} 
;;    total ref usage 292{239d,53u,0e} in 33{30 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 87
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])
        (reg:DI 5 di [ self ])) "tester/dir_tester.c":30:41 80 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])
        (reg:DI 4 si [ name ])) "tester/dir_tester.c":30:41 80 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [2 success+0 S4 A32])
        (reg:SI 1 dx [ success ])) "tester/dir_tester.c":30:41 81 {*movsi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":31:11 80 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [orig:82 _1 ] [82])
        (mem:SI (plus:DI (reg/f:DI 0 ax [87])
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])) "tester/dir_tester.c":31:11 81 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:82 _1 ] [82])
            (const_int 0 [0]))) "tester/dir_tester.c":31:6 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 11 10 16 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 56)
            (pc))) "tester/dir_tester.c":31:6 891 {*jcc}
     (nil)
 -> 56)
;;  succ:       6 tester/dir_tester.c:32:5
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 83 84 85 86 88 89 90 91 92 93 94
(note 16 11 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg/f:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":33:36 80 {*movdi_internal}
     (nil))
(insn 18 17 19 3 (set (reg/f:DI 0 ax [orig:83 _2 ] [83])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [88])
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":33:36 80 {*movdi_internal}
     (nil))
(insn 19 18 20 3 (set (reg:DI 1 dx [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])) "tester/dir_tester.c":33:18 80 {*movdi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:DI 4 si)
        (reg:DI 1 dx [89])) "tester/dir_tester.c":33:18 80 {*movdi_internal}
     (nil))
(insn 21 20 22 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:83 _2 ] [83])) "tester/dir_tester.c":33:18 80 {*movdi_internal}
     (nil))
(call_insn 22 21 24 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_find_node") [flags 0x41]  <function_decl 0x7f916dd41a00 dir_find_node>) [0 dir_find_node S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":33:18 909 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 24 22 25 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:84 _3 ] [84])
            (const_int 0 [0]))) "tester/dir_tester.c":33:17 8 {*cmpdi_ccno_1}
     (nil))
(insn 25 24 26 3 (set (reg:QI 0 ax [orig:85 _4 ] [85])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "tester/dir_tester.c":33:17 886 {*setcc_qi}
     (nil))
(insn 26 25 27 3 (set (reg:SI 0 ax [90])
        (zero_extend:SI (reg:QI 0 ax [orig:85 _4 ] [85]))) "tester/dir_tester.c":33:8 150 {*zero_extendqisi2}
     (nil))
(insn 27 26 28 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [2 result+0 S4 A32])
        (reg:SI 0 ax [90])) "tester/dir_tester.c":33:8 81 {*movsi_internal}
     (nil))
(insn 28 27 29 3 (set (reg:SI 1 dx [91])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [2 result+0 S4 A32])) "tester/dir_tester.c":34:8 81 {*movsi_internal}
     (nil))
(insn 29 28 30 3 (set (reg:SI 4 si [92])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [2 success+0 S4 A32])) "tester/dir_tester.c":34:8 81 {*movsi_internal}
     (nil))
(insn 30 29 31 3 (set (reg:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":34:8 80 {*movdi_internal}
     (nil))
(insn 31 30 32 3 (set (reg:DI 36 r8)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f916da573f0 *.LC3>)) "tester/dir_tester.c":34:8 80 {*movdi_internal}
     (nil))
(insn 32 31 36 3 (set (reg:DI 2 cx [94])
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f916da57480 *.LC4>)) "tester/dir_tester.c":34:8 80 {*movdi_internal}
     (nil))
(insn 36 32 37 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [93])) "tester/dir_tester.c":34:8 80 {*movdi_internal}
     (nil))
(call_insn 37 36 39 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_success") [flags 0x3]  <function_decl 0x7f916da16c00 check_success>) [0 check_success S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":34:8 909 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))
(insn 39 37 40 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:86 _5 ] [86])
            (const_int 0 [0]))) "tester/dir_tester.c":34:6 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 40 39 45 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 61)
            (pc))) "tester/dir_tester.c":34:6 891 {*jcc}
     (nil)
 -> 61)
;;  succ:       7 tester/dir_tester.c:35:5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 95
(note 45 40 46 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 4 (set (reg:DI 0 ax [95])
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f916da57510 *.LC5>)) "tester/dir_tester.c":36:3 80 {*movdi_internal}
     (nil))
(insn 47 46 48 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [95])) "tester/dir_tester.c":36:3 80 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f916da57510 *.LC5>)
        (nil)))
(call_insn 48 47 53 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":36:3 909 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 53 48 54 4 (set (pc)
        (label_ref 51)) 892 {jump}
     (nil)
 -> 51)
;;  succ:       5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 54 53 56)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 4, next block 7, flags: (RTL, MODIFIED)
;;  pred:       2 tester/dir_tester.c:32:5
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 56 54 55 6 11 (nil) [1 uses])
(note 55 56 57 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 57 55 58 6 (const_int 0 [0]) "tester/dir_tester.c":32:5 928 {nop}
     (nil))
(jump_insn 58 57 59 6 (set (pc)
        (label_ref 51)) 892 {jump}
     (nil)
 -> 51)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 59 58 61)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 tester/dir_tester.c:35:5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 61 59 60 7 12 (nil) [1 uses])
(note 60 61 62 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 62 60 51 7 (const_int 0 [0]) "tester/dir_tester.c":35:5 928 {nop}
     (nil))
;;  succ:       5 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7 [always]  (FALLTHRU)
;;              4
;;              6 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 51 62 52 5 7 (nil) [2 uses])
(note 52 51 63 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 63 52 0 NOTE_INSN_DELETED)

;; Function dir_tester_add_file (dir_tester_add_file, funcdef_no=9, decl_uid=2056, cgraph_uid=10, symbol_order=9)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=48, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 35:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 36:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 59:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 63:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 75:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 84:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3 4 5
EBB 6 7
EBB 8
EBB 10
EBB 11
EBB 9

********** Pseudo live ranges #1: **********

  BB 9
  BB 10
   Insn 100: point = 0, n_alt = -1
   Insn 99: point = 0, n_alt = -1
  BB 5
   Insn 91: point = 0, n_alt = -1
   Insn 65: point = 0, n_alt = 0
   Insn 64: point = 0, n_alt = -2
   Insn 63: point = 1, n_alt = 4
  BB 11
   Insn 104: point = 2, n_alt = -1
  BB 8
   Insn 95: point = 2, n_alt = -1
   Insn 86: point = 2, n_alt = 0
   Insn 85: point = 2, n_alt = -2
   Insn 84: point = 3, n_alt = 4
   Insn 83: point = 4, n_alt = 1
   Insn 82: point = 5, n_alt = 3
  BB 7
   Insn 93: point = 6, n_alt = -1
   Insn 77: point = 6, n_alt = 0
   Insn 76: point = 6, n_alt = -2
   Insn 75: point = 7, n_alt = 4
  BB 6
   Insn 73: point = 8, n_alt = -1
   Insn 72: point = 8, n_alt = 0
   Insn 71: point = 9, n_alt = 0
   Insn 70: point = 11, n_alt = 3
  BB 4
   Insn 61: point = 12, n_alt = -1
   Insn 60: point = 12, n_alt = 1
   Insn 59: point = 12, n_alt = 5
   Insn 58: point = 13, n_alt = -2
   Insn 57: point = 14, n_alt = 0
   Insn 56: point = 14, n_alt = -2
   Insn 55: point = 15, n_alt = -2
   Insn 54: point = 16, n_alt = 3
   Insn 53: point = 17, n_alt = 3
   Insn 52: point = 19, n_alt = 3
   Insn 51: point = 20, n_alt = 1
   Insn 50: point = 21, n_alt = 3
  BB 3
   Insn 44: point = 22, n_alt = -1
   Insn 43: point = 22, n_alt = 0
   Insn 42: point = 23, n_alt = -2
   Insn 41: point = 24, n_alt = 0
   Insn 40: point = 24, n_alt = -2
   Insn 39: point = 25, n_alt = -2
   Insn 38: point = 26, n_alt = -2
   Insn 37: point = 27, n_alt = -2
   Insn 36: point = 28, n_alt = 4
   Insn 35: point = 29, n_alt = 4
   Insn 34: point = 29, n_alt = 3
   Insn 33: point = 30, n_alt = 0
   Insn 32: point = 31, n_alt = 0
   Insn 31: point = 32, n_alt = 1
   Insn 30: point = 33, n_alt = -2
   Insn 29: point = 34, n_alt = 0
   Insn 28: point = 34, n_alt = -2
   Insn 27: point = 35, n_alt = -2
   Insn 26: point = 36, n_alt = -2
   Insn 25: point = 37, n_alt = 0
   Insn 24: point = 38, n_alt = 3
   Insn 23: point = 39, n_alt = 3
   Insn 22: point = 41, n_alt = 3
   Insn 21: point = 42, n_alt = 0
   Insn 20: point = 42, n_alt = 3
   Insn 19: point = 42, n_alt = -2
   Insn 18: point = 43, n_alt = 4
  BB 2
   Insn 12: point = 44, n_alt = -1
   Insn 11: point = 44, n_alt = 0
   Insn 10: point = 45, n_alt = 0
   Insn 9: point = 47, n_alt = 3
   Insn 5: point = 48, n_alt = 1
   Insn 4: point = 48, n_alt = 5
   Insn 3: point = 48, n_alt = 1
   Insn 2: point = 48, n_alt = 5
 r82: [44..45]
 r83: [34..39]
 r84: [22..23]
 r85: [14..17]
 r86: [8..9]
 r87: [46..47]
 r88: [42..43]
 r89: [40..41]
 r90: [36..38]
 r91: [35..37]
 r92: [32..33]
 r93: [26..31]
 r94: [25..30]
 r95: [24..29]
 r96: [27..28]
 r97: [20..21]
 r98: [18..19]
 r99: [15..16]
 r100: [12..13]
 r101: [0..1]
 r102: [10..11]
 r103: [6..7]
 r104: [4..5]
 r105: [2..3]
Compressing live ranges: from 48 to 36 - 75%
Ranges after the compression:
 r82: [32..33]
 r83: [26..27]
 r84: [20..21]
 r85: [14..15]
 r86: [8..9]
 r87: [34..35]
 r88: [30..31]
 r89: [28..29]
 r90: [26..27]
 r91: [26..27]
 r92: [24..25]
 r93: [22..23]
 r94: [22..23]
 r95: [22..23]
 r96: [22..23]
 r97: [18..19]
 r98: [16..17]
 r99: [14..15]
 r100: [12..13]
 r101: [0..1]
 r102: [10..11]
 r103: [6..7]
 r104: [4..5]
 r105: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=48, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 11
changing reg in insn 23
changing reg in insn 28
changing reg in insn 42
changing reg in insn 43
changing reg in insn 53
changing reg in insn 56
changing reg in insn 71
changing reg in insn 72
changing reg in insn 9
changing reg in insn 10
changing reg in insn 18
changing reg in insn 19
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 25
changing reg in insn 27
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 38
changing reg in insn 33
changing reg in insn 39
changing reg in insn 34
changing reg in insn 40
changing reg in insn 36
changing reg in insn 37
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 58
changing reg in insn 59
changing reg in insn 63
changing reg in insn 64
changing reg in insn 70
changing reg in insn 71
changing reg in insn 75
changing reg in insn 76
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
deleting insn with uid = 26.
deleting insn with uid = 30.
deleting insn with uid = 37.
deleting insn with uid = 38.
deleting insn with uid = 39.
deleting insn with uid = 42.
deleting insn with uid = 58.
starting the processing of deferred insns
ending the processing of deferred insns


dir_tester_add_file

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 36 [r8]
;;  ref usage 	r0={24d,19u} r1={11d,4u} r2={10d,3u} r4={11d,4u} r5={15d,8u} r6={1d,30u} r7={1d,18u} r8={7d} r9={7d} r10={7d} r11={7d} r12={7d} r13={7d} r14={7d} r15={7d} r17={11d,4u} r18={7d} r19={1d,1u} r20={8d} r21={8d} r22={8d} r23={8d} r24={8d} r25={8d} r26={8d} r27={8d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={9d,1u} r37={8d} r38={7d} r39={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} 
;;    total ref usage 615{523d,92u,0e} in 61{54 regular + 7 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 87
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])
        (reg:DI 5 di [ self ])) "tester/dir_tester.c":39:40 80 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 type+0 S4 A32])
        (reg:SI 4 si [ type ])) "tester/dir_tester.c":39:40 81 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 name+0 S8 A64])
        (reg:DI 1 dx [ name ])) "tester/dir_tester.c":39:40 80 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 success+0 S4 A32])
        (reg:SI 2 cx [ success ])) "tester/dir_tester.c":39:40 81 {*movsi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg/f:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":40:11 80 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 0 ax [orig:82 _1 ] [82])
        (mem:SI (plus:DI (reg/f:DI 0 ax [87])
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])) "tester/dir_tester.c":40:11 81 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:82 _1 ] [82])
            (const_int 0 [0]))) "tester/dir_tester.c":40:6 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 12 11 17 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 98)
            (pc))) "tester/dir_tester.c":40:6 891 {*jcc}
     (nil)
 -> 98)
;;  succ:       10 tester/dir_tester.c:41:5
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 83 84 88 89 90 91 92 93 94 95 96
(note 17 12 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 3 (set (reg:DI 0 ax [88])
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f916da57bd0 *.LC6>)) "tester/dir_tester.c":42:3 80 {*movdi_internal}
     (nil))
(insn 19 18 20 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "tester/dir_tester.c":42:3 80 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f916da57bd0 *.LC6>)
        (nil)))
(insn 20 19 21 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":42:3 83 {*movqi_internal}
     (nil))
(call_insn 21 20 22 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":42:3 909 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 22 21 23 3 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":43:17 80 {*movdi_internal}
     (nil))
(insn 23 22 24 3 (set (reg/f:DI 0 ax [orig:83 _2 ] [83])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [89])
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":43:17 80 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 1 dx [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 name+0 S8 A64])) "tester/dir_tester.c":43:17 80 {*movdi_internal}
     (nil))
(insn 25 24 27 3 (set (reg:SI 2 cx [91])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 type+0 S4 A32])) "tester/dir_tester.c":43:17 81 {*movsi_internal}
     (nil))
(insn 27 25 28 3 (set (reg:SI 4 si)
        (reg:SI 2 cx [91])) "tester/dir_tester.c":43:17 81 {*movsi_internal}
     (nil))
(insn 28 27 29 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:83 _2 ] [83])) "tester/dir_tester.c":43:17 80 {*movdi_internal}
     (nil))
(call_insn 29 28 31 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_add_file") [flags 0x41]  <function_decl 0x7f916dd41b00 dir_add_file>) [0 dir_add_file S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":43:17 909 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 31 29 32 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 result+0 S4 A32])
        (reg:SI 0 ax [92])) "tester/dir_tester.c":43:17 81 {*movsi_internal}
     (nil))
(insn 32 31 33 3 (set (reg:SI 1 dx [93])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 result+0 S4 A32])) "tester/dir_tester.c":44:8 81 {*movsi_internal}
     (nil))
(insn 33 32 34 3 (set (reg:SI 4 si [94])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 success+0 S4 A32])) "tester/dir_tester.c":44:8 81 {*movsi_internal}
     (nil))
(insn 34 33 35 3 (set (reg:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":44:8 80 {*movdi_internal}
     (nil))
(insn 35 34 36 3 (set (reg:DI 36 r8)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f916da57c60 *.LC7>)) "tester/dir_tester.c":44:8 80 {*movdi_internal}
     (nil))
(insn 36 35 40 3 (set (reg:DI 2 cx [96])
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f916da57cf0 *.LC8>)) "tester/dir_tester.c":44:8 80 {*movdi_internal}
     (nil))
(insn 40 36 41 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [95])) "tester/dir_tester.c":44:8 80 {*movdi_internal}
     (nil))
(call_insn 41 40 43 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_success") [flags 0x3]  <function_decl 0x7f916da16c00 check_success>) [0 check_success S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":44:8 909 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))
(insn 43 41 44 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:84 _3 ] [84])
            (const_int 0 [0]))) "tester/dir_tester.c":44:6 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 44 43 49 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 103)
            (pc))) "tester/dir_tester.c":44:6 891 {*jcc}
     (nil)
 -> 103)
;;  succ:       11 tester/dir_tester.c:45:5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 85 97 98 99 100
(note 49 44 50 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 4 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":46:15 80 {*movdi_internal}
     (nil))
(insn 51 50 52 4 (set (mem:SI (plus:DI (reg/f:DI 0 ax [97])
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])
        (const_int 1 [0x1])) "tester/dir_tester.c":46:15 81 {*movsi_internal}
     (nil))
(insn 52 51 53 4 (set (reg/f:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":47:41 80 {*movdi_internal}
     (nil))
(insn 53 52 54 4 (set (reg/f:DI 0 ax [orig:85 _4 ] [85])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [98])
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":47:41 80 {*movdi_internal}
     (nil))
(insn 54 53 55 4 (set (reg:DI 1 dx [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 name+0 S8 A64])) "tester/dir_tester.c":47:23 80 {*movdi_internal}
     (nil))
(insn 55 54 56 4 (set (reg:DI 4 si)
        (reg:DI 1 dx [99])) "tester/dir_tester.c":47:23 80 {*movdi_internal}
     (nil))
(insn 56 55 57 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:85 _4 ] [85])) "tester/dir_tester.c":47:23 80 {*movdi_internal}
     (nil))
(call_insn 57 56 59 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_find_node") [flags 0x41]  <function_decl 0x7f916dd41a00 dir_find_node>) [0 dir_find_node S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":47:23 909 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 59 57 60 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])
        (reg:DI 0 ax [100])) "tester/dir_tester.c":47:23 80 {*movdi_internal}
     (nil))
(insn 60 59 61 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])
            (const_int 0 [0]))) "tester/dir_tester.c":48:6 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 61 60 62 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) "tester/dir_tester.c":48:6 891 {*jcc}
     (nil)
 -> 68)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 101
(note 62 61 63 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 5 (set (reg:DI 0 ax [101])
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f916da57d80 *.LC9>)) "tester/dir_tester.c":49:5 80 {*movdi_internal}
     (nil))
(insn 64 63 65 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [101])) "tester/dir_tester.c":49:5 80 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f916da57d80 *.LC9>)
        (nil)))
(call_insn 65 64 91 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":49:5 909 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 91 65 92 5 (set (pc)
        (label_ref 89)) "tester/dir_tester.c":50:5 892 {jump}
     (nil)
 -> 89)
;;  succ:       9 [always]  tester/dir_tester.c:50:5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 92 91 68)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 86 102
(code_label 68 92 69 6 17 (nil) [1 uses])
(note 69 68 70 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 71 6 (set (reg/f:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])) "tester/dir_tester.c":52:11 80 {*movdi_internal}
     (nil))
(insn 71 70 72 6 (set (reg:SI 0 ax [orig:86 _5 ] [86])
        (mem:SI (plus:DI (reg/f:DI 0 ax [102])
                (const_int 32 [0x20])) [2 node_18->is_dir+0 S4 A64])) "tester/dir_tester.c":52:11 81 {*movsi_internal}
     (nil))
(insn 72 71 73 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:86 _5 ] [86])
            (const_int 0 [0]))) "tester/dir_tester.c":52:6 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 73 72 74 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 80)
            (pc))) "tester/dir_tester.c":52:6 891 {*jcc}
     (nil)
 -> 80)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 103
(note 74 73 75 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 7 (set (reg:DI 0 ax [103])
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f916da57e10 *.LC10>)) "tester/dir_tester.c":53:5 80 {*movdi_internal}
     (nil))
(insn 76 75 77 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [103])) "tester/dir_tester.c":53:5 80 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f916da57e10 *.LC10>)
        (nil)))
(call_insn 77 76 93 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":53:5 909 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 93 77 94 7 (set (pc)
        (label_ref 89)) "tester/dir_tester.c":54:5 892 {jump}
     (nil)
 -> 89)
;;  succ:       9 [always]  tester/dir_tester.c:54:5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 94 93 80)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 10, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 104 105
(code_label 80 94 81 8 18 (nil) [1 uses])
(note 81 80 82 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 8 (set (reg/f:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":56:15 80 {*movdi_internal}
     (nil))
(insn 83 82 84 8 (set (mem:SI (plus:DI (reg/f:DI 0 ax [104])
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])
        (const_int 0 [0])) "tester/dir_tester.c":56:15 81 {*movsi_internal}
     (nil))
(insn 84 83 85 8 (set (reg:DI 0 ax [105])
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)) "tester/dir_tester.c":57:3 80 {*movdi_internal}
     (nil))
(insn 85 84 86 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [105])) "tester/dir_tester.c":57:3 80 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)
        (nil)))
(call_insn 86 85 95 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":57:3 909 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 95 86 96 8 (set (pc)
        (label_ref 89)) 892 {jump}
     (nil)
 -> 89)
;;  succ:       9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 96 95 98)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 8, next block 11, flags: (RTL, MODIFIED)
;;  pred:       2 tester/dir_tester.c:41:5
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 98 96 97 10 19 (nil) [1 uses])
(note 97 98 99 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 99 97 100 10 (const_int 0 [0]) "tester/dir_tester.c":41:5 928 {nop}
     (nil))
(jump_insn 100 99 101 10 (set (pc)
        (label_ref 89)) 892 {jump}
     (nil)
 -> 89)
;;  succ:       9 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 101 100 103)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 9, flags: (RTL, MODIFIED)
;;  pred:       3 tester/dir_tester.c:45:5
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 103 101 102 11 20 (nil) [1 uses])
(note 102 103 104 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 104 102 89 11 (const_int 0 [0]) "tester/dir_tester.c":45:5 928 {nop}
     (nil))
;;  succ:       9 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 11, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7 [always]  tester/dir_tester.c:54:5
;;              8
;;              11 [always]  (FALLTHRU)
;;              5 [always]  tester/dir_tester.c:50:5
;;              10 [always] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 89 104 90 9 13 (nil) [4 uses])
(note 90 89 105 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 105 90 0 NOTE_INSN_DELETED)

;; Function dir_tester_add_subdir (dir_tester_add_subdir, funcdef_no=10, decl_uid=2060, cgraph_uid=11, symbol_order=10)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=48, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 32:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 33:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 56:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 60:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 72:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 81:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3 4 5
EBB 6 7
EBB 8
EBB 10
EBB 11
EBB 9

********** Pseudo live ranges #1: **********

  BB 9
  BB 10
   Insn 97: point = 0, n_alt = -1
   Insn 96: point = 0, n_alt = -1
  BB 5
   Insn 88: point = 0, n_alt = -1
   Insn 62: point = 0, n_alt = 0
   Insn 61: point = 0, n_alt = -2
   Insn 60: point = 1, n_alt = 4
  BB 11
   Insn 101: point = 2, n_alt = -1
  BB 8
   Insn 92: point = 2, n_alt = -1
   Insn 83: point = 2, n_alt = 0
   Insn 82: point = 2, n_alt = -2
   Insn 81: point = 3, n_alt = 4
   Insn 80: point = 4, n_alt = 1
   Insn 79: point = 5, n_alt = 3
  BB 7
   Insn 90: point = 6, n_alt = -1
   Insn 74: point = 6, n_alt = 0
   Insn 73: point = 6, n_alt = -2
   Insn 72: point = 7, n_alt = 4
  BB 6
   Insn 70: point = 8, n_alt = -1
   Insn 69: point = 8, n_alt = 0
   Insn 68: point = 9, n_alt = 0
   Insn 67: point = 11, n_alt = 3
  BB 4
   Insn 58: point = 12, n_alt = -1
   Insn 57: point = 12, n_alt = 1
   Insn 56: point = 12, n_alt = 5
   Insn 55: point = 13, n_alt = -2
   Insn 54: point = 14, n_alt = 0
   Insn 53: point = 14, n_alt = -2
   Insn 52: point = 15, n_alt = -2
   Insn 51: point = 16, n_alt = 3
   Insn 50: point = 17, n_alt = 3
   Insn 49: point = 19, n_alt = 3
   Insn 48: point = 20, n_alt = 1
   Insn 47: point = 21, n_alt = 3
  BB 3
   Insn 41: point = 22, n_alt = -1
   Insn 40: point = 22, n_alt = 0
   Insn 39: point = 23, n_alt = -2
   Insn 38: point = 24, n_alt = 0
   Insn 37: point = 24, n_alt = -2
   Insn 36: point = 25, n_alt = -2
   Insn 35: point = 26, n_alt = -2
   Insn 34: point = 27, n_alt = -2
   Insn 33: point = 28, n_alt = 4
   Insn 32: point = 29, n_alt = 4
   Insn 31: point = 29, n_alt = 3
   Insn 30: point = 30, n_alt = 0
   Insn 29: point = 31, n_alt = 0
   Insn 28: point = 32, n_alt = 1
   Insn 27: point = 33, n_alt = -2
   Insn 26: point = 34, n_alt = 0
   Insn 25: point = 34, n_alt = -2
   Insn 24: point = 35, n_alt = -2
   Insn 23: point = 36, n_alt = 3
   Insn 22: point = 37, n_alt = 3
   Insn 21: point = 39, n_alt = 3
   Insn 20: point = 40, n_alt = 0
   Insn 19: point = 40, n_alt = 3
   Insn 18: point = 40, n_alt = -2
   Insn 17: point = 41, n_alt = 4
  BB 2
   Insn 11: point = 42, n_alt = -1
   Insn 10: point = 42, n_alt = 0
   Insn 9: point = 43, n_alt = 0
   Insn 8: point = 45, n_alt = 3
   Insn 4: point = 46, n_alt = 1
   Insn 3: point = 46, n_alt = 5
   Insn 2: point = 46, n_alt = 5
 r82: [42..43]
 r83: [34..37]
 r84: [22..23]
 r85: [14..17]
 r86: [8..9]
 r87: [44..45]
 r88: [40..41]
 r89: [38..39]
 r90: [35..36]
 r91: [32..33]
 r92: [26..31]
 r93: [25..30]
 r94: [24..29]
 r95: [27..28]
 r96: [20..21]
 r97: [18..19]
 r98: [15..16]
 r99: [12..13]
 r100: [0..1]
 r101: [10..11]
 r102: [6..7]
 r103: [4..5]
 r104: [2..3]
Compressing live ranges: from 46 to 36 - 78%
Ranges after the compression:
 r82: [32..33]
 r83: [26..27]
 r84: [20..21]
 r85: [14..15]
 r86: [8..9]
 r87: [34..35]
 r88: [30..31]
 r89: [28..29]
 r90: [26..27]
 r91: [24..25]
 r92: [22..23]
 r93: [22..23]
 r94: [22..23]
 r95: [22..23]
 r96: [18..19]
 r97: [16..17]
 r98: [14..15]
 r99: [12..13]
 r100: [0..1]
 r101: [10..11]
 r102: [6..7]
 r103: [4..5]
 r104: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=48, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 10
changing reg in insn 22
changing reg in insn 25
changing reg in insn 39
changing reg in insn 40
changing reg in insn 50
changing reg in insn 53
changing reg in insn 68
changing reg in insn 69
changing reg in insn 8
changing reg in insn 9
changing reg in insn 17
changing reg in insn 18
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 35
changing reg in insn 30
changing reg in insn 36
changing reg in insn 31
changing reg in insn 37
changing reg in insn 33
changing reg in insn 34
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 55
changing reg in insn 56
changing reg in insn 60
changing reg in insn 61
changing reg in insn 67
changing reg in insn 68
changing reg in insn 72
changing reg in insn 73
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
deleting insn with uid = 27.
deleting insn with uid = 34.
deleting insn with uid = 35.
deleting insn with uid = 36.
deleting insn with uid = 39.
deleting insn with uid = 55.
starting the processing of deferred insns
ending the processing of deferred insns


dir_tester_add_subdir

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 36 [r8]
;;  ref usage 	r0={24d,19u} r1={11d,4u} r2={9d,1u} r4={11d,4u} r5={15d,8u} r6={1d,28u} r7={1d,18u} r8={7d} r9={7d} r10={7d} r11={7d} r12={7d} r13={7d} r14={7d} r15={7d} r17={11d,4u} r18={7d} r19={1d,1u} r20={8d} r21={8d} r22={8d} r23={8d} r24={8d} r25={8d} r26={8d} r27={8d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={9d,1u} r37={8d} r38={7d} r39={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} 
;;    total ref usage 610{522d,88u,0e} in 59{52 regular + 7 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 87
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])
        (reg:DI 5 di [ self ])) "tester/dir_tester.c":59:79 80 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])
        (reg:DI 4 si [ name ])) "tester/dir_tester.c":59:79 80 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [2 success+0 S4 A32])
        (reg:SI 1 dx [ success ])) "tester/dir_tester.c":59:79 81 {*movsi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":60:11 80 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [orig:82 _1 ] [82])
        (mem:SI (plus:DI (reg/f:DI 0 ax [87])
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])) "tester/dir_tester.c":60:11 81 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:82 _1 ] [82])
            (const_int 0 [0]))) "tester/dir_tester.c":60:6 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 11 10 16 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 95)
            (pc))) "tester/dir_tester.c":60:6 891 {*jcc}
     (nil)
 -> 95)
;;  succ:       10 tester/dir_tester.c:61:5
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 83 84 88 89 90 91 92 93 94 95
(note 16 11 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:DI 0 ax [88])
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7f916da637e0 *.LC12>)) "tester/dir_tester.c":62:3 80 {*movdi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [88])) "tester/dir_tester.c":62:3 80 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7f916da637e0 *.LC12>)
        (nil)))
(insn 19 18 20 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":62:3 83 {*movqi_internal}
     (nil))
(call_insn 20 19 21 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":62:3 909 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 21 20 22 3 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":63:17 80 {*movdi_internal}
     (nil))
(insn 22 21 23 3 (set (reg/f:DI 0 ax [orig:83 _2 ] [83])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [89])
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":63:17 80 {*movdi_internal}
     (nil))
(insn 23 22 24 3 (set (reg:DI 1 dx [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])) "tester/dir_tester.c":63:17 80 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 4 si)
        (reg:DI 1 dx [90])) "tester/dir_tester.c":63:17 80 {*movdi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:83 _2 ] [83])) "tester/dir_tester.c":63:17 80 {*movdi_internal}
     (nil))
(call_insn 26 25 28 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_add_subdir") [flags 0x41]  <function_decl 0x7f916dd41c00 dir_add_subdir>) [0 dir_add_subdir S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":63:17 909 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 28 26 29 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 result+0 S4 A32])
        (reg:SI 0 ax [91])) "tester/dir_tester.c":63:17 81 {*movsi_internal}
     (nil))
(insn 29 28 30 3 (set (reg:SI 1 dx [92])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 result+0 S4 A32])) "tester/dir_tester.c":64:8 81 {*movsi_internal}
     (nil))
(insn 30 29 31 3 (set (reg:SI 4 si [93])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [2 success+0 S4 A32])) "tester/dir_tester.c":64:8 81 {*movsi_internal}
     (nil))
(insn 31 30 32 3 (set (reg:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":64:8 80 {*movdi_internal}
     (nil))
(insn 32 31 33 3 (set (reg:DI 36 r8)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f916da57c60 *.LC7>)) "tester/dir_tester.c":64:8 80 {*movdi_internal}
     (nil))
(insn 33 32 37 3 (set (reg:DI 2 cx [95])
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f916da57cf0 *.LC8>)) "tester/dir_tester.c":64:8 80 {*movdi_internal}
     (nil))
(insn 37 33 38 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [94])) "tester/dir_tester.c":64:8 80 {*movdi_internal}
     (nil))
(call_insn 38 37 40 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_success") [flags 0x3]  <function_decl 0x7f916da16c00 check_success>) [0 check_success S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":64:8 909 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))
(insn 40 38 41 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:84 _3 ] [84])
            (const_int 0 [0]))) "tester/dir_tester.c":64:6 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 41 40 46 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 100)
            (pc))) "tester/dir_tester.c":64:6 891 {*jcc}
     (nil)
 -> 100)
;;  succ:       11 tester/dir_tester.c:65:5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 85 96 97 98 99
(note 46 41 47 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 4 (set (reg/f:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":66:15 80 {*movdi_internal}
     (nil))
(insn 48 47 49 4 (set (mem:SI (plus:DI (reg/f:DI 0 ax [96])
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])
        (const_int 1 [0x1])) "tester/dir_tester.c":66:15 81 {*movsi_internal}
     (nil))
(insn 49 48 50 4 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":67:41 80 {*movdi_internal}
     (nil))
(insn 50 49 51 4 (set (reg/f:DI 0 ax [orig:85 _4 ] [85])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [97])
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":67:41 80 {*movdi_internal}
     (nil))
(insn 51 50 52 4 (set (reg:DI 1 dx [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])) "tester/dir_tester.c":67:23 80 {*movdi_internal}
     (nil))
(insn 52 51 53 4 (set (reg:DI 4 si)
        (reg:DI 1 dx [98])) "tester/dir_tester.c":67:23 80 {*movdi_internal}
     (nil))
(insn 53 52 54 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:85 _4 ] [85])) "tester/dir_tester.c":67:23 80 {*movdi_internal}
     (nil))
(call_insn 54 53 56 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_find_node") [flags 0x41]  <function_decl 0x7f916dd41a00 dir_find_node>) [0 dir_find_node S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":67:23 909 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 56 54 57 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])
        (reg:DI 0 ax [99])) "tester/dir_tester.c":67:23 80 {*movdi_internal}
     (nil))
(insn 57 56 58 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])
            (const_int 0 [0]))) "tester/dir_tester.c":68:6 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 58 57 59 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 65)
            (pc))) "tester/dir_tester.c":68:6 891 {*jcc}
     (nil)
 -> 65)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 100
(note 59 58 60 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 5 (set (reg:DI 0 ax [100])
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f916da63870 *.LC13>)) "tester/dir_tester.c":69:5 80 {*movdi_internal}
     (nil))
(insn 61 60 62 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [100])) "tester/dir_tester.c":69:5 80 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f916da63870 *.LC13>)
        (nil)))
(call_insn 62 61 88 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":69:5 909 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 88 62 89 5 (set (pc)
        (label_ref 86)) "tester/dir_tester.c":70:5 892 {jump}
     (nil)
 -> 86)
;;  succ:       9 [always]  tester/dir_tester.c:70:5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 89 88 65)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 86 101
(code_label 65 89 66 6 25 (nil) [1 uses])
(note 66 65 67 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 6 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])) "tester/dir_tester.c":72:12 80 {*movdi_internal}
     (nil))
(insn 68 67 69 6 (set (reg:SI 0 ax [orig:86 _5 ] [86])
        (mem:SI (plus:DI (reg/f:DI 0 ax [101])
                (const_int 32 [0x20])) [2 node_17->is_dir+0 S4 A64])) "tester/dir_tester.c":72:12 81 {*movsi_internal}
     (nil))
(insn 69 68 70 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:86 _5 ] [86])
            (const_int 0 [0]))) "tester/dir_tester.c":72:6 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 70 69 71 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 77)
            (pc))) "tester/dir_tester.c":72:6 891 {*jcc}
     (nil)
 -> 77)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 102
(note 71 70 72 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 7 (set (reg:DI 0 ax [102])
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f916da63900 *.LC14>)) "tester/dir_tester.c":73:5 80 {*movdi_internal}
     (nil))
(insn 73 72 74 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [102])) "tester/dir_tester.c":73:5 80 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f916da63900 *.LC14>)
        (nil)))
(call_insn 74 73 90 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":73:5 909 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 90 74 91 7 (set (pc)
        (label_ref 86)) "tester/dir_tester.c":74:5 892 {jump}
     (nil)
 -> 86)
;;  succ:       9 [always]  tester/dir_tester.c:74:5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 91 90 77)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 10, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 103 104
(code_label 77 91 78 8 26 (nil) [1 uses])
(note 78 77 79 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 8 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":76:15 80 {*movdi_internal}
     (nil))
(insn 80 79 81 8 (set (mem:SI (plus:DI (reg/f:DI 0 ax [103])
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])
        (const_int 0 [0])) "tester/dir_tester.c":76:15 81 {*movsi_internal}
     (nil))
(insn 81 80 82 8 (set (reg:DI 0 ax [104])
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)) "tester/dir_tester.c":77:3 80 {*movdi_internal}
     (nil))
(insn 82 81 83 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [104])) "tester/dir_tester.c":77:3 80 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)
        (nil)))
(call_insn 83 82 92 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":77:3 909 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 92 83 93 8 (set (pc)
        (label_ref 86)) 892 {jump}
     (nil)
 -> 86)
;;  succ:       9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 93 92 95)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 8, next block 11, flags: (RTL, MODIFIED)
;;  pred:       2 tester/dir_tester.c:61:5
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 95 93 94 10 27 (nil) [1 uses])
(note 94 95 96 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 96 94 97 10 (const_int 0 [0]) "tester/dir_tester.c":61:5 928 {nop}
     (nil))
(jump_insn 97 96 98 10 (set (pc)
        (label_ref 86)) 892 {jump}
     (nil)
 -> 86)
;;  succ:       9 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 98 97 100)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 9, flags: (RTL, MODIFIED)
;;  pred:       3 tester/dir_tester.c:65:5
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 100 98 99 11 28 (nil) [1 uses])
(note 99 100 101 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 101 99 86 11 (const_int 0 [0]) "tester/dir_tester.c":65:5 928 {nop}
     (nil))
;;  succ:       9 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 11, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7 [always]  tester/dir_tester.c:74:5
;;              8
;;              11 [always]  (FALLTHRU)
;;              5 [always]  tester/dir_tester.c:70:5
;;              10 [always] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 86 101 87 9 21 (nil) [4 uses])
(note 87 86 102 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 102 87 0 NOTE_INSN_DELETED)

;; Function dir_tester_delete (dir_tester_delete, funcdef_no=11, decl_uid=2064, cgraph_uid=12, symbol_order=11)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=48, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 24:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 45:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 51:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 58:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3 4
EBB 5
EBB 7
EBB 6

********** Pseudo live ranges #1: **********

  BB 6
  BB 5
   Insn 67: point = 0, n_alt = -1
   Insn 60: point = 0, n_alt = 0
   Insn 59: point = 0, n_alt = -2
   Insn 58: point = 1, n_alt = 4
  BB 7
   Insn 71: point = 2, n_alt = -1
  BB 4
   Insn 65: point = 2, n_alt = -1
   Insn 53: point = 2, n_alt = 0
   Insn 52: point = 2, n_alt = -2
   Insn 51: point = 3, n_alt = 4
   Insn 50: point = 4, n_alt = 1
   Insn 49: point = 5, n_alt = 3
  BB 3
   Insn 47: point = 6, n_alt = -1
   Insn 46: point = 6, n_alt = 1
   Insn 45: point = 6, n_alt = 5
   Insn 44: point = 7, n_alt = -2
   Insn 43: point = 8, n_alt = 0
   Insn 42: point = 8, n_alt = -2
   Insn 41: point = 9, n_alt = -2
   Insn 40: point = 10, n_alt = 3
   Insn 39: point = 11, n_alt = 3
   Insn 38: point = 13, n_alt = 3
  BB 2
   Insn 32: point = 14, n_alt = -1
   Insn 31: point = 14, n_alt = 0
   Insn 30: point = 15, n_alt = -2
   Insn 29: point = 16, n_alt = 0
   Insn 28: point = 16, n_alt = -2
   Insn 27: point = 17, n_alt = -2
   Insn 26: point = 18, n_alt = -2
   Insn 25: point = 19, n_alt = -2
   Insn 24: point = 20, n_alt = 4
   Insn 23: point = 21, n_alt = 4
   Insn 22: point = 21, n_alt = 3
   Insn 21: point = 22, n_alt = 0
   Insn 20: point = 23, n_alt = 0
   Insn 19: point = 24, n_alt = 1
   Insn 18: point = 25, n_alt = -2
   Insn 17: point = 26, n_alt = 0
   Insn 16: point = 26, n_alt = -2
   Insn 15: point = 27, n_alt = -2
   Insn 14: point = 28, n_alt = 3
   Insn 13: point = 29, n_alt = 3
   Insn 12: point = 31, n_alt = 3
   Insn 11: point = 32, n_alt = 0
   Insn 10: point = 32, n_alt = 3
   Insn 9: point = 32, n_alt = -2
   Insn 8: point = 33, n_alt = 4
   Insn 4: point = 34, n_alt = 1
   Insn 3: point = 34, n_alt = 5
   Insn 2: point = 34, n_alt = 5
 r82: [26..29]
 r83: [14..15]
 r84: [8..11]
 r85: [32..33]
 r86: [30..31]
 r87: [27..28]
 r88: [24..25]
 r89: [18..23]
 r90: [17..22]
 r91: [16..21]
 r92: [19..20]
 r93: [12..13]
 r94: [9..10]
 r95: [6..7]
 r96: [4..5]
 r97: [2..3]
 r98: [0..1]
Compressing live ranges: from 34 to 24 - 70%
Ranges after the compression:
 r82: [18..19]
 r83: [12..13]
 r84: [8..9]
 r85: [22..23]
 r86: [20..21]
 r87: [18..19]
 r88: [16..17]
 r89: [14..15]
 r90: [14..15]
 r91: [14..15]
 r92: [14..15]
 r93: [10..11]
 r94: [8..9]
 r95: [6..7]
 r96: [4..5]
 r97: [2..3]
 r98: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=48, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 13
changing reg in insn 16
changing reg in insn 30
changing reg in insn 31
changing reg in insn 39
changing reg in insn 42
changing reg in insn 8
changing reg in insn 9
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 26
changing reg in insn 21
changing reg in insn 27
changing reg in insn 22
changing reg in insn 28
changing reg in insn 24
changing reg in insn 25
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 44
changing reg in insn 45
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 58
changing reg in insn 59
deleting insn with uid = 18.
deleting insn with uid = 25.
deleting insn with uid = 26.
deleting insn with uid = 27.
deleting insn with uid = 30.
deleting insn with uid = 44.
starting the processing of deferred insns
ending the processing of deferred insns


dir_tester_delete

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 36 [r8]
;;  ref usage 	r0={17d,13u} r1={10d,4u} r2={8d,1u} r4={10d,4u} r5={13d,7u} r6={1d,21u} r7={1d,13u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={8d,2u} r18={6d} r19={1d,1u} r20={7d} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={8d,1u} r37={7d} r38={6d} r39={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} 
;;    total ref usage 513{446d,67u,0e} in 43{37 regular + 6 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 85 86 87 88 89 90 91 92
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])
        (reg:DI 5 di [ self ])) "tester/dir_tester.c":80:38 80 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])
        (reg:DI 4 si [ name ])) "tester/dir_tester.c":80:38 80 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [2 success+0 S4 A32])
        (reg:SI 1 dx [ success ])) "tester/dir_tester.c":80:38 81 {*movsi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 0 ax [85])
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f916da6b240 *.LC15>)) "tester/dir_tester.c":81:3 80 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [85])) "tester/dir_tester.c":81:3 80 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f916da6b240 *.LC15>)
        (nil)))
(insn 10 9 11 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":81:3 83 {*movqi_internal}
     (nil))
(call_insn 11 10 12 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":81:3 909 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [86])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":82:17 80 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg/f:DI 0 ax [orig:82 _1 ] [82])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [86])
                (const_int 24 [0x18])) [4 self_7(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":82:17 80 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 1 dx [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])) "tester/dir_tester.c":82:17 80 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [87])) "tester/dir_tester.c":82:17 80 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:82 _1 ] [82])) "tester/dir_tester.c":82:17 80 {*movdi_internal}
     (nil))
(call_insn 17 16 19 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_delete") [flags 0x41]  <function_decl 0x7f916dd41d00 dir_delete>) [0 dir_delete S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":82:17 909 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 19 17 20 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 result+0 S4 A32])
        (reg:SI 0 ax [88])) "tester/dir_tester.c":82:17 81 {*movsi_internal}
     (nil))
(insn 20 19 21 2 (set (reg:SI 1 dx [89])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 result+0 S4 A32])) "tester/dir_tester.c":83:8 81 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:SI 4 si [90])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [2 success+0 S4 A32])) "tester/dir_tester.c":83:8 81 {*movsi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":83:8 80 {*movdi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:DI 36 r8)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f916da57c60 *.LC7>)) "tester/dir_tester.c":83:8 80 {*movdi_internal}
     (nil))
(insn 24 23 28 2 (set (reg:DI 2 cx [92])
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f916da57cf0 *.LC8>)) "tester/dir_tester.c":83:8 80 {*movdi_internal}
     (nil))
(insn 28 24 29 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [91])) "tester/dir_tester.c":83:8 80 {*movdi_internal}
     (nil))
(call_insn 29 28 31 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_success") [flags 0x3]  <function_decl 0x7f916da16c00 check_success>) [0 check_success S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":83:8 909 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))
(insn 31 29 32 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:83 _2 ] [83])
            (const_int 0 [0]))) "tester/dir_tester.c":83:6 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 32 31 37 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 70)
            (pc))) "tester/dir_tester.c":83:6 891 {*jcc}
     (nil)
 -> 70)
;;  succ:       7 tester/dir_tester.c:84:5
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 84 93 94 95
(note 37 32 38 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 3 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":85:41 80 {*movdi_internal}
     (nil))
(insn 39 38 40 3 (set (reg/f:DI 0 ax [orig:84 _3 ] [84])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [93])
                (const_int 24 [0x18])) [4 self_7(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":85:41 80 {*movdi_internal}
     (nil))
(insn 40 39 41 3 (set (reg:DI 1 dx [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])) "tester/dir_tester.c":85:23 80 {*movdi_internal}
     (nil))
(insn 41 40 42 3 (set (reg:DI 4 si)
        (reg:DI 1 dx [94])) "tester/dir_tester.c":85:23 80 {*movdi_internal}
     (nil))
(insn 42 41 43 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:84 _3 ] [84])) "tester/dir_tester.c":85:23 80 {*movdi_internal}
     (nil))
(call_insn 43 42 45 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_find_node") [flags 0x41]  <function_decl 0x7f916dd41a00 dir_find_node>) [0 dir_find_node S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":85:23 909 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 45 43 46 3 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])
        (reg:DI 0 ax [95])) "tester/dir_tester.c":85:23 80 {*movdi_internal}
     (nil))
(insn 46 45 47 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])
            (const_int 0 [0]))) "tester/dir_tester.c":86:6 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 47 46 48 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 56)
            (pc))) "tester/dir_tester.c":86:6 891 {*jcc}
     (nil)
 -> 56)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 96 97
(note 48 47 49 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 4 (set (reg/f:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":87:17 80 {*movdi_internal}
     (nil))
(insn 50 49 51 4 (set (mem:SI (plus:DI (reg/f:DI 0 ax [96])
                (const_int 32 [0x20])) [2 self_7(D)->error+0 S4 A64])
        (const_int 1 [0x1])) "tester/dir_tester.c":87:17 81 {*movsi_internal}
     (nil))
(insn 51 50 52 4 (set (reg:DI 0 ax [97])
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f916da6b2d0 *.LC16>)) "tester/dir_tester.c":88:5 80 {*movdi_internal}
     (nil))
(insn 52 51 53 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [97])) "tester/dir_tester.c":88:5 80 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f916da6b2d0 *.LC16>)
        (nil)))
(call_insn 53 52 65 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":88:5 909 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 65 53 66 4 (set (pc)
        (label_ref 63)) "tester/dir_tester.c":89:5 892 {jump}
     (nil)
 -> 63)
;;  succ:       6 [always]  tester/dir_tester.c:89:5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 66 65 56)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 7, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 98
(code_label 56 66 57 5 32 (nil) [1 uses])
(note 57 56 58 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 5 (set (reg:DI 0 ax [98])
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)) "tester/dir_tester.c":91:3 80 {*movdi_internal}
     (nil))
(insn 59 58 60 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [98])) "tester/dir_tester.c":91:3 80 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)
        (nil)))
(call_insn 60 59 67 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":91:3 909 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 67 60 68 5 (set (pc)
        (label_ref 63)) 892 {jump}
     (nil)
 -> 63)
;;  succ:       6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 68 67 70)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 5, next block 6, flags: (RTL, MODIFIED)
;;  pred:       2 tester/dir_tester.c:84:5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 70 68 69 7 33 (nil) [1 uses])
(note 69 70 71 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 71 69 63 7 (const_int 0 [0]) "tester/dir_tester.c":84:5 928 {nop}
     (nil))
;;  succ:       6 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 [always]  tester/dir_tester.c:89:5
;;              7 [always]  (FALLTHRU)
;;              5
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 63 71 64 6 29 (nil) [2 uses])
(note 64 63 72 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 72 64 0 NOTE_INSN_DELETED)

;; Function dir_tester_size (dir_tester_size, funcdef_no=12, decl_uid=2067, cgraph_uid=13, symbol_order=12)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 31:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
  BB 3
   Insn 38: point = 0, n_alt = -1
   Insn 26: point = 0, n_alt = 0
   Insn 25: point = 0, n_alt = 3
   Insn 24: point = 0, n_alt = -2
   Insn 23: point = 1, n_alt = 4
   Insn 22: point = 2, n_alt = -2
   Insn 21: point = 3, n_alt = -2
   Insn 20: point = 4, n_alt = 0
   Insn 19: point = 5, n_alt = 0
   Insn 18: point = 7, n_alt = 3
   Insn 17: point = 9, n_alt = 3
  BB 4
   Insn 33: point = 10, n_alt = 0
   Insn 32: point = 10, n_alt = -2
   Insn 31: point = 11, n_alt = 4
  BB 2
   Insn 15: point = 12, n_alt = -1
   Insn 14: point = 12, n_alt = 0
   Insn 13: point = 13, n_alt = 0
   Insn 12: point = 15, n_alt = 3
   Insn 11: point = 17, n_alt = 3
   Insn 10: point = 18, n_alt = 0
   Insn 9: point = 18, n_alt = 3
   Insn 8: point = 18, n_alt = -2
   Insn 7: point = 19, n_alt = 4
   Insn 3: point = 20, n_alt = 1
   Insn 2: point = 20, n_alt = 5
 r82: [14..15]
 r83: [12..13]
 r84: [6..7]
 r85: [2..5]
 r86: [18..19]
 r87: [16..17]
 r88: [8..9]
 r89: [3..4]
 r90: [0..1]
 r91: [10..11]
Compressing live ranges: from 20 to 18 - 90%
Ranges after the compression:
 r82: [12..13]
 r83: [10..11]
 r84: [4..5]
 r85: [2..3]
 r86: [16..17]
 r87: [14..15]
 r88: [6..7]
 r89: [2..3]
 r90: [0..1]
 r91: [8..9]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 22
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 12
changing reg in insn 17
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 31
changing reg in insn 32
deleting insn with uid = 21.
starting the processing of deferred insns
ending the processing of deferred insns


dir_tester_size

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={15d,11u} r1={5d,1u} r2={4d} r4={5d,2u} r5={7d,4u} r6={1d,11u} r7={1d,8u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={4d,1u} r18={3d} r19={1d,1u} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={4d} r37={4d} r38={3d} r39={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} 
;;    total ref usage 275{236d,39u,0e} in 24{21 regular + 3 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 86 87
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])
        (reg:DI 5 di [ self ])) "tester/dir_tester.c":94:57 80 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 size+0 S4 A32])
        (reg:SI 4 si [ size ])) "tester/dir_tester.c":94:57 81 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 0 ax [86])
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f916da6b990 *.LC17>)) "tester/dir_tester.c":95:3 80 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [86])) "tester/dir_tester.c":95:3 80 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f916da6b990 *.LC17>)
        (nil)))
(insn 9 8 10 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":95:3 83 {*movqi_internal}
     (nil))
(call_insn 10 9 11 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":95:3 909 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":96:11 80 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [orig:82 _1 ] [82])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [87])
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":96:11 80 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 0 ax [orig:83 _2 ] [83])
        (mem:SI (reg/f:DI 0 ax [orig:82 _1 ] [82]) [2 _1->size+0 S4 A64])) "tester/dir_tester.c":96:22 81 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [2 size+0 S4 A32])
            (reg:SI 0 ax [orig:83 _2 ] [83]))) "tester/dir_tester.c":96:6 11 {*cmpsi_1}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) "tester/dir_tester.c":96:6 891 {*jcc}
     (nil)
 -> 29)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 84 85 88 89 90
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg/f:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":98:16 80 {*movdi_internal}
     (nil))
(insn 18 17 19 3 (set (reg/f:DI 0 ax [orig:84 _3 ] [84])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [88])
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":98:16 80 {*movdi_internal}
     (nil))
(insn 19 18 20 3 (set (reg:SI 0 ax [orig:85 _4 ] [85])
        (mem:SI (reg/f:DI 0 ax [orig:84 _3 ] [84]) [2 _3->size+0 S4 A64])) "tester/dir_tester.c":97:5 81 {*movsi_internal}
     (nil))
(insn 20 19 22 3 (set (reg:SI 1 dx [89])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 size+0 S4 A32])) "tester/dir_tester.c":97:5 81 {*movsi_internal}
     (nil))
(insn 22 20 23 3 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:85 _4 ] [85])) "tester/dir_tester.c":97:5 81 {*movsi_internal}
     (nil))
(insn 23 22 24 3 (set (reg:DI 0 ax [90])
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f916da6ba20 *.LC18>)) "tester/dir_tester.c":97:5 80 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [90])) "tester/dir_tester.c":97:5 80 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f916da6ba20 *.LC18>)
        (nil)))
(insn 25 24 26 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":97:5 83 {*movqi_internal}
     (nil))
(call_insn 26 25 38 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":97:5 909 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(jump_insn 38 26 39 3 (set (pc)
        (label_ref 36)) "tester/dir_tester.c":99:5 892 {jump}
     (nil)
 -> 36)
;;  succ:       5 [always]  tester/dir_tester.c:99:5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 39 38 29)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 91
(code_label 29 39 30 4 35 (nil) [1 uses])
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 4 (set (reg:DI 0 ax [91])
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)) "tester/dir_tester.c":101:3 80 {*movdi_internal}
     (nil))
(insn 32 31 33 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [91])) "tester/dir_tester.c":101:3 80 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)
        (nil)))
(call_insn 33 32 36 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":101:3 909 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [always]  tester/dir_tester.c:99:5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 36 33 37 5 34 (nil) [1 uses])
(note 37 36 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 40 37 0 NOTE_INSN_DELETED)

;; Function dir_tester_capacity (dir_tester_capacity, funcdef_no=13, decl_uid=2070, cgraph_uid=14, symbol_order=13)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 31:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
  BB 3
   Insn 38: point = 0, n_alt = -1
   Insn 26: point = 0, n_alt = 0
   Insn 25: point = 0, n_alt = 3
   Insn 24: point = 0, n_alt = -2
   Insn 23: point = 1, n_alt = 4
   Insn 22: point = 2, n_alt = -2
   Insn 21: point = 3, n_alt = -2
   Insn 20: point = 4, n_alt = 0
   Insn 19: point = 5, n_alt = 0
   Insn 18: point = 7, n_alt = 3
   Insn 17: point = 9, n_alt = 3
  BB 4
   Insn 33: point = 10, n_alt = 0
   Insn 32: point = 10, n_alt = -2
   Insn 31: point = 11, n_alt = 4
  BB 2
   Insn 15: point = 12, n_alt = -1
   Insn 14: point = 12, n_alt = 0
   Insn 13: point = 13, n_alt = 0
   Insn 12: point = 15, n_alt = 3
   Insn 11: point = 17, n_alt = 3
   Insn 10: point = 18, n_alt = 0
   Insn 9: point = 18, n_alt = 3
   Insn 8: point = 18, n_alt = -2
   Insn 7: point = 19, n_alt = 4
   Insn 3: point = 20, n_alt = 1
   Insn 2: point = 20, n_alt = 5
 r82: [14..15]
 r83: [12..13]
 r84: [6..7]
 r85: [2..5]
 r86: [18..19]
 r87: [16..17]
 r88: [8..9]
 r89: [3..4]
 r90: [0..1]
 r91: [10..11]
Compressing live ranges: from 20 to 18 - 90%
Ranges after the compression:
 r82: [12..13]
 r83: [10..11]
 r84: [4..5]
 r85: [2..3]
 r86: [16..17]
 r87: [14..15]
 r88: [6..7]
 r89: [2..3]
 r90: [0..1]
 r91: [8..9]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 22
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 12
changing reg in insn 17
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 31
changing reg in insn 32
deleting insn with uid = 21.
starting the processing of deferred insns
ending the processing of deferred insns


dir_tester_capacity

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={15d,11u} r1={5d,1u} r2={4d} r4={5d,2u} r5={7d,4u} r6={1d,11u} r7={1d,8u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={4d,1u} r18={3d} r19={1d,1u} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={4d} r37={4d} r38={3d} r39={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} 
;;    total ref usage 275{236d,39u,0e} in 24{21 regular + 3 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 86 87
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])
        (reg:DI 5 di [ self ])) "tester/dir_tester.c":104:65 80 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 capacity+0 S4 A32])
        (reg:SI 4 si [ capacity ])) "tester/dir_tester.c":104:65 81 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 0 ax [86])
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7f916da74000 *.LC19>)) "tester/dir_tester.c":105:3 80 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [86])) "tester/dir_tester.c":105:3 80 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7f916da74000 *.LC19>)
        (nil)))
(insn 9 8 10 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":105:3 83 {*movqi_internal}
     (nil))
(call_insn 10 9 11 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":105:3 909 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":106:11 80 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [orig:82 _1 ] [82])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [87])
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":106:11 80 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 0 ax [orig:83 _2 ] [83])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:82 _1 ] [82])
                (const_int 4 [0x4])) [2 _1->capacity+0 S4 A32])) "tester/dir_tester.c":106:22 81 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [2 capacity+0 S4 A32])
            (reg:SI 0 ax [orig:83 _2 ] [83]))) "tester/dir_tester.c":106:6 11 {*cmpsi_1}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) "tester/dir_tester.c":106:6 891 {*jcc}
     (nil)
 -> 29)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 84 85 88 89 90
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg/f:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":108:16 80 {*movdi_internal}
     (nil))
(insn 18 17 19 3 (set (reg/f:DI 0 ax [orig:84 _3 ] [84])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [88])
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":108:16 80 {*movdi_internal}
     (nil))
(insn 19 18 20 3 (set (reg:SI 0 ax [orig:85 _4 ] [85])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:84 _3 ] [84])
                (const_int 4 [0x4])) [2 _3->capacity+0 S4 A32])) "tester/dir_tester.c":107:5 81 {*movsi_internal}
     (nil))
(insn 20 19 22 3 (set (reg:SI 1 dx [89])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 capacity+0 S4 A32])) "tester/dir_tester.c":107:5 81 {*movsi_internal}
     (nil))
(insn 22 20 23 3 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:85 _4 ] [85])) "tester/dir_tester.c":107:5 81 {*movsi_internal}
     (nil))
(insn 23 22 24 3 (set (reg:DI 0 ax [90])
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7f916da74090 *.LC20>)) "tester/dir_tester.c":107:5 80 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [90])) "tester/dir_tester.c":107:5 80 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7f916da74090 *.LC20>)
        (nil)))
(insn 25 24 26 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":107:5 83 {*movqi_internal}
     (nil))
(call_insn 26 25 38 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":107:5 909 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(jump_insn 38 26 39 3 (set (pc)
        (label_ref 36)) "tester/dir_tester.c":109:5 892 {jump}
     (nil)
 -> 36)
;;  succ:       5 [always]  tester/dir_tester.c:109:5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 39 38 29)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 91
(code_label 29 39 30 4 38 (nil) [1 uses])
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 4 (set (reg:DI 0 ax [91])
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)) "tester/dir_tester.c":111:3 80 {*movdi_internal}
     (nil))
(insn 32 31 33 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [91])) "tester/dir_tester.c":111:3 80 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)
        (nil)))
(call_insn 33 32 36 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":111:3 909 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [always]  tester/dir_tester.c:109:5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 36 33 37 5 37 (nil) [1 uses])
(note 37 36 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 40 37 0 NOTE_INSN_DELETED)

;; Function check_success (check_success, funcdef_no=14, decl_uid=3202, cgraph_uid=15, symbol_order=14)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rBM {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) ?mr {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 33:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) ?mr {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 51:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3 4
EBB 5
EBB 6
EBB 7 8
EBB 9
EBB 10

********** Pseudo live ranges #1: **********

  BB 10
   Insn 68: point = 0, n_alt = -1
   Insn 67: point = 0, n_alt = -2
   Insn 63: point = 1, n_alt = -2
  BB 8
   Insn 74: point = 4, n_alt = -1
   Insn 55: point = 4, n_alt = 0
   Insn 54: point = 5, n_alt = 0
   Insn 53: point = 5, n_alt = 3
   Insn 52: point = 5, n_alt = -2
   Insn 51: point = 6, n_alt = 4
   Insn 50: point = 7, n_alt = -2
   Insn 49: point = 8, n_alt = 3
  BB 6
   Insn 72: point = 9, n_alt = -1
   Insn 41: point = 9, n_alt = 0
   Insn 40: point = 10, n_alt = 1
   Insn 39: point = 11, n_alt = 3
  BB 4
   Insn 70: point = 12, n_alt = -1
   Insn 24: point = 12, n_alt = 0
   Insn 23: point = 12, n_alt = 3
   Insn 22: point = 12, n_alt = -2
   Insn 21: point = 13, n_alt = 4
   Insn 20: point = 14, n_alt = -2
   Insn 19: point = 15, n_alt = -2
   Insn 18: point = 16, n_alt = 3
   Insn 17: point = 17, n_alt = 3
  BB 5
   Insn 36: point = 18, n_alt = 0
   Insn 35: point = 18, n_alt = 3
   Insn 34: point = 18, n_alt = -2
   Insn 33: point = 19, n_alt = 4
   Insn 32: point = 20, n_alt = -2
   Insn 31: point = 21, n_alt = -2
   Insn 30: point = 22, n_alt = 3
   Insn 29: point = 23, n_alt = 3
  BB 3
   Insn 15: point = 24, n_alt = -1
   Insn 14: point = 24, n_alt = 1
  BB 9
   Insn 60: point = 24, n_alt = 0
  BB 7
   Insn 47: point = 25, n_alt = -1
   Insn 46: point = 25, n_alt = 1
  BB 2
   Insn 12: point = 25, n_alt = -1
   Insn 11: point = 25, n_alt = 1
   Insn 10: point = 26, n_alt = 0
   Insn 6: point = 27, n_alt = 5
   Insn 5: point = 27, n_alt = 5
   Insn 4: point = 27, n_alt = 1
   Insn 3: point = 27, n_alt = 1
   Insn 2: point = 27, n_alt = 5
 r82: [24..24] [9..9] [2..4]
 r83: [0..1]
 r84: [25..26]
 r85: [15..17]
 r86: [14..16]
 r87: [12..13]
 r88: [21..23]
 r89: [20..22]
 r90: [18..19]
 r91: [10..11]
 r92: [7..8]
 r93: [5..6]
Compressing live ranges: from 27 to 22 - 81%
Ranges after the compression:
 r82: [19..19] [8..8] [2..3]
 r83: [0..1]
 r84: [20..21]
 r85: [13..14]
 r86: [13..14]
 r87: [11..12]
 r88: [17..18]
 r89: [17..18]
 r90: [15..16]
 r91: [9..10]
 r92: [6..7]
 r93: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 60
changing reg in insn 55
changing reg in insn 41
changing reg in insn 63
changing reg in insn 63
changing reg in insn 67
changing reg in insn 10
changing reg in insn 11
changing reg in insn 17
changing reg in insn 19
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 29
changing reg in insn 31
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 39
changing reg in insn 40
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
deleting insn with uid = 19.
deleting insn with uid = 31.
deleting insn with uid = 63.
deleting insn with uid = 67.
starting the processing of deferred insns
ending the processing of deferred insns


check_success

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 36 [r8]
;;  ref usage 	r0={18d,13u} r1={6d,3u} r2={4d,1u} r4={7d,4u} r5={7d,4u} r6={1d,25u} r7={1d,13u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={6d,3u} r18={3d} r19={1d,1u} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={4d,1u} r37={4d} r38={3d} r39={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} 
;;    total ref usage 312{244d,68u,0e} in 41{38 regular + 3 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8]
;; lr  def 	 17 [flags] 84
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])
        (reg:DI 5 di [ self ])) "tester/dir_tester.c":115:64 80 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 success+0 S4 A32])
        (reg:SI 4 si [ success ])) "tester/dir_tester.c":115:64 81 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 result+0 S4 A32])
        (reg:SI 1 dx [ result ])) "tester/dir_tester.c":115:64 81 {*movsi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 success_tip+0 S8 A64])
        (reg:DI 2 cx [ success_tip ])) "tester/dir_tester.c":115:64 80 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [1 failed_tip+0 S8 A64])
        (reg:DI 36 r8 [ failed_tip ])) "tester/dir_tester.c":115:64 80 {*movdi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg:SI 0 ax [84])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 success+0 S4 A32])) "tester/dir_tester.c":117:6 81 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [84])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [2 result+0 S4 A32]))) "tester/dir_tester.c":117:6 11 {*cmpsi_1}
     (nil))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) "tester/dir_tester.c":117:6 891 {*jcc}
     (nil)
 -> 44)
;;  succ:       3 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [2 result+0 S4 A32])
            (const_int 0 [0]))) "tester/dir_tester.c":118:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 15 14 16 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) "tester/dir_tester.c":118:8 891 {*jcc}
     (nil)
 -> 27)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 85 86 87
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg:DI 1 dx [85])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [1 failed_tip+0 S8 A64])) "tester/dir_tester.c":119:7 80 {*movdi_internal}
     (nil))
(insn 18 17 20 4 (set (reg:DI 0 ax [86])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 success_tip+0 S8 A64])) "tester/dir_tester.c":119:7 80 {*movdi_internal}
     (nil))
(insn 20 18 21 4 (set (reg:DI 4 si)
        (reg:DI 0 ax [86])) "tester/dir_tester.c":119:7 80 {*movdi_internal}
     (nil))
(insn 21 20 22 4 (set (reg:DI 0 ax [87])
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f916da746c0 *.LC21>)) "tester/dir_tester.c":119:7 80 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) "tester/dir_tester.c":119:7 80 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f916da746c0 *.LC21>)
        (nil)))
(insn 23 22 24 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":119:7 83 {*movqi_internal}
     (nil))
(call_insn 24 23 70 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":119:7 909 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(jump_insn 70 24 71 4 (set (pc)
        (label_ref 37)) 892 {jump}
     (nil)
 -> 37)
;;  succ:       6 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 71 70 27)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 88 89 90
(code_label 27 71 28 5 42 (nil) [1 uses])
(note 28 27 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 5 (set (reg:DI 1 dx [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 success_tip+0 S8 A64])) "tester/dir_tester.c":122:7 80 {*movdi_internal}
     (nil))
(insn 30 29 32 5 (set (reg:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [1 failed_tip+0 S8 A64])) "tester/dir_tester.c":122:7 80 {*movdi_internal}
     (nil))
(insn 32 30 33 5 (set (reg:DI 4 si)
        (reg:DI 0 ax [89])) "tester/dir_tester.c":122:7 80 {*movdi_internal}
     (nil))
(insn 33 32 34 5 (set (reg:DI 0 ax [90])
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f916da746c0 *.LC21>)) "tester/dir_tester.c":122:7 80 {*movdi_internal}
     (nil))
(insn 34 33 35 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [90])) "tester/dir_tester.c":122:7 80 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f916da746c0 *.LC21>)
        (nil)))
(insn 35 34 36 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":122:7 83 {*movqi_internal}
     (nil))
(call_insn 36 35 37 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":122:7 909 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              4 [always] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 82 91
(code_label 37 36 38 6 43 (nil) [1 uses])
(note 38 37 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 6 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":125:17 80 {*movdi_internal}
     (nil))
(insn 40 39 41 6 (set (mem:SI (plus:DI (reg/f:DI 0 ax [91])
                (const_int 32 [0x20])) [2 self_14(D)->error+0 S4 A64])
        (const_int 1 [0x1])) "tester/dir_tester.c":125:17 81 {*movsi_internal}
     (nil))
(insn 41 40 72 6 (set (reg:SI 0 ax [orig:82 _1 ] [82])
        (const_int 0 [0])) "tester/dir_tester.c":126:12 81 {*movsi_internal}
     (nil))
(jump_insn 72 41 73 6 (set (pc)
        (label_ref 61)) "tester/dir_tester.c":126:12 892 {jump}
     (nil)
 -> 61)
;;  succ:       10 [always]  tester/dir_tester.c:126:12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82

(barrier 73 72 44)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 44 73 45 7 41 (nil) [1 uses])
(note 45 44 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [2 result+0 S4 A32])
            (const_int 0 [0]))) "tester/dir_tester.c":128:6 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 47 46 48 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 58)
            (pc))) "tester/dir_tester.c":128:6 891 {*jcc}
     (nil)
 -> 58)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 92 93
(note 48 47 49 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 8 (set (reg:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [1 failed_tip+0 S8 A64])) "tester/dir_tester.c":129:5 80 {*movdi_internal}
     (nil))
(insn 50 49 51 8 (set (reg:DI 4 si)
        (reg:DI 0 ax [92])) "tester/dir_tester.c":129:5 80 {*movdi_internal}
     (nil))
(insn 51 50 52 8 (set (reg:DI 0 ax [93])
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f916da74750 *.LC22>)) "tester/dir_tester.c":129:5 80 {*movdi_internal}
     (nil))
(insn 52 51 53 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [93])) "tester/dir_tester.c":129:5 80 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f916da74750 *.LC22>)
        (nil)))
(insn 53 52 54 8 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":129:5 83 {*movqi_internal}
     (nil))
(call_insn 54 53 55 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":129:5 909 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 55 54 74 8 (set (reg:SI 0 ax [orig:82 _1 ] [82])
        (const_int 0 [0])) "tester/dir_tester.c":130:12 81 {*movsi_internal}
     (nil))
(jump_insn 74 55 75 8 (set (pc)
        (label_ref 61)) "tester/dir_tester.c":130:12 892 {jump}
     (nil)
 -> 61)
;;  succ:       10 [always]  tester/dir_tester.c:130:12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82

(barrier 75 74 58)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 82
(code_label 58 75 59 9 45 (nil) [1 uses])
(note 59 58 60 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 9 (set (reg:SI 0 ax [orig:82 _1 ] [82])
        (const_int 1 [0x1])) "tester/dir_tester.c":132:10 81 {*movsi_internal}
     (nil))
;;  succ:       10 (FALLTHRU) tester/dir_tester.c:132:10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU) tester/dir_tester.c:132:10
;;              6 [always]  tester/dir_tester.c:126:12
;;              8 [always]  tester/dir_tester.c:130:12
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
;; lr  def 	 0 [ax] 83
(code_label 61 60 62 10 44 (nil) [2 uses])
(note 62 61 68 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 68 62 76 10 (use (reg/i:SI 0 ax)) "tester/dir_tester.c":133:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 76 68 0 NOTE_INSN_DELETED)
