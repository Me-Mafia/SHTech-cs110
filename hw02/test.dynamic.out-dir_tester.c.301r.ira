
;; Function dir_tester_create (dir_tester_create, funcdef_no=6, decl_uid=2045, cgraph_uid=7, symbol_order=6)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 27.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r91,l0) best DIREG, allocno GENERAL_REGS
    r90: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r90,l0) best DIREG, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r88,l0) best SIREG, allocno GENERAL_REGS
    r87: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a10 (r87,l0) best AREG, allocno GENERAL_REGS
    r86: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r86,l0) best AREG, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r84,l0) best AREG, allocno GENERAL_REGS
    r83: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a6 (r83,l0) best SIREG, allocno GENERAL_REGS
    r82: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r82,l0) best DIREG, allocno GENERAL_REGS

  a0(r86,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a1(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a2(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r84,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a4(r91,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r90,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a6(r83,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a7(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a8(r82,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a9(r88,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a10(r87,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000

   Insn 39(l0): point = 0
   Insn 38(l0): point = 2
   Insn 34(l0): point = 4
   Insn 31(l0): point = 6
   Insn 30(l0): point = 8
   Insn 29(l0): point = 10
   Insn 28(l0): point = 12
   Insn 27(l0): point = 14
   Insn 26(l0): point = 16
   Insn 25(l0): point = 18
   Insn 24(l0): point = 20
   Insn 23(l0): point = 22
   Insn 22(l0): point = 24
   Insn 21(l0): point = 26
   Insn 20(l0): point = 28
   Insn 19(l0): point = 30
   Insn 18(l0): point = 32
   Insn 17(l0): point = 34
   Insn 16(l0): point = 36
   Insn 15(l0): point = 38
   Insn 14(l0): point = 40
   Insn 13(l0): point = 42
   Insn 12(l0): point = 44
   Insn 11(l0): point = 46
   Insn 10(l0): point = 48
   Insn 9(l0): point = 50
   Insn 8(l0): point = 52
   Insn 7(l0): point = 54
   Insn 6(l0): point = 56
   Insn 2(l0): point = 58
 a0(r86): [3..4]
 a1(r85): [5..6]
 a2(r92): [9..10]
 a3(r84): [9..12]
 a4(r91): [17..18]
 a5(r90): [25..26]
 a6(r83): [29..30]
 a7(r89): [33..34]
 a8(r82): [39..46]
 a9(r88): [41..44]
 a10(r87): [49..50]
Compressing live ranges: from 61 to 18 - 29%
Ranges after the compression:
 a0(r86): [0..1]
 a1(r85): [2..3]
 a2(r92): [4..5]
 a3(r84): [4..5]
 a4(r91): [6..7]
 a5(r90): [8..9]
 a6(r83): [10..11]
 a7(r89): [12..13]
 a8(r82): [14..15]
 a9(r88): [14..15]
 a10(r87): [16..17]
  pref0:a4(r91)<-hr5@1500
  pref1:a5(r90)<-hr5@1500
  pref2:a9(r88)<-hr4@1500
  pref3:a10(r87)<-hr0@1500
  pref4:a0(r86)<-hr0@1500
  pref5:a3(r84)<-hr0@1500
  pref6:a6(r83)<-hr4@1500
  pref7:a8(r82)<-hr5@1500
  regions=1, blocks=3, points=18
    allocnos=11 (big 0), copies=0, conflicts=0, ranges=11
Disposition:
    8:r82  l0     0    6:r83  l0     0    3:r84  l0     0    1:r85  l0     0
    0:r86  l0     0   10:r87  l0     0    9:r88  l0     2    7:r89  l0     0
    5:r90  l0     0    4:r91  l0     0    2:r92  l0     1
+++Costs: overall -8000, reg -8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


dir_tester_create

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={7d,5u} r1={6d,1u} r2={5d} r4={8d,3u} r5={9d,5u} r6={1d,2u} r7={1d,6u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={1d,1u} r17={4d} r18={4d} r19={1d,11u} r20={5d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={5d} r37={5d} r38={4d} r39={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} 
;;    total ref usage 353{308d,45u,0e} in 30{26 regular + 4 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 84 85 86 87 88 89 90 91 92
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 name+0 S8 A64])
        (reg:DI 5 di [ name ])) "tester/dir_tester.c":9:50 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ name ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 4 si)
        (const_int 40 [0x28])) "tester/dir_tester.c":10:29 80 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (const_int 1 [0x1])) "tester/dir_tester.c":10:29 80 {*movdi_internal}
     (nil))
(call_insn 8 7 9 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("calloc") [flags 0x41]  <function_decl 0x7f916dcd8500 calloc>) [0 __builtin_calloc S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":10:29 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 9 8 10 2 (set (reg/f:DI 87)
        (reg:DI 0 ax)) "tester/dir_tester.c":10:29 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 87)
            (nil))))
(insn 10 9 11 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])
        (reg/f:DI 87)) "tester/dir_tester.c":10:29 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87)
        (nil)))
(insn 11 10 12 2 (set (reg/f:DI 82 [ _1 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":11:15 80 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 88)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 name+0 S8 A64])) "tester/dir_tester.c":11:3 80 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 1 dx)
        (const_int 20 [0x14])) "tester/dir_tester.c":11:3 80 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 4 si)
        (reg:DI 88)) "tester/dir_tester.c":11:3 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 88)
        (nil)))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg/f:DI 82 [ _1 ])) "tester/dir_tester.c":11:3 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 82 [ _1 ])
        (nil)))
(call_insn 16 15 17 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strncpy") [flags 0x41]  <function_decl 0x7f916dcc0e00 strncpy>) [0 __builtin_strncpy S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":11:3 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 17 16 18 2 (set (reg/f:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":12:15 80 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (mem:SI (plus:DI (reg/f:DI 89)
                (const_int 32 [0x20])) [2 self_6->error+0 S4 A64])
        (const_int 0 [0])) "tester/dir_tester.c":12:15 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 89)
        (nil)))
(insn 19 18 20 2 (set (reg/f:DI 83 [ _2 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":13:46 80 {*movdi_internal}
     (nil))
(insn 20 19 21 2 (set (reg:DI 4 si)
        (reg/f:DI 83 [ _2 ])) "tester/dir_tester.c":13:3 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 83 [ _2 ])
        (nil)))
(insn 21 20 22 2 (set (reg:DI 90)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f916da457e0 *.LC0>)) "tester/dir_tester.c":13:3 80 {*movdi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:DI 5 di)
        (reg:DI 90)) "tester/dir_tester.c":13:3 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 90)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f916da457e0 *.LC0>)
            (nil))))
(insn 23 22 24 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":13:3 83 {*movqi_internal}
     (nil))
(call_insn 24 23 25 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":13:3 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 25 24 26 2 (set (reg:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 name+0 S8 A64])) "tester/dir_tester.c":14:21 80 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:DI 5 di)
        (reg:DI 91)) "tester/dir_tester.c":14:21 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 91)
        (nil)))
(call_insn 27 26 28 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_new") [flags 0x41]  <function_decl 0x7f916dd41800 dir_new>) [0 dir_new S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":14:21 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 28 27 29 2 (set (reg/f:DI 84 [ _3 ])
        (reg:DI 0 ax)) "tester/dir_tester.c":14:21 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 29 28 30 2 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":14:19 80 {*movdi_internal}
     (nil))
(insn 30 29 31 2 (set (mem/f:DI (plus:DI (reg/f:DI 92)
                (const_int 24 [0x18])) [4 self_6->inner_dir+0 S8 A64])
        (reg/f:DI 84 [ _3 ])) "tester/dir_tester.c":14:19 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92)
        (expr_list:REG_DEAD (reg/f:DI 84 [ _3 ])
            (nil))))
(insn 31 30 34 2 (set (reg/f:DI 85 [ _13 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":15:10 80 {*movdi_internal}
     (nil))
(insn 34 31 38 2 (set (reg/f:DI 86 [ <retval> ])
        (reg/f:DI 85 [ _13 ])) "tester/dir_tester.c":15:10 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 85 [ _13 ])
        (nil)))
(insn 38 34 39 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 86 [ <retval> ])) "tester/dir_tester.c":16:1 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 86 [ <retval> ])
        (nil)))
(insn 39 38 0 2 (use (reg/i:DI 0 ax)) "tester/dir_tester.c":16:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function dir_tester_destory (dir_tester_destory, funcdef_no=7, decl_uid=2047, cgraph_uid=8, symbol_order=7)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 9 n_edges 10 count 9 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 5 6 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 8 }
;; 8 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 31.
verify found no changes in insn with uid = 36.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r90: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r90,l0) best DIREG, allocno GENERAL_REGS
    r89: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r89,l0) best DIREG, allocno GENERAL_REGS
    r88: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r88,l0) best DIREG, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r83,l0) best DIREG, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r90,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r89,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a2(r88,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a3(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r83,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a6(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a7(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a8(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 42(l0): point = 0
   Insn 36(l0): point = 3
   Insn 35(l0): point = 5
   Insn 34(l0): point = 7
   Insn 31(l0): point = 10
   Insn 30(l0): point = 12
   Insn 29(l0): point = 14
   Insn 39(l0): point = 17
   Insn 24(l0): point = 19
   Insn 23(l0): point = 21
   Insn 22(l0): point = 23
   Insn 20(l0): point = 26
   Insn 19(l0): point = 28
   Insn 18(l0): point = 30
   Insn 17(l0): point = 32
   Insn 14(l0): point = 35
   Insn 13(l0): point = 37
   Insn 12(l0): point = 39
   Insn 11(l0): point = 41
   Insn 9(l0): point = 44
   Insn 8(l0): point = 46
   Insn 7(l0): point = 48
   Insn 6(l0): point = 50
   Insn 2(l0): point = 52
 a0(r90): [6..7]
 a1(r89): [13..14]
 a2(r88): [22..23]
 a3(r84): [29..30]
 a4(r87): [31..32]
 a5(r83): [38..39]
 a6(r86): [40..41]
 a7(r82): [47..48]
 a8(r85): [49..50]
Compressing live ranges: from 55 to 18 - 32%
Ranges after the compression:
 a0(r90): [0..1]
 a1(r89): [2..3]
 a2(r88): [4..5]
 a3(r84): [6..7]
 a4(r87): [8..9]
 a5(r83): [10..11]
 a6(r86): [12..13]
 a7(r82): [14..15]
 a8(r85): [16..17]
  pref0:a0(r90)<-hr5@1500
  pref1:a1(r89)<-hr5@1500
  pref2:a2(r88)<-hr5@1500
  pref3:a5(r83)<-hr5@1500
  regions=1, blocks=9, points=18
    allocnos=9 (big 0), copies=0, conflicts=0, ranges=9
Disposition:
    7:r82  l0     0    5:r83  l0     0    3:r84  l0     0    8:r85  l0     0
    6:r86  l0     0    4:r87  l0     0    2:r88  l0     0    1:r89  l0     0
    0:r90  l0     0
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


dir_tester_destory

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={5d} r1={5d} r2={5d} r4={5d} r5={9d,5u} r6={1d,8u} r7={1d,12u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={1d,7u} r17={6d,2u} r18={4d} r19={1d,13u} r20={5d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={5d} r37={5d} r38={4d} r39={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} 
;;    total ref usage 358{302d,56u,0e} in 24{20 regular + 4 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 85
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])
        (reg:DI 5 di [ self ])) "tester/dir_tester.c":17:50 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ self ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 85)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":18:11 80 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 82 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 85)
                (const_int 24 [0x18])) [4 self_7(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":18:11 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 85)
        (nil)))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 82 [ _1 ])
            (const_int 0 [0]))) "tester/dir_tester.c":18:6 8 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 82 [ _1 ])
        (nil)))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 15)
            (pc))) "tester/dir_tester.c":18:6 891 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 15)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 83 86
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:DI 86)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":19:5 80 {*movdi_internal}
     (nil))
(insn 12 11 13 3 (set (reg/f:DI 83 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 86)
                (const_int 24 [0x18])) [4 self_7(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":19:5 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 86)
        (nil)))
(insn 13 12 14 3 (set (reg:DI 5 di)
        (reg/f:DI 83 [ _2 ])) "tester/dir_tester.c":19:5 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 83 [ _2 ])
        (nil)))
(call_insn 14 13 15 3 (call (mem:QI (symbol_ref:DI ("dir_release") [flags 0x41]  <function_decl 0x7f916dd41900 dir_release>) [0 dir_release S1 A8])
        (const_int 0 [0])) "tester/dir_tester.c":19:5 898 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 84 87
(code_label 15 14 16 4 4 (nil) [1 uses])
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg/f:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":21:11 80 {*movdi_internal}
     (nil))
(insn 18 17 19 4 (set (reg:SI 84 [ _3 ])
        (mem:SI (plus:DI (reg/f:DI 87)
                (const_int 32 [0x20])) [2 self_7(D)->error+0 S4 A64])) "tester/dir_tester.c":21:11 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87)
        (nil)))
(insn 19 18 20 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 84 [ _3 ])
            (const_int 0 [0]))) "tester/dir_tester.c":21:6 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 84 [ _3 ])
        (nil)))
(jump_insn 20 19 21 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) "tester/dir_tester.c":21:6 891 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 27)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 88
(note 21 20 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 5 (set (reg:DI 88)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f916da45c60 *.LC1>)) "tester/dir_tester.c":22:5 80 {*movdi_internal}
     (nil))
(insn 23 22 24 5 (set (reg:DI 5 di)
        (reg:DI 88)) "tester/dir_tester.c":22:5 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 88)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f916da45c60 *.LC1>)
            (nil))))
(call_insn 24 23 39 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":22:5 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 39 24 40 5 (set (pc)
        (label_ref 32)) 892 {jump}
     (nil)
 -> 32)
;;  succ:       7 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 40 39 27)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 89
(code_label 27 40 28 6 5 (nil) [1 uses])
(note 28 27 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 6 (set (reg:DI 89)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f916da45cf0 *.LC2>)) "tester/dir_tester.c":24:5 80 {*movdi_internal}
     (nil))
(insn 30 29 31 6 (set (reg:DI 5 di)
        (reg:DI 89)) "tester/dir_tester.c":24:5 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 89)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f916da45cf0 *.LC2>)
            (nil))))
(call_insn 31 30 32 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":24:5 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;;              5 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 90
(code_label 32 31 33 7 6 (nil) [1 uses])
(note 33 32 34 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 7 (set (reg:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":26:3 80 {*movdi_internal}
     (nil))
(insn 35 34 36 7 (set (reg:DI 5 di)
        (reg:DI 90)) "tester/dir_tester.c":26:3 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 90)
        (nil)))
(call_insn 36 35 41 7 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f916dcddc00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "tester/dir_tester.c":26:3 898 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       8 [always]  (FALLTHRU) tester/dir_tester.c:27:1
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL)
;;  pred:       7 [always]  (FALLTHRU) tester/dir_tester.c:27:1
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 41 36 42 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 0 8 (const_int 0 [0]) "tester/dir_tester.c":27:1 928 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function dir_tester_find_node (dir_tester_find_node, funcdef_no=8, decl_uid=2051, cgraph_uid=9, symbol_order=8)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 8 n_edges 9 count 8 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 6 7 5
;; 2 succs { 6 3 }
;; 3 succs { 7 4 }
;; 4 succs { 5 }
;; 6 succs { 5 }
;; 7 succs { 5 }
;; 5 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 48.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r95: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r95,l0) best DIREG, allocno GENERAL_REGS
    r94: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r94,l0) best CREG, allocno GENERAL_REGS
    r93: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r93,l0) best DIREG, allocno GENERAL_REGS
    r92: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r92,l0) best SIREG, allocno GENERAL_REGS
    r91: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r91,l0) best DREG, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a10 (r89,l0) best SIREG, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r86,l0) best AREG, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r84,l0) best AREG, allocno GENERAL_REGS
    r83: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r83,l0) best DIREG, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r95,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a1(r86,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a2(r93,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r92,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r91,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r94,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a6(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a7(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a8(r84,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a9(r83,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a10(r89,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a11(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a12(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a13(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 62(l0): point = 1
   Insn 58(l0): point = 4
   Insn 57(l0): point = 6
   Insn 53(l0): point = 9
   Insn 48(l0): point = 11
   Insn 47(l0): point = 13
   Insn 46(l0): point = 15
   Insn 40(l0): point = 18
   Insn 39(l0): point = 20
   Insn 38(l0): point = 22
   Insn 37(l0): point = 24
   Insn 36(l0): point = 26
   Insn 35(l0): point = 28
   Insn 34(l0): point = 30
   Insn 33(l0): point = 32
   Insn 32(l0): point = 34
   Insn 31(l0): point = 36
   Insn 30(l0): point = 38
   Insn 29(l0): point = 40
   Insn 28(l0): point = 42
   Insn 27(l0): point = 44
   Insn 26(l0): point = 46
   Insn 25(l0): point = 48
   Insn 24(l0): point = 50
   Insn 23(l0): point = 52
   Insn 22(l0): point = 54
   Insn 21(l0): point = 56
   Insn 20(l0): point = 58
   Insn 19(l0): point = 60
   Insn 18(l0): point = 62
   Insn 17(l0): point = 64
   Insn 11(l0): point = 67
   Insn 10(l0): point = 69
   Insn 9(l0): point = 71
   Insn 8(l0): point = 73
   Insn 4(l0): point = 75
   Insn 3(l0): point = 77
   Insn 2(l0): point = 79
 a0(r95): [14..15]
 a1(r86): [21..22]
 a2(r93): [27..38]
 a3(r92): [29..40]
 a4(r91): [31..42]
 a5(r94): [33..34]
 a6(r90): [45..46]
 a7(r85): [47..48]
 a8(r84): [51..52]
 a9(r83): [57..62]
 a10(r89): [59..60]
 a11(r88): [63..64]
 a12(r82): [70..71]
 a13(r87): [72..73]
Compressing live ranges: from 82 to 20 - 24%
Ranges after the compression:
 a0(r95): [0..1]
 a1(r86): [2..3]
 a2(r93): [4..5]
 a3(r92): [4..5]
 a4(r91): [4..5]
 a5(r94): [4..5]
 a6(r90): [6..7]
 a7(r85): [8..9]
 a8(r84): [10..11]
 a9(r83): [12..13]
 a10(r89): [12..13]
 a11(r88): [14..15]
 a12(r82): [16..17]
 a13(r87): [18..19]
  pref0:a0(r95)<-hr5@1500
  pref1:a5(r94)<-hr2@1500
  pref2:a2(r93)<-hr5@1500
  pref3:a3(r92)<-hr4@1500
  pref4:a4(r91)<-hr1@1500
  pref5:a10(r89)<-hr4@1500
  pref6:a1(r86)<-hr0@1500
  pref7:a8(r84)<-hr0@1500
  pref8:a9(r83)<-hr5@1500
  regions=1, blocks=8, points=20
    allocnos=14 (big 0), copies=0, conflicts=0, ranges=14
Disposition:
   12:r82  l0     0    9:r83  l0     0    8:r84  l0     0    7:r85  l0     0
    1:r86  l0     0   13:r87  l0     0   11:r88  l0     0   10:r89  l0     1
    6:r90  l0     0    4:r91  l0     1    3:r92  l0     4    2:r93  l0     0
    5:r94  l0     2    0:r95  l0     0
+++Costs: overall -9000, reg -9000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


dir_tester_find_node

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 36 [r8]
;;  ref usage 	r0={4d,2u} r1={5d,2u} r2={5d,1u} r4={6d,3u} r5={7d,4u} r6={1d,7u} r7={1d,10u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1d,6u} r17={6d,3u} r18={3d} r19={1d,17u} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={5d,1u} r37={4d} r38={3d} r39={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} 
;;    total ref usage 315{245d,70u,0e} in 38{35 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 87
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])
        (reg:DI 5 di [ self ])) "tester/dir_tester.c":30:41 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ self ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])
        (reg:DI 4 si [ name ])) "tester/dir_tester.c":30:41 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ name ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -36 [0xffffffffffffffdc])) [2 success+0 S4 A32])
        (reg:SI 1 dx [ success ])) "tester/dir_tester.c":30:41 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ success ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":31:11 80 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 82 [ _1 ])
        (mem:SI (plus:DI (reg/f:DI 87)
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])) "tester/dir_tester.c":31:11 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87)
        (nil)))
(insn 10 9 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 82 [ _1 ])
            (const_int 0 [0]))) "tester/dir_tester.c":31:6 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 82 [ _1 ])
        (nil)))
(jump_insn 11 10 16 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 56)
            (pc))) "tester/dir_tester.c":31:6 891 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 56)
;;  succ:       6 tester/dir_tester.c:32:5
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 83 84 85 86 88 89 90 91 92 93 94
(note 16 11 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg/f:DI 88)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":33:36 80 {*movdi_internal}
     (nil))
(insn 18 17 19 3 (set (reg/f:DI 83 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 88)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":33:36 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 88)
        (nil)))
(insn 19 18 20 3 (set (reg:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])) "tester/dir_tester.c":33:18 80 {*movdi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:DI 4 si)
        (reg:DI 89)) "tester/dir_tester.c":33:18 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 89)
        (nil)))
(insn 21 20 22 3 (set (reg:DI 5 di)
        (reg/f:DI 83 [ _2 ])) "tester/dir_tester.c":33:18 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 83 [ _2 ])
        (nil)))
(call_insn 22 21 23 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_find_node") [flags 0x41]  <function_decl 0x7f916dd41a00 dir_find_node>) [0 dir_find_node S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":33:18 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 23 22 24 3 (set (reg/f:DI 84 [ _3 ])
        (reg:DI 0 ax)) "tester/dir_tester.c":33:18 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 24 23 25 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 84 [ _3 ])
            (const_int 0 [0]))) "tester/dir_tester.c":33:17 8 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 84 [ _3 ])
        (nil)))
(insn 25 24 26 3 (set (reg:QI 85 [ _4 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) "tester/dir_tester.c":33:17 886 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 26 25 27 3 (set (reg:SI 90)
        (zero_extend:SI (reg:QI 85 [ _4 ]))) "tester/dir_tester.c":33:8 150 {*zero_extendqisi2}
     (expr_list:REG_DEAD (reg:QI 85 [ _4 ])
        (nil)))
(insn 27 26 28 3 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [2 result+0 S4 A32])
        (reg:SI 90)) "tester/dir_tester.c":33:8 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 90)
        (nil)))
(insn 28 27 29 3 (set (reg:SI 91)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [2 result+0 S4 A32])) "tester/dir_tester.c":34:8 81 {*movsi_internal}
     (nil))
(insn 29 28 30 3 (set (reg:SI 92)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -36 [0xffffffffffffffdc])) [2 success+0 S4 A32])) "tester/dir_tester.c":34:8 81 {*movsi_internal}
     (nil))
(insn 30 29 31 3 (set (reg:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":34:8 80 {*movdi_internal}
     (nil))
(insn 31 30 32 3 (set (reg:DI 36 r8)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f916da573f0 *.LC3>)) "tester/dir_tester.c":34:8 80 {*movdi_internal}
     (nil))
(insn 32 31 33 3 (set (reg:DI 94)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f916da57480 *.LC4>)) "tester/dir_tester.c":34:8 80 {*movdi_internal}
     (nil))
(insn 33 32 34 3 (set (reg:DI 2 cx)
        (reg:DI 94)) "tester/dir_tester.c":34:8 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 94)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f916da57480 *.LC4>)
            (nil))))
(insn 34 33 35 3 (set (reg:SI 1 dx)
        (reg:SI 91)) "tester/dir_tester.c":34:8 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 91)
        (nil)))
(insn 35 34 36 3 (set (reg:SI 4 si)
        (reg:SI 92)) "tester/dir_tester.c":34:8 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 92)
        (nil)))
(insn 36 35 37 3 (set (reg:DI 5 di)
        (reg:DI 93)) "tester/dir_tester.c":34:8 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 93)
        (nil)))
(call_insn 37 36 38 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_success") [flags 0x3]  <function_decl 0x7f916da16c00 check_success>) [0 check_success S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":34:8 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 36 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:SI 4 si)
                (expr_list:REG_DEAD (reg:DI 2 cx)
                    (expr_list:REG_DEAD (reg:SI 1 dx)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))
(insn 38 37 39 3 (set (reg:SI 86 [ _5 ])
        (reg:SI 0 ax)) "tester/dir_tester.c":34:8 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 39 38 40 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 86 [ _5 ])
            (const_int 0 [0]))) "tester/dir_tester.c":34:6 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 86 [ _5 ])
        (nil)))
(jump_insn 40 39 45 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 61)
            (pc))) "tester/dir_tester.c":34:6 891 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 61)
;;  succ:       7 tester/dir_tester.c:35:5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 6, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 95
(note 45 40 46 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 4 (set (reg:DI 95)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f916da57510 *.LC5>)) "tester/dir_tester.c":36:3 80 {*movdi_internal}
     (nil))
(insn 47 46 48 4 (set (reg:DI 5 di)
        (reg:DI 95)) "tester/dir_tester.c":36:3 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 95)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f916da57510 *.LC5>)
            (nil))))
(call_insn 48 47 53 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":36:3 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 53 48 54 4 (set (pc)
        (label_ref 51)) 892 {jump}
     (nil)
 -> 51)
;;  succ:       5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 54 53 56)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 4, next block 7, flags: (RTL)
;;  pred:       2 tester/dir_tester.c:32:5
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 56 54 55 6 11 (nil) [1 uses])
(note 55 56 57 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 57 55 58 6 (const_int 0 [0]) "tester/dir_tester.c":32:5 928 {nop}
     (nil))
(jump_insn 58 57 59 6 (set (pc)
        (label_ref 51)) 892 {jump}
     (nil)
 -> 51)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 59 58 61)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 5, flags: (RTL)
;;  pred:       3 tester/dir_tester.c:35:5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 61 59 60 7 12 (nil) [1 uses])
(note 60 61 62 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 62 60 51 7 (const_int 0 [0]) "tester/dir_tester.c":35:5 928 {nop}
     (nil))
;;  succ:       5 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL)
;;  pred:       7 [always]  (FALLTHRU)
;;              4
;;              6 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 51 62 52 5 7 (nil) [2 uses])
(note 52 51 0 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function dir_tester_add_file (dir_tester_add_file, funcdef_no=9, decl_uid=2056, cgraph_uid=10, symbol_order=9)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 12 n_edges 15 count 12 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 10 11 9
;; 2 succs { 10 3 }
;; 3 succs { 11 4 }
;; 4 succs { 5 6 }
;; 5 succs { 9 }
;; 6 succs { 7 8 }
;; 7 succs { 9 }
;; 8 succs { 9 }
;; 10 succs { 9 }
;; 11 succs { 9 }
;; 9 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 29.
verify found no changes in insn with uid = 41.
verify found no changes in insn with uid = 57.
verify found no changes in insn with uid = 65.
verify found no changes in insn with uid = 77.
verify found no changes in insn with uid = 86.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r105: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r105,l0) best DIREG, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r103,l0) best DIREG, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r101,l0) best DIREG, allocno GENERAL_REGS
    r100: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a6 (r100,l0) best AREG, allocno GENERAL_REGS
    r99: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r99,l0) best SIREG, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a15 (r96,l0) best CREG, allocno GENERAL_REGS
    r95: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a12 (r95,l0) best DIREG, allocno GENERAL_REGS
    r94: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a13 (r94,l0) best SIREG, allocno GENERAL_REGS
    r93: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a14 (r93,l0) best DREG, allocno GENERAL_REGS
    r92: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a16 (r92,l0) best AREG, allocno GENERAL_REGS
    r91: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a18 (r91,l0) best SIREG, allocno GENERAL_REGS
    r90: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a19 (r90,l0) best DREG, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a21 (r88,l0) best DIREG, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r85,l0) best DIREG, allocno GENERAL_REGS
    r84: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a11 (r84,l0) best AREG, allocno GENERAL_REGS
    r83: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a17 (r83,l0) best DIREG, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r105,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a1(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a2(r103,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a3(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r101,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a6(r100,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a7(r85,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a8(r99,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a9(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a10(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a11(r84,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a12(r95,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a13(r94,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a14(r93,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a15(r96,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a16(r92,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a17(r83,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a18(r91,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a19(r90,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a20(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a21(r88,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a22(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a23(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 104(l0): point = 1
   Insn 100(l0): point = 4
   Insn 99(l0): point = 6
   Insn 95(l0): point = 9
   Insn 86(l0): point = 11
   Insn 85(l0): point = 13
   Insn 84(l0): point = 15
   Insn 83(l0): point = 17
   Insn 82(l0): point = 19
   Insn 93(l0): point = 22
   Insn 77(l0): point = 24
   Insn 76(l0): point = 26
   Insn 75(l0): point = 28
   Insn 73(l0): point = 31
   Insn 72(l0): point = 33
   Insn 71(l0): point = 35
   Insn 70(l0): point = 37
   Insn 91(l0): point = 40
   Insn 65(l0): point = 42
   Insn 64(l0): point = 44
   Insn 63(l0): point = 46
   Insn 61(l0): point = 49
   Insn 60(l0): point = 51
   Insn 59(l0): point = 53
   Insn 58(l0): point = 55
   Insn 57(l0): point = 57
   Insn 56(l0): point = 59
   Insn 55(l0): point = 61
   Insn 54(l0): point = 63
   Insn 53(l0): point = 65
   Insn 52(l0): point = 67
   Insn 51(l0): point = 69
   Insn 50(l0): point = 71
   Insn 44(l0): point = 74
   Insn 43(l0): point = 76
   Insn 42(l0): point = 78
   Insn 41(l0): point = 80
   Insn 40(l0): point = 82
   Insn 39(l0): point = 84
   Insn 38(l0): point = 86
   Insn 37(l0): point = 88
   Insn 36(l0): point = 90
   Insn 35(l0): point = 92
   Insn 34(l0): point = 94
   Insn 33(l0): point = 96
   Insn 32(l0): point = 98
   Insn 31(l0): point = 100
   Insn 30(l0): point = 102
   Insn 29(l0): point = 104
   Insn 28(l0): point = 106
   Insn 27(l0): point = 108
   Insn 26(l0): point = 110
   Insn 25(l0): point = 112
   Insn 24(l0): point = 114
   Insn 23(l0): point = 116
   Insn 22(l0): point = 118
   Insn 21(l0): point = 120
   Insn 20(l0): point = 122
   Insn 19(l0): point = 124
   Insn 18(l0): point = 126
   Insn 12(l0): point = 129
   Insn 11(l0): point = 131
   Insn 10(l0): point = 133
   Insn 9(l0): point = 135
   Insn 5(l0): point = 137
   Insn 4(l0): point = 139
   Insn 3(l0): point = 141
   Insn 2(l0): point = 143
 a0(r105): [14..15]
 a1(r104): [18..19]
 a2(r103): [27..28]
 a3(r86): [34..35]
 a4(r102): [36..37]
 a5(r101): [45..46]
 a6(r100): [54..55]
 a7(r85): [60..65]
 a8(r99): [62..63]
 a9(r98): [66..67]
 a10(r97): [70..71]
 a11(r84): [77..78]
 a12(r95): [83..94]
 a13(r94): [85..96]
 a14(r93): [87..98]
 a15(r96): [89..90]
 a16(r92): [101..102]
 a17(r83): [107..116]
 a18(r91): [109..112]
 a19(r90): [111..114]
 a20(r89): [117..118]
 a21(r88): [125..126]
 a22(r82): [132..133]
 a23(r87): [134..135]
Compressing live ranges: from 146 to 36 - 24%
Ranges after the compression:
 a0(r105): [0..1]
 a1(r104): [2..3]
 a2(r103): [4..5]
 a3(r86): [6..7]
 a4(r102): [8..9]
 a5(r101): [10..11]
 a6(r100): [12..13]
 a7(r85): [14..15]
 a8(r99): [14..15]
 a9(r98): [16..17]
 a10(r97): [18..19]
 a11(r84): [20..21]
 a12(r95): [22..23]
 a13(r94): [22..23]
 a14(r93): [22..23]
 a15(r96): [22..23]
 a16(r92): [24..25]
 a17(r83): [26..27]
 a18(r91): [26..27]
 a19(r90): [26..27]
 a20(r89): [28..29]
 a21(r88): [30..31]
 a22(r82): [32..33]
 a23(r87): [34..35]
  pref0:a0(r105)<-hr5@1500
  pref1:a2(r103)<-hr5@1500
  pref2:a5(r101)<-hr5@1500
  pref3:a6(r100)<-hr0@1500
  pref4:a8(r99)<-hr4@1500
  pref5:a15(r96)<-hr2@1500
  pref6:a12(r95)<-hr5@1500
  pref7:a13(r94)<-hr4@1500
  pref8:a14(r93)<-hr1@1500
  pref9:a16(r92)<-hr0@1500
  pref10:a18(r91)<-hr4@1500
  pref11:a19(r90)<-hr1@1500
  pref12:a21(r88)<-hr5@1500
  pref13:a7(r85)<-hr5@1500
  pref14:a11(r84)<-hr0@1500
  pref15:a17(r83)<-hr5@1500
  regions=1, blocks=12, points=36
    allocnos=24 (big 0), copies=0, conflicts=0, ranges=24
Disposition:
   22:r82  l0     0   17:r83  l0     0   11:r84  l0     0    7:r85  l0     0
    3:r86  l0     0   23:r87  l0     0   21:r88  l0     0   20:r89  l0     0
   19:r90  l0     1   18:r91  l0     2   16:r92  l0     0   14:r93  l0     1
   13:r94  l0     4   12:r95  l0     0   15:r96  l0     2   10:r97  l0     0
    9:r98  l0     0    8:r99  l0     1    6:r100 l0     0    5:r101 l0     0
    4:r102 l0     0    2:r103 l0     0    1:r104 l0     0    0:r105 l0     0
+++Costs: overall -16000, reg -16000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


dir_tester_add_file

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 36 [r8]
;;  ref usage 	r0={9d,4u} r1={10d,3u} r2={9d,2u} r4={11d,4u} r5={15d,8u} r6={1d,11u} r7={1d,18u} r8={7d} r9={7d} r10={7d} r11={7d} r12={7d} r13={7d} r14={7d} r15={7d} r16={1d,10u} r17={11d,4u} r18={7d} r19={1d,30u} r20={8d} r21={8d} r22={8d} r23={8d} r24={8d} r25={8d} r26={8d} r27={8d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={9d,1u} r37={8d} r38={7d} r39={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} 
;;    total ref usage 650{531d,119u,0e} in 68{61 regular + 7 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 87
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])
        (reg:DI 5 di [ self ])) "tester/dir_tester.c":39:40 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ self ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -28 [0xffffffffffffffe4])) [2 type+0 S4 A32])
        (reg:SI 4 si [ type ])) "tester/dir_tester.c":39:40 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ type ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [1 name+0 S8 A64])
        (reg:DI 1 dx [ name ])) "tester/dir_tester.c":39:40 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ name ])
        (nil)))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 success+0 S4 A32])
        (reg:SI 2 cx [ success ])) "tester/dir_tester.c":39:40 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ success ])
        (nil)))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg/f:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":40:11 80 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 82 [ _1 ])
        (mem:SI (plus:DI (reg/f:DI 87)
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])) "tester/dir_tester.c":40:11 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87)
        (nil)))
(insn 11 10 12 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 82 [ _1 ])
            (const_int 0 [0]))) "tester/dir_tester.c":40:6 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 82 [ _1 ])
        (nil)))
(jump_insn 12 11 17 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 98)
            (pc))) "tester/dir_tester.c":40:6 891 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 98)
;;  succ:       10 tester/dir_tester.c:41:5
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 83 84 88 89 90 91 92 93 94 95 96
(note 17 12 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 3 (set (reg:DI 88)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f916da57bd0 *.LC6>)) "tester/dir_tester.c":42:3 80 {*movdi_internal}
     (nil))
(insn 19 18 20 3 (set (reg:DI 5 di)
        (reg:DI 88)) "tester/dir_tester.c":42:3 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 88)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f916da57bd0 *.LC6>)
            (nil))))
(insn 20 19 21 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":42:3 83 {*movqi_internal}
     (nil))
(call_insn 21 20 22 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":42:3 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 22 21 23 3 (set (reg/f:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":43:17 80 {*movdi_internal}
     (nil))
(insn 23 22 24 3 (set (reg/f:DI 83 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 89)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":43:17 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 89)
        (nil)))
(insn 24 23 25 3 (set (reg:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [1 name+0 S8 A64])) "tester/dir_tester.c":43:17 80 {*movdi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:SI 91)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -28 [0xffffffffffffffe4])) [2 type+0 S4 A32])) "tester/dir_tester.c":43:17 81 {*movsi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:DI 1 dx)
        (reg:DI 90)) "tester/dir_tester.c":43:17 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 90)
        (nil)))
(insn 27 26 28 3 (set (reg:SI 4 si)
        (reg:SI 91)) "tester/dir_tester.c":43:17 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 91)
        (nil)))
(insn 28 27 29 3 (set (reg:DI 5 di)
        (reg/f:DI 83 [ _2 ])) "tester/dir_tester.c":43:17 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 83 [ _2 ])
        (nil)))
(call_insn 29 28 30 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_add_file") [flags 0x41]  <function_decl 0x7f916dd41b00 dir_add_file>) [0 dir_add_file S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":43:17 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 30 29 31 3 (set (reg:SI 92)
        (reg:SI 0 ax)) "tester/dir_tester.c":43:17 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 31 30 32 3 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 result+0 S4 A32])
        (reg:SI 92)) "tester/dir_tester.c":43:17 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 92)
        (nil)))
(insn 32 31 33 3 (set (reg:SI 93)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 result+0 S4 A32])) "tester/dir_tester.c":44:8 81 {*movsi_internal}
     (nil))
(insn 33 32 34 3 (set (reg:SI 94)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 success+0 S4 A32])) "tester/dir_tester.c":44:8 81 {*movsi_internal}
     (nil))
(insn 34 33 35 3 (set (reg:DI 95)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":44:8 80 {*movdi_internal}
     (nil))
(insn 35 34 36 3 (set (reg:DI 36 r8)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f916da57c60 *.LC7>)) "tester/dir_tester.c":44:8 80 {*movdi_internal}
     (nil))
(insn 36 35 37 3 (set (reg:DI 96)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f916da57cf0 *.LC8>)) "tester/dir_tester.c":44:8 80 {*movdi_internal}
     (nil))
(insn 37 36 38 3 (set (reg:DI 2 cx)
        (reg:DI 96)) "tester/dir_tester.c":44:8 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 96)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f916da57cf0 *.LC8>)
            (nil))))
(insn 38 37 39 3 (set (reg:SI 1 dx)
        (reg:SI 93)) "tester/dir_tester.c":44:8 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 93)
        (nil)))
(insn 39 38 40 3 (set (reg:SI 4 si)
        (reg:SI 94)) "tester/dir_tester.c":44:8 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 94)
        (nil)))
(insn 40 39 41 3 (set (reg:DI 5 di)
        (reg:DI 95)) "tester/dir_tester.c":44:8 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 95)
        (nil)))
(call_insn 41 40 42 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_success") [flags 0x3]  <function_decl 0x7f916da16c00 check_success>) [0 check_success S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":44:8 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 36 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:SI 4 si)
                (expr_list:REG_DEAD (reg:DI 2 cx)
                    (expr_list:REG_DEAD (reg:SI 1 dx)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))
(insn 42 41 43 3 (set (reg:SI 84 [ _3 ])
        (reg:SI 0 ax)) "tester/dir_tester.c":44:8 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 43 42 44 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 84 [ _3 ])
            (const_int 0 [0]))) "tester/dir_tester.c":44:6 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 84 [ _3 ])
        (nil)))
(jump_insn 44 43 49 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 103)
            (pc))) "tester/dir_tester.c":44:6 891 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 103)
;;  succ:       11 tester/dir_tester.c:45:5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 85 97 98 99 100
(note 49 44 50 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 4 (set (reg/f:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":46:15 80 {*movdi_internal}
     (nil))
(insn 51 50 52 4 (set (mem:SI (plus:DI (reg/f:DI 97)
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])
        (const_int 1 [0x1])) "tester/dir_tester.c":46:15 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 97)
        (nil)))
(insn 52 51 53 4 (set (reg/f:DI 98)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":47:41 80 {*movdi_internal}
     (nil))
(insn 53 52 54 4 (set (reg/f:DI 85 [ _4 ])
        (mem/f:DI (plus:DI (reg/f:DI 98)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":47:41 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 98)
        (nil)))
(insn 54 53 55 4 (set (reg:DI 99)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [1 name+0 S8 A64])) "tester/dir_tester.c":47:23 80 {*movdi_internal}
     (nil))
(insn 55 54 56 4 (set (reg:DI 4 si)
        (reg:DI 99)) "tester/dir_tester.c":47:23 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 99)
        (nil)))
(insn 56 55 57 4 (set (reg:DI 5 di)
        (reg/f:DI 85 [ _4 ])) "tester/dir_tester.c":47:23 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 85 [ _4 ])
        (nil)))
(call_insn 57 56 58 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_find_node") [flags 0x41]  <function_decl 0x7f916dd41a00 dir_find_node>) [0 dir_find_node S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":47:23 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 58 57 59 4 (set (reg:DI 100)
        (reg:DI 0 ax)) "tester/dir_tester.c":47:23 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 59 58 60 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])
        (reg:DI 100)) "tester/dir_tester.c":47:23 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 100)
        (nil)))
(insn 60 59 61 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])
            (const_int 0 [0]))) "tester/dir_tester.c":48:6 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 61 60 62 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) "tester/dir_tester.c":48:6 891 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 68)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 101
(note 62 61 63 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 5 (set (reg:DI 101)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f916da57d80 *.LC9>)) "tester/dir_tester.c":49:5 80 {*movdi_internal}
     (nil))
(insn 64 63 65 5 (set (reg:DI 5 di)
        (reg:DI 101)) "tester/dir_tester.c":49:5 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 101)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f916da57d80 *.LC9>)
            (nil))))
(call_insn 65 64 91 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":49:5 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 91 65 92 5 (set (pc)
        (label_ref 89)) "tester/dir_tester.c":50:5 892 {jump}
     (nil)
 -> 89)
;;  succ:       9 [always]  tester/dir_tester.c:50:5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 92 91 68)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 86 102
(code_label 68 92 69 6 17 (nil) [1 uses])
(note 69 68 70 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 71 6 (set (reg/f:DI 102)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])) "tester/dir_tester.c":52:11 80 {*movdi_internal}
     (nil))
(insn 71 70 72 6 (set (reg:SI 86 [ _5 ])
        (mem:SI (plus:DI (reg/f:DI 102)
                (const_int 32 [0x20])) [2 node_18->is_dir+0 S4 A64])) "tester/dir_tester.c":52:11 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 102)
        (nil)))
(insn 72 71 73 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 86 [ _5 ])
            (const_int 0 [0]))) "tester/dir_tester.c":52:6 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 86 [ _5 ])
        (nil)))
(jump_insn 73 72 74 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 80)
            (pc))) "tester/dir_tester.c":52:6 891 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 80)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 103
(note 74 73 75 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 7 (set (reg:DI 103)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f916da57e10 *.LC10>)) "tester/dir_tester.c":53:5 80 {*movdi_internal}
     (nil))
(insn 76 75 77 7 (set (reg:DI 5 di)
        (reg:DI 103)) "tester/dir_tester.c":53:5 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 103)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f916da57e10 *.LC10>)
            (nil))))
(call_insn 77 76 93 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":53:5 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 93 77 94 7 (set (pc)
        (label_ref 89)) "tester/dir_tester.c":54:5 892 {jump}
     (nil)
 -> 89)
;;  succ:       9 [always]  tester/dir_tester.c:54:5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 94 93 80)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 10, flags: (RTL)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 104 105
(code_label 80 94 81 8 18 (nil) [1 uses])
(note 81 80 82 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 8 (set (reg/f:DI 104)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":56:15 80 {*movdi_internal}
     (nil))
(insn 83 82 84 8 (set (mem:SI (plus:DI (reg/f:DI 104)
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])
        (const_int 0 [0])) "tester/dir_tester.c":56:15 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 104)
        (nil)))
(insn 84 83 85 8 (set (reg:DI 105)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)) "tester/dir_tester.c":57:3 80 {*movdi_internal}
     (nil))
(insn 85 84 86 8 (set (reg:DI 5 di)
        (reg:DI 105)) "tester/dir_tester.c":57:3 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 105)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)
            (nil))))
(call_insn 86 85 95 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":57:3 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 95 86 96 8 (set (pc)
        (label_ref 89)) 892 {jump}
     (nil)
 -> 89)
;;  succ:       9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 96 95 98)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 8, next block 11, flags: (RTL)
;;  pred:       2 tester/dir_tester.c:41:5
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 98 96 97 10 19 (nil) [1 uses])
(note 97 98 99 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 99 97 100 10 (const_int 0 [0]) "tester/dir_tester.c":41:5 928 {nop}
     (nil))
(jump_insn 100 99 101 10 (set (pc)
        (label_ref 89)) 892 {jump}
     (nil)
 -> 89)
;;  succ:       9 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 101 100 103)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 9, flags: (RTL)
;;  pred:       3 tester/dir_tester.c:45:5
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 103 101 102 11 20 (nil) [1 uses])
(note 102 103 104 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 104 102 89 11 (const_int 0 [0]) "tester/dir_tester.c":45:5 928 {nop}
     (nil))
;;  succ:       9 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 11, next block 1, flags: (RTL)
;;  pred:       7 [always]  tester/dir_tester.c:54:5
;;              8
;;              11 [always]  (FALLTHRU)
;;              5 [always]  tester/dir_tester.c:50:5
;;              10 [always] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 89 104 90 9 13 (nil) [4 uses])
(note 90 89 0 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function dir_tester_add_subdir (dir_tester_add_subdir, funcdef_no=10, decl_uid=2060, cgraph_uid=11, symbol_order=10)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 12 n_edges 15 count 12 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 10 11 9
;; 2 succs { 10 3 }
;; 3 succs { 11 4 }
;; 4 succs { 5 6 }
;; 5 succs { 9 }
;; 6 succs { 7 8 }
;; 7 succs { 9 }
;; 8 succs { 9 }
;; 10 succs { 9 }
;; 11 succs { 9 }
;; 9 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 38.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 62.
verify found no changes in insn with uid = 74.
verify found no changes in insn with uid = 83.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r104: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r104,l0) best DIREG, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r102,l0) best DIREG, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r100,l0) best DIREG, allocno GENERAL_REGS
    r99: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a6 (r99,l0) best AREG, allocno GENERAL_REGS
    r98: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r98,l0) best SIREG, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a15 (r95,l0) best CREG, allocno GENERAL_REGS
    r94: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a12 (r94,l0) best DIREG, allocno GENERAL_REGS
    r93: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a13 (r93,l0) best SIREG, allocno GENERAL_REGS
    r92: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a14 (r92,l0) best DREG, allocno GENERAL_REGS
    r91: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a16 (r91,l0) best AREG, allocno GENERAL_REGS
    r90: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a18 (r90,l0) best SIREG, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a20 (r88,l0) best DIREG, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r85,l0) best DIREG, allocno GENERAL_REGS
    r84: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a11 (r84,l0) best AREG, allocno GENERAL_REGS
    r83: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a17 (r83,l0) best DIREG, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r104,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a1(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a2(r102,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a3(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r100,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a6(r99,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a7(r85,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a8(r98,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a9(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a10(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a11(r84,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a12(r94,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a13(r93,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a14(r92,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a15(r95,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a16(r91,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a17(r83,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a18(r90,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a19(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a20(r88,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a21(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a22(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 101(l0): point = 1
   Insn 97(l0): point = 4
   Insn 96(l0): point = 6
   Insn 92(l0): point = 9
   Insn 83(l0): point = 11
   Insn 82(l0): point = 13
   Insn 81(l0): point = 15
   Insn 80(l0): point = 17
   Insn 79(l0): point = 19
   Insn 90(l0): point = 22
   Insn 74(l0): point = 24
   Insn 73(l0): point = 26
   Insn 72(l0): point = 28
   Insn 70(l0): point = 31
   Insn 69(l0): point = 33
   Insn 68(l0): point = 35
   Insn 67(l0): point = 37
   Insn 88(l0): point = 40
   Insn 62(l0): point = 42
   Insn 61(l0): point = 44
   Insn 60(l0): point = 46
   Insn 58(l0): point = 49
   Insn 57(l0): point = 51
   Insn 56(l0): point = 53
   Insn 55(l0): point = 55
   Insn 54(l0): point = 57
   Insn 53(l0): point = 59
   Insn 52(l0): point = 61
   Insn 51(l0): point = 63
   Insn 50(l0): point = 65
   Insn 49(l0): point = 67
   Insn 48(l0): point = 69
   Insn 47(l0): point = 71
   Insn 41(l0): point = 74
   Insn 40(l0): point = 76
   Insn 39(l0): point = 78
   Insn 38(l0): point = 80
   Insn 37(l0): point = 82
   Insn 36(l0): point = 84
   Insn 35(l0): point = 86
   Insn 34(l0): point = 88
   Insn 33(l0): point = 90
   Insn 32(l0): point = 92
   Insn 31(l0): point = 94
   Insn 30(l0): point = 96
   Insn 29(l0): point = 98
   Insn 28(l0): point = 100
   Insn 27(l0): point = 102
   Insn 26(l0): point = 104
   Insn 25(l0): point = 106
   Insn 24(l0): point = 108
   Insn 23(l0): point = 110
   Insn 22(l0): point = 112
   Insn 21(l0): point = 114
   Insn 20(l0): point = 116
   Insn 19(l0): point = 118
   Insn 18(l0): point = 120
   Insn 17(l0): point = 122
   Insn 11(l0): point = 125
   Insn 10(l0): point = 127
   Insn 9(l0): point = 129
   Insn 8(l0): point = 131
   Insn 4(l0): point = 133
   Insn 3(l0): point = 135
   Insn 2(l0): point = 137
 a0(r104): [14..15]
 a1(r103): [18..19]
 a2(r102): [27..28]
 a3(r86): [34..35]
 a4(r101): [36..37]
 a5(r100): [45..46]
 a6(r99): [54..55]
 a7(r85): [60..65]
 a8(r98): [62..63]
 a9(r97): [66..67]
 a10(r96): [70..71]
 a11(r84): [77..78]
 a12(r94): [83..94]
 a13(r93): [85..96]
 a14(r92): [87..98]
 a15(r95): [89..90]
 a16(r91): [101..102]
 a17(r83): [107..112]
 a18(r90): [109..110]
 a19(r89): [113..114]
 a20(r88): [121..122]
 a21(r82): [128..129]
 a22(r87): [130..131]
Compressing live ranges: from 140 to 36 - 25%
Ranges after the compression:
 a0(r104): [0..1]
 a1(r103): [2..3]
 a2(r102): [4..5]
 a3(r86): [6..7]
 a4(r101): [8..9]
 a5(r100): [10..11]
 a6(r99): [12..13]
 a7(r85): [14..15]
 a8(r98): [14..15]
 a9(r97): [16..17]
 a10(r96): [18..19]
 a11(r84): [20..21]
 a12(r94): [22..23]
 a13(r93): [22..23]
 a14(r92): [22..23]
 a15(r95): [22..23]
 a16(r91): [24..25]
 a17(r83): [26..27]
 a18(r90): [26..27]
 a19(r89): [28..29]
 a20(r88): [30..31]
 a21(r82): [32..33]
 a22(r87): [34..35]
  pref0:a0(r104)<-hr5@1500
  pref1:a2(r102)<-hr5@1500
  pref2:a5(r100)<-hr5@1500
  pref3:a6(r99)<-hr0@1500
  pref4:a8(r98)<-hr4@1500
  pref5:a15(r95)<-hr2@1500
  pref6:a12(r94)<-hr5@1500
  pref7:a13(r93)<-hr4@1500
  pref8:a14(r92)<-hr1@1500
  pref9:a16(r91)<-hr0@1500
  pref10:a18(r90)<-hr4@1500
  pref11:a20(r88)<-hr5@1500
  pref12:a7(r85)<-hr5@1500
  pref13:a11(r84)<-hr0@1500
  pref14:a17(r83)<-hr5@1500
  regions=1, blocks=12, points=36
    allocnos=23 (big 0), copies=0, conflicts=0, ranges=23
Disposition:
   21:r82  l0     0   17:r83  l0     0   11:r84  l0     0    7:r85  l0     0
    3:r86  l0     0   22:r87  l0     0   20:r88  l0     0   19:r89  l0     0
   18:r90  l0     1   16:r91  l0     0   14:r92  l0     1   13:r93  l0     4
   12:r94  l0     0   15:r95  l0     2   10:r96  l0     0    9:r97  l0     0
    8:r98  l0     1    6:r99  l0     0    5:r100 l0     0    4:r101 l0     0
    2:r102 l0     0    1:r103 l0     0    0:r104 l0     0
+++Costs: overall -15000, reg -15000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


dir_tester_add_subdir

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 36 [r8]
;;  ref usage 	r0={9d,4u} r1={9d,2u} r2={9d,1u} r4={11d,4u} r5={15d,8u} r6={1d,11u} r7={1d,18u} r8={7d} r9={7d} r10={7d} r11={7d} r12={7d} r13={7d} r14={7d} r15={7d} r16={1d,10u} r17={11d,4u} r18={7d} r19={1d,28u} r20={8d} r21={8d} r22={8d} r23={8d} r24={8d} r25={8d} r26={8d} r27={8d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={9d,1u} r37={8d} r38={7d} r39={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} 
;;    total ref usage 643{529d,114u,0e} in 65{58 regular + 7 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 87
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])
        (reg:DI 5 di [ self ])) "tester/dir_tester.c":59:79 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ self ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])
        (reg:DI 4 si [ name ])) "tester/dir_tester.c":59:79 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ name ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -36 [0xffffffffffffffdc])) [2 success+0 S4 A32])
        (reg:SI 1 dx [ success ])) "tester/dir_tester.c":59:79 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ success ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":60:11 80 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 82 [ _1 ])
        (mem:SI (plus:DI (reg/f:DI 87)
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])) "tester/dir_tester.c":60:11 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87)
        (nil)))
(insn 10 9 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 82 [ _1 ])
            (const_int 0 [0]))) "tester/dir_tester.c":60:6 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 82 [ _1 ])
        (nil)))
(jump_insn 11 10 16 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 95)
            (pc))) "tester/dir_tester.c":60:6 891 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 95)
;;  succ:       10 tester/dir_tester.c:61:5
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 83 84 88 89 90 91 92 93 94 95
(note 16 11 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:DI 88)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7f916da637e0 *.LC12>)) "tester/dir_tester.c":62:3 80 {*movdi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:DI 5 di)
        (reg:DI 88)) "tester/dir_tester.c":62:3 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 88)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7f916da637e0 *.LC12>)
            (nil))))
(insn 19 18 20 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":62:3 83 {*movqi_internal}
     (nil))
(call_insn 20 19 21 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":62:3 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 21 20 22 3 (set (reg/f:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":63:17 80 {*movdi_internal}
     (nil))
(insn 22 21 23 3 (set (reg/f:DI 83 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 89)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":63:17 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 89)
        (nil)))
(insn 23 22 24 3 (set (reg:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])) "tester/dir_tester.c":63:17 80 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 4 si)
        (reg:DI 90)) "tester/dir_tester.c":63:17 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 90)
        (nil)))
(insn 25 24 26 3 (set (reg:DI 5 di)
        (reg/f:DI 83 [ _2 ])) "tester/dir_tester.c":63:17 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 83 [ _2 ])
        (nil)))
(call_insn 26 25 27 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_add_subdir") [flags 0x41]  <function_decl 0x7f916dd41c00 dir_add_subdir>) [0 dir_add_subdir S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":63:17 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 27 26 28 3 (set (reg:SI 91)
        (reg:SI 0 ax)) "tester/dir_tester.c":63:17 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 28 27 29 3 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 result+0 S4 A32])
        (reg:SI 91)) "tester/dir_tester.c":63:17 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 91)
        (nil)))
(insn 29 28 30 3 (set (reg:SI 92)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 result+0 S4 A32])) "tester/dir_tester.c":64:8 81 {*movsi_internal}
     (nil))
(insn 30 29 31 3 (set (reg:SI 93)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -36 [0xffffffffffffffdc])) [2 success+0 S4 A32])) "tester/dir_tester.c":64:8 81 {*movsi_internal}
     (nil))
(insn 31 30 32 3 (set (reg:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":64:8 80 {*movdi_internal}
     (nil))
(insn 32 31 33 3 (set (reg:DI 36 r8)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f916da57c60 *.LC7>)) "tester/dir_tester.c":64:8 80 {*movdi_internal}
     (nil))
(insn 33 32 34 3 (set (reg:DI 95)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f916da57cf0 *.LC8>)) "tester/dir_tester.c":64:8 80 {*movdi_internal}
     (nil))
(insn 34 33 35 3 (set (reg:DI 2 cx)
        (reg:DI 95)) "tester/dir_tester.c":64:8 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 95)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f916da57cf0 *.LC8>)
            (nil))))
(insn 35 34 36 3 (set (reg:SI 1 dx)
        (reg:SI 92)) "tester/dir_tester.c":64:8 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 92)
        (nil)))
(insn 36 35 37 3 (set (reg:SI 4 si)
        (reg:SI 93)) "tester/dir_tester.c":64:8 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 93)
        (nil)))
(insn 37 36 38 3 (set (reg:DI 5 di)
        (reg:DI 94)) "tester/dir_tester.c":64:8 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 94)
        (nil)))
(call_insn 38 37 39 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_success") [flags 0x3]  <function_decl 0x7f916da16c00 check_success>) [0 check_success S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":64:8 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 36 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:SI 4 si)
                (expr_list:REG_DEAD (reg:DI 2 cx)
                    (expr_list:REG_DEAD (reg:SI 1 dx)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))
(insn 39 38 40 3 (set (reg:SI 84 [ _3 ])
        (reg:SI 0 ax)) "tester/dir_tester.c":64:8 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 40 39 41 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 84 [ _3 ])
            (const_int 0 [0]))) "tester/dir_tester.c":64:6 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 84 [ _3 ])
        (nil)))
(jump_insn 41 40 46 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 100)
            (pc))) "tester/dir_tester.c":64:6 891 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 100)
;;  succ:       11 tester/dir_tester.c:65:5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 85 96 97 98 99
(note 46 41 47 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 4 (set (reg/f:DI 96)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":66:15 80 {*movdi_internal}
     (nil))
(insn 48 47 49 4 (set (mem:SI (plus:DI (reg/f:DI 96)
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])
        (const_int 1 [0x1])) "tester/dir_tester.c":66:15 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 96)
        (nil)))
(insn 49 48 50 4 (set (reg/f:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":67:41 80 {*movdi_internal}
     (nil))
(insn 50 49 51 4 (set (reg/f:DI 85 [ _4 ])
        (mem/f:DI (plus:DI (reg/f:DI 97)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":67:41 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 97)
        (nil)))
(insn 51 50 52 4 (set (reg:DI 98)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])) "tester/dir_tester.c":67:23 80 {*movdi_internal}
     (nil))
(insn 52 51 53 4 (set (reg:DI 4 si)
        (reg:DI 98)) "tester/dir_tester.c":67:23 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 98)
        (nil)))
(insn 53 52 54 4 (set (reg:DI 5 di)
        (reg/f:DI 85 [ _4 ])) "tester/dir_tester.c":67:23 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 85 [ _4 ])
        (nil)))
(call_insn 54 53 55 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_find_node") [flags 0x41]  <function_decl 0x7f916dd41a00 dir_find_node>) [0 dir_find_node S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":67:23 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 55 54 56 4 (set (reg:DI 99)
        (reg:DI 0 ax)) "tester/dir_tester.c":67:23 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 56 55 57 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])
        (reg:DI 99)) "tester/dir_tester.c":67:23 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 99)
        (nil)))
(insn 57 56 58 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])
            (const_int 0 [0]))) "tester/dir_tester.c":68:6 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 58 57 59 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 65)
            (pc))) "tester/dir_tester.c":68:6 891 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 65)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 100
(note 59 58 60 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 5 (set (reg:DI 100)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f916da63870 *.LC13>)) "tester/dir_tester.c":69:5 80 {*movdi_internal}
     (nil))
(insn 61 60 62 5 (set (reg:DI 5 di)
        (reg:DI 100)) "tester/dir_tester.c":69:5 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 100)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f916da63870 *.LC13>)
            (nil))))
(call_insn 62 61 88 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":69:5 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 88 62 89 5 (set (pc)
        (label_ref 86)) "tester/dir_tester.c":70:5 892 {jump}
     (nil)
 -> 86)
;;  succ:       9 [always]  tester/dir_tester.c:70:5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 89 88 65)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 86 101
(code_label 65 89 66 6 25 (nil) [1 uses])
(note 66 65 67 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 6 (set (reg/f:DI 101)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])) "tester/dir_tester.c":72:12 80 {*movdi_internal}
     (nil))
(insn 68 67 69 6 (set (reg:SI 86 [ _5 ])
        (mem:SI (plus:DI (reg/f:DI 101)
                (const_int 32 [0x20])) [2 node_17->is_dir+0 S4 A64])) "tester/dir_tester.c":72:12 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 101)
        (nil)))
(insn 69 68 70 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 86 [ _5 ])
            (const_int 0 [0]))) "tester/dir_tester.c":72:6 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 86 [ _5 ])
        (nil)))
(jump_insn 70 69 71 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 77)
            (pc))) "tester/dir_tester.c":72:6 891 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 77)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 102
(note 71 70 72 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 7 (set (reg:DI 102)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f916da63900 *.LC14>)) "tester/dir_tester.c":73:5 80 {*movdi_internal}
     (nil))
(insn 73 72 74 7 (set (reg:DI 5 di)
        (reg:DI 102)) "tester/dir_tester.c":73:5 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 102)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f916da63900 *.LC14>)
            (nil))))
(call_insn 74 73 90 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":73:5 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 90 74 91 7 (set (pc)
        (label_ref 86)) "tester/dir_tester.c":74:5 892 {jump}
     (nil)
 -> 86)
;;  succ:       9 [always]  tester/dir_tester.c:74:5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 91 90 77)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 10, flags: (RTL)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 103 104
(code_label 77 91 78 8 26 (nil) [1 uses])
(note 78 77 79 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 8 (set (reg/f:DI 103)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":76:15 80 {*movdi_internal}
     (nil))
(insn 80 79 81 8 (set (mem:SI (plus:DI (reg/f:DI 103)
                (const_int 32 [0x20])) [2 self_8(D)->error+0 S4 A64])
        (const_int 0 [0])) "tester/dir_tester.c":76:15 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 103)
        (nil)))
(insn 81 80 82 8 (set (reg:DI 104)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)) "tester/dir_tester.c":77:3 80 {*movdi_internal}
     (nil))
(insn 82 81 83 8 (set (reg:DI 5 di)
        (reg:DI 104)) "tester/dir_tester.c":77:3 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 104)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)
            (nil))))
(call_insn 83 82 92 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":77:3 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 92 83 93 8 (set (pc)
        (label_ref 86)) 892 {jump}
     (nil)
 -> 86)
;;  succ:       9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 93 92 95)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 8, next block 11, flags: (RTL)
;;  pred:       2 tester/dir_tester.c:61:5
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 95 93 94 10 27 (nil) [1 uses])
(note 94 95 96 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 96 94 97 10 (const_int 0 [0]) "tester/dir_tester.c":61:5 928 {nop}
     (nil))
(jump_insn 97 96 98 10 (set (pc)
        (label_ref 86)) 892 {jump}
     (nil)
 -> 86)
;;  succ:       9 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 98 97 100)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 9, flags: (RTL)
;;  pred:       3 tester/dir_tester.c:65:5
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 100 98 99 11 28 (nil) [1 uses])
(note 99 100 101 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 101 99 86 11 (const_int 0 [0]) "tester/dir_tester.c":65:5 928 {nop}
     (nil))
;;  succ:       9 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 11, next block 1, flags: (RTL)
;;  pred:       7 [always]  tester/dir_tester.c:74:5
;;              8
;;              11 [always]  (FALLTHRU)
;;              5 [always]  tester/dir_tester.c:70:5
;;              10 [always] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 86 101 87 9 21 (nil) [4 uses])
(note 87 86 0 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function dir_tester_delete (dir_tester_delete, funcdef_no=11, decl_uid=2064, cgraph_uid=12, symbol_order=11)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 8 n_edges 9 count 8 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 7 6
;; 2 succs { 7 3 }
;; 3 succs { 4 5 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 7 succs { 6 }
;; 6 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 29.
verify found no changes in insn with uid = 43.
verify found no changes in insn with uid = 53.
verify found no changes in insn with uid = 60.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r98: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r98,l0) best DIREG, allocno GENERAL_REGS
    r97: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r97,l0) best DIREG, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r95,l0) best AREG, allocno GENERAL_REGS
    r94: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r94,l0) best SIREG, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a11 (r92,l0) best CREG, allocno GENERAL_REGS
    r91: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r91,l0) best DIREG, allocno GENERAL_REGS
    r90: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r90,l0) best SIREG, allocno GENERAL_REGS
    r89: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a10 (r89,l0) best DREG, allocno GENERAL_REGS
    r88: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a12 (r88,l0) best AREG, allocno GENERAL_REGS
    r87: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a14 (r87,l0) best SIREG, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a16 (r85,l0) best DIREG, allocno GENERAL_REGS
    r84: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r84,l0) best DIREG, allocno GENERAL_REGS
    r83: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r83,l0) best AREG, allocno GENERAL_REGS
    r82: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a13 (r82,l0) best DIREG, allocno GENERAL_REGS

  a0(r98,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a1(r97,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a2(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r95,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a4(r84,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r94,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a6(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a7(r83,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a8(r91,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a9(r90,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a10(r89,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a11(r92,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a12(r88,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a13(r82,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a14(r87,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a15(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a16(r85,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000

   Insn 71(l0): point = 1
   Insn 67(l0): point = 4
   Insn 60(l0): point = 6
   Insn 59(l0): point = 8
   Insn 58(l0): point = 10
   Insn 65(l0): point = 13
   Insn 53(l0): point = 15
   Insn 52(l0): point = 17
   Insn 51(l0): point = 19
   Insn 50(l0): point = 21
   Insn 49(l0): point = 23
   Insn 47(l0): point = 26
   Insn 46(l0): point = 28
   Insn 45(l0): point = 30
   Insn 44(l0): point = 32
   Insn 43(l0): point = 34
   Insn 42(l0): point = 36
   Insn 41(l0): point = 38
   Insn 40(l0): point = 40
   Insn 39(l0): point = 42
   Insn 38(l0): point = 44
   Insn 32(l0): point = 47
   Insn 31(l0): point = 49
   Insn 30(l0): point = 51
   Insn 29(l0): point = 53
   Insn 28(l0): point = 55
   Insn 27(l0): point = 57
   Insn 26(l0): point = 59
   Insn 25(l0): point = 61
   Insn 24(l0): point = 63
   Insn 23(l0): point = 65
   Insn 22(l0): point = 67
   Insn 21(l0): point = 69
   Insn 20(l0): point = 71
   Insn 19(l0): point = 73
   Insn 18(l0): point = 75
   Insn 17(l0): point = 77
   Insn 16(l0): point = 79
   Insn 15(l0): point = 81
   Insn 14(l0): point = 83
   Insn 13(l0): point = 85
   Insn 12(l0): point = 87
   Insn 11(l0): point = 89
   Insn 10(l0): point = 91
   Insn 9(l0): point = 93
   Insn 8(l0): point = 95
   Insn 4(l0): point = 97
   Insn 3(l0): point = 99
   Insn 2(l0): point = 101
 a0(r98): [9..10]
 a1(r97): [18..19]
 a2(r96): [22..23]
 a3(r95): [31..32]
 a4(r84): [37..42]
 a5(r94): [39..40]
 a6(r93): [43..44]
 a7(r83): [50..51]
 a8(r91): [56..67]
 a9(r90): [58..69]
 a10(r89): [60..71]
 a11(r92): [62..63]
 a12(r88): [74..75]
 a13(r82): [80..85]
 a14(r87): [82..83]
 a15(r86): [86..87]
 a16(r85): [94..95]
Compressing live ranges: from 104 to 24 - 23%
Ranges after the compression:
 a0(r98): [0..1]
 a1(r97): [2..3]
 a2(r96): [4..5]
 a3(r95): [6..7]
 a4(r84): [8..9]
 a5(r94): [8..9]
 a6(r93): [10..11]
 a7(r83): [12..13]
 a8(r91): [14..15]
 a9(r90): [14..15]
 a10(r89): [14..15]
 a11(r92): [14..15]
 a12(r88): [16..17]
 a13(r82): [18..19]
 a14(r87): [18..19]
 a15(r86): [20..21]
 a16(r85): [22..23]
  pref0:a0(r98)<-hr5@1500
  pref1:a1(r97)<-hr5@1500
  pref2:a3(r95)<-hr0@1500
  pref3:a5(r94)<-hr4@1500
  pref4:a11(r92)<-hr2@1500
  pref5:a8(r91)<-hr5@1500
  pref6:a9(r90)<-hr4@1500
  pref7:a10(r89)<-hr1@1500
  pref8:a12(r88)<-hr0@1500
  pref9:a14(r87)<-hr4@1500
  pref10:a16(r85)<-hr5@1500
  pref11:a4(r84)<-hr5@1500
  pref12:a7(r83)<-hr0@1500
  pref13:a13(r82)<-hr5@1500
  regions=1, blocks=8, points=24
    allocnos=17 (big 0), copies=0, conflicts=0, ranges=17
Disposition:
   13:r82  l0     0    7:r83  l0     0    4:r84  l0     0   16:r85  l0     0
   15:r86  l0     0   14:r87  l0     1   12:r88  l0     0   10:r89  l0     1
    9:r90  l0     4    8:r91  l0     0   11:r92  l0     2    6:r93  l0     0
    5:r94  l0     1    3:r95  l0     0    2:r96  l0     0    1:r97  l0     0
    0:r98  l0     0
+++Costs: overall -14000, reg -14000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


dir_tester_delete

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 36 [r8]
;;  ref usage 	r0={8d,4u} r1={8d,2u} r2={8d,1u} r4={10d,4u} r5={13d,7u} r6={1d,7u} r7={1d,13u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r16={1d,6u} r17={8d,2u} r18={6d} r19={1d,21u} r20={7d} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={8d,1u} r37={7d} r38={6d} r39={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} 
;;    total ref usage 538{453d,85u,0e} in 49{43 regular + 6 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 85 86 87 88 89 90 91 92
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])
        (reg:DI 5 di [ self ])) "tester/dir_tester.c":80:38 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ self ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])
        (reg:DI 4 si [ name ])) "tester/dir_tester.c":80:38 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ name ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -36 [0xffffffffffffffdc])) [2 success+0 S4 A32])
        (reg:SI 1 dx [ success ])) "tester/dir_tester.c":80:38 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ success ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 85)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f916da6b240 *.LC15>)) "tester/dir_tester.c":81:3 80 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 85)) "tester/dir_tester.c":81:3 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 85)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f916da6b240 *.LC15>)
            (nil))))
(insn 10 9 11 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":81:3 83 {*movqi_internal}
     (nil))
(call_insn 11 10 12 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":81:3 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 12 11 13 2 (set (reg/f:DI 86)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":82:17 80 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg/f:DI 82 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 86)
                (const_int 24 [0x18])) [4 self_7(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":82:17 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 86)
        (nil)))
(insn 14 13 15 2 (set (reg:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])) "tester/dir_tester.c":82:17 80 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 4 si)
        (reg:DI 87)) "tester/dir_tester.c":82:17 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 87)
        (nil)))
(insn 16 15 17 2 (set (reg:DI 5 di)
        (reg/f:DI 82 [ _1 ])) "tester/dir_tester.c":82:17 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 82 [ _1 ])
        (nil)))
(call_insn 17 16 18 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_delete") [flags 0x41]  <function_decl 0x7f916dd41d00 dir_delete>) [0 dir_delete S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":82:17 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 18 17 19 2 (set (reg:SI 88)
        (reg:SI 0 ax)) "tester/dir_tester.c":82:17 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 19 18 20 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 result+0 S4 A32])
        (reg:SI 88)) "tester/dir_tester.c":82:17 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 88)
        (nil)))
(insn 20 19 21 2 (set (reg:SI 89)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 result+0 S4 A32])) "tester/dir_tester.c":83:8 81 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:SI 90)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -36 [0xffffffffffffffdc])) [2 success+0 S4 A32])) "tester/dir_tester.c":83:8 81 {*movsi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":83:8 80 {*movdi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:DI 36 r8)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f916da57c60 *.LC7>)) "tester/dir_tester.c":83:8 80 {*movdi_internal}
     (nil))
(insn 24 23 25 2 (set (reg:DI 92)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f916da57cf0 *.LC8>)) "tester/dir_tester.c":83:8 80 {*movdi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:DI 2 cx)
        (reg:DI 92)) "tester/dir_tester.c":83:8 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 92)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f916da57cf0 *.LC8>)
            (nil))))
(insn 26 25 27 2 (set (reg:SI 1 dx)
        (reg:SI 89)) "tester/dir_tester.c":83:8 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 89)
        (nil)))
(insn 27 26 28 2 (set (reg:SI 4 si)
        (reg:SI 90)) "tester/dir_tester.c":83:8 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 90)
        (nil)))
(insn 28 27 29 2 (set (reg:DI 5 di)
        (reg:DI 91)) "tester/dir_tester.c":83:8 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 91)
        (nil)))
(call_insn 29 28 30 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("check_success") [flags 0x3]  <function_decl 0x7f916da16c00 check_success>) [0 check_success S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":83:8 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 36 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:SI 4 si)
                (expr_list:REG_DEAD (reg:DI 2 cx)
                    (expr_list:REG_DEAD (reg:SI 1 dx)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))
(insn 30 29 31 2 (set (reg:SI 83 [ _2 ])
        (reg:SI 0 ax)) "tester/dir_tester.c":83:8 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 31 30 32 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 83 [ _2 ])
            (const_int 0 [0]))) "tester/dir_tester.c":83:6 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 83 [ _2 ])
        (nil)))
(jump_insn 32 31 37 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 70)
            (pc))) "tester/dir_tester.c":83:6 891 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 70)
;;  succ:       7 tester/dir_tester.c:84:5
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 84 93 94 95
(note 37 32 38 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 3 (set (reg/f:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":85:41 80 {*movdi_internal}
     (nil))
(insn 39 38 40 3 (set (reg/f:DI 84 [ _3 ])
        (mem/f:DI (plus:DI (reg/f:DI 93)
                (const_int 24 [0x18])) [4 self_7(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":85:41 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 93)
        (nil)))
(insn 40 39 41 3 (set (reg:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [1 name+0 S8 A64])) "tester/dir_tester.c":85:23 80 {*movdi_internal}
     (nil))
(insn 41 40 42 3 (set (reg:DI 4 si)
        (reg:DI 94)) "tester/dir_tester.c":85:23 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 94)
        (nil)))
(insn 42 41 43 3 (set (reg:DI 5 di)
        (reg/f:DI 84 [ _3 ])) "tester/dir_tester.c":85:23 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 84 [ _3 ])
        (nil)))
(call_insn 43 42 44 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dir_find_node") [flags 0x41]  <function_decl 0x7f916dd41a00 dir_find_node>) [0 dir_find_node S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":85:23 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 44 43 45 3 (set (reg:DI 95)
        (reg:DI 0 ax)) "tester/dir_tester.c":85:23 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 45 44 46 3 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])
        (reg:DI 95)) "tester/dir_tester.c":85:23 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 95)
        (nil)))
(insn 46 45 47 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [7 node+0 S8 A64])
            (const_int 0 [0]))) "tester/dir_tester.c":86:6 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 47 46 48 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 56)
            (pc))) "tester/dir_tester.c":86:6 891 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 56)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 96 97
(note 48 47 49 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 4 (set (reg/f:DI 96)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [11 self+0 S8 A64])) "tester/dir_tester.c":87:17 80 {*movdi_internal}
     (nil))
(insn 50 49 51 4 (set (mem:SI (plus:DI (reg/f:DI 96)
                (const_int 32 [0x20])) [2 self_7(D)->error+0 S4 A64])
        (const_int 1 [0x1])) "tester/dir_tester.c":87:17 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 96)
        (nil)))
(insn 51 50 52 4 (set (reg:DI 97)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f916da6b2d0 *.LC16>)) "tester/dir_tester.c":88:5 80 {*movdi_internal}
     (nil))
(insn 52 51 53 4 (set (reg:DI 5 di)
        (reg:DI 97)) "tester/dir_tester.c":88:5 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 97)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f916da6b2d0 *.LC16>)
            (nil))))
(call_insn 53 52 65 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":88:5 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 65 53 66 4 (set (pc)
        (label_ref 63)) "tester/dir_tester.c":89:5 892 {jump}
     (nil)
 -> 63)
;;  succ:       6 [always]  tester/dir_tester.c:89:5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 66 65 56)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 7, flags: (RTL)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 98
(code_label 56 66 57 5 32 (nil) [1 uses])
(note 57 56 58 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 5 (set (reg:DI 98)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)) "tester/dir_tester.c":91:3 80 {*movdi_internal}
     (nil))
(insn 59 58 60 5 (set (reg:DI 5 di)
        (reg:DI 98)) "tester/dir_tester.c":91:3 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 98)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)
            (nil))))
(call_insn 60 59 67 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":91:3 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 67 60 68 5 (set (pc)
        (label_ref 63)) 892 {jump}
     (nil)
 -> 63)
;;  succ:       6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 68 67 70)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 5, next block 6, flags: (RTL)
;;  pred:       2 tester/dir_tester.c:84:5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 70 68 69 7 33 (nil) [1 uses])
(note 69 70 71 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 71 69 63 7 (const_int 0 [0]) "tester/dir_tester.c":84:5 928 {nop}
     (nil))
;;  succ:       6 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL)
;;  pred:       4 [always]  tester/dir_tester.c:89:5
;;              7 [always]  (FALLTHRU)
;;              5
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 63 71 64 6 29 (nil) [2 uses])
(note 64 63 0 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function dir_tester_size (dir_tester_size, funcdef_no=12, decl_uid=2067, cgraph_uid=13, symbol_order=12)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 33.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r91: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r91,l0) best DIREG, allocno GENERAL_REGS
    r90: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r90,l0) best DIREG, allocno GENERAL_REGS
    r89: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r89,l0) best DREG, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r86,l0) best DIREG, allocno GENERAL_REGS
    r85: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r85,l0) best SIREG, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r91,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a1(r90,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a2(r85,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r89,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a6(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a7(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a8(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a9(r86,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000

   Insn 33(l0): point = 1
   Insn 32(l0): point = 3
   Insn 31(l0): point = 5
   Insn 38(l0): point = 8
   Insn 26(l0): point = 10
   Insn 25(l0): point = 12
   Insn 24(l0): point = 14
   Insn 23(l0): point = 16
   Insn 22(l0): point = 18
   Insn 21(l0): point = 20
   Insn 20(l0): point = 22
   Insn 19(l0): point = 24
   Insn 18(l0): point = 26
   Insn 17(l0): point = 28
   Insn 15(l0): point = 31
   Insn 14(l0): point = 33
   Insn 13(l0): point = 35
   Insn 12(l0): point = 37
   Insn 11(l0): point = 39
   Insn 10(l0): point = 41
   Insn 9(l0): point = 43
   Insn 8(l0): point = 45
   Insn 7(l0): point = 47
   Insn 3(l0): point = 49
   Insn 2(l0): point = 51
 a0(r91): [4..5]
 a1(r90): [15..16]
 a2(r85): [19..24]
 a3(r89): [21..22]
 a4(r84): [25..26]
 a5(r88): [27..28]
 a6(r83): [34..35]
 a7(r82): [36..37]
 a8(r87): [38..39]
 a9(r86): [46..47]
Compressing live ranges: from 54 to 18 - 33%
Ranges after the compression:
 a0(r91): [0..1]
 a1(r90): [2..3]
 a2(r85): [4..5]
 a3(r89): [4..5]
 a4(r84): [6..7]
 a5(r88): [8..9]
 a6(r83): [10..11]
 a7(r82): [12..13]
 a8(r87): [14..15]
 a9(r86): [16..17]
  pref0:a0(r91)<-hr5@1500
  pref1:a1(r90)<-hr5@1500
  pref2:a3(r89)<-hr1@1500
  pref3:a9(r86)<-hr5@1500
  pref4:a2(r85)<-hr4@1500
  regions=1, blocks=6, points=18
    allocnos=10 (big 0), copies=0, conflicts=0, ranges=10
Disposition:
    7:r82  l0     0    6:r83  l0     0    4:r84  l0     0    2:r85  l0     0
    9:r86  l0     0    8:r87  l0     0    5:r88  l0     0    3:r89  l0     1
    1:r90  l0     0    0:r91  l0     0
+++Costs: overall -5000, reg -5000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


dir_tester_size

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={6d,2u} r1={5d,1u} r2={4d} r4={5d,2u} r5={7d,4u} r6={1d,5u} r7={1d,8u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1d,4u} r17={4d,1u} r18={3d} r19={1d,11u} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={4d} r37={4d} r38={3d} r39={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} 
;;    total ref usage 286{238d,48u,0e} in 25{22 regular + 3 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 86 87
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])
        (reg:DI 5 di [ self ])) "tester/dir_tester.c":94:57 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ self ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 size+0 S4 A32])
        (reg:SI 4 si [ size ])) "tester/dir_tester.c":94:57 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ size ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 86)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f916da6b990 *.LC17>)) "tester/dir_tester.c":95:3 80 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg:DI 86)) "tester/dir_tester.c":95:3 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 86)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f916da6b990 *.LC17>)
            (nil))))
(insn 9 8 10 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":95:3 83 {*movqi_internal}
     (nil))
(call_insn 10 9 11 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":95:3 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 11 10 12 2 (set (reg/f:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":96:11 80 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 82 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 87)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":96:11 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87)
        (nil)))
(insn 13 12 14 2 (set (reg:SI 83 [ _2 ])
        (mem:SI (reg/f:DI 82 [ _1 ]) [2 _1->size+0 S4 A64])) "tester/dir_tester.c":96:22 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 82 [ _1 ])
        (nil)))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 size+0 S4 A32])
            (reg:SI 83 [ _2 ]))) "tester/dir_tester.c":96:6 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 83 [ _2 ])
        (nil)))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) "tester/dir_tester.c":96:6 891 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 29)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 84 85 88 89 90
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg/f:DI 88)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":98:16 80 {*movdi_internal}
     (nil))
(insn 18 17 19 3 (set (reg/f:DI 84 [ _3 ])
        (mem/f:DI (plus:DI (reg/f:DI 88)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":98:16 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 88)
        (nil)))
(insn 19 18 20 3 (set (reg:SI 85 [ _4 ])
        (mem:SI (reg/f:DI 84 [ _3 ]) [2 _3->size+0 S4 A64])) "tester/dir_tester.c":97:5 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 84 [ _3 ])
        (nil)))
(insn 20 19 21 3 (set (reg:SI 89)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 size+0 S4 A32])) "tester/dir_tester.c":97:5 81 {*movsi_internal}
     (nil))
(insn 21 20 22 3 (set (reg:SI 1 dx)
        (reg:SI 89)) "tester/dir_tester.c":97:5 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 89)
        (nil)))
(insn 22 21 23 3 (set (reg:SI 4 si)
        (reg:SI 85 [ _4 ])) "tester/dir_tester.c":97:5 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 85 [ _4 ])
        (nil)))
(insn 23 22 24 3 (set (reg:DI 90)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f916da6ba20 *.LC18>)) "tester/dir_tester.c":97:5 80 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 5 di)
        (reg:DI 90)) "tester/dir_tester.c":97:5 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 90)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f916da6ba20 *.LC18>)
            (nil))))
(insn 25 24 26 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":97:5 83 {*movqi_internal}
     (nil))
(call_insn 26 25 38 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":97:5 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(jump_insn 38 26 39 3 (set (pc)
        (label_ref 36)) "tester/dir_tester.c":99:5 892 {jump}
     (nil)
 -> 36)
;;  succ:       5 [always]  tester/dir_tester.c:99:5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 39 38 29)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 91
(code_label 29 39 30 4 35 (nil) [1 uses])
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 4 (set (reg:DI 91)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)) "tester/dir_tester.c":101:3 80 {*movdi_internal}
     (nil))
(insn 32 31 33 4 (set (reg:DI 5 di)
        (reg:DI 91)) "tester/dir_tester.c":101:3 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 91)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)
            (nil))))
(call_insn 33 32 36 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":101:3 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;;              3 [always]  tester/dir_tester.c:99:5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 36 33 37 5 34 (nil) [1 uses])
(note 37 36 0 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function dir_tester_capacity (dir_tester_capacity, funcdef_no=13, decl_uid=2070, cgraph_uid=14, symbol_order=13)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 33.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r91: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r91,l0) best DIREG, allocno GENERAL_REGS
    r90: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r90,l0) best DIREG, allocno GENERAL_REGS
    r89: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r89,l0) best DREG, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r86,l0) best DIREG, allocno GENERAL_REGS
    r85: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r85,l0) best SIREG, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r91,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a1(r90,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a2(r85,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r89,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a6(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a7(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a8(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a9(r86,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000

   Insn 33(l0): point = 1
   Insn 32(l0): point = 3
   Insn 31(l0): point = 5
   Insn 38(l0): point = 8
   Insn 26(l0): point = 10
   Insn 25(l0): point = 12
   Insn 24(l0): point = 14
   Insn 23(l0): point = 16
   Insn 22(l0): point = 18
   Insn 21(l0): point = 20
   Insn 20(l0): point = 22
   Insn 19(l0): point = 24
   Insn 18(l0): point = 26
   Insn 17(l0): point = 28
   Insn 15(l0): point = 31
   Insn 14(l0): point = 33
   Insn 13(l0): point = 35
   Insn 12(l0): point = 37
   Insn 11(l0): point = 39
   Insn 10(l0): point = 41
   Insn 9(l0): point = 43
   Insn 8(l0): point = 45
   Insn 7(l0): point = 47
   Insn 3(l0): point = 49
   Insn 2(l0): point = 51
 a0(r91): [4..5]
 a1(r90): [15..16]
 a2(r85): [19..24]
 a3(r89): [21..22]
 a4(r84): [25..26]
 a5(r88): [27..28]
 a6(r83): [34..35]
 a7(r82): [36..37]
 a8(r87): [38..39]
 a9(r86): [46..47]
Compressing live ranges: from 54 to 18 - 33%
Ranges after the compression:
 a0(r91): [0..1]
 a1(r90): [2..3]
 a2(r85): [4..5]
 a3(r89): [4..5]
 a4(r84): [6..7]
 a5(r88): [8..9]
 a6(r83): [10..11]
 a7(r82): [12..13]
 a8(r87): [14..15]
 a9(r86): [16..17]
  pref0:a0(r91)<-hr5@1500
  pref1:a1(r90)<-hr5@1500
  pref2:a3(r89)<-hr1@1500
  pref3:a9(r86)<-hr5@1500
  pref4:a2(r85)<-hr4@1500
  regions=1, blocks=6, points=18
    allocnos=10 (big 0), copies=0, conflicts=0, ranges=10
Disposition:
    7:r82  l0     0    6:r83  l0     0    4:r84  l0     0    2:r85  l0     0
    9:r86  l0     0    8:r87  l0     0    5:r88  l0     0    3:r89  l0     1
    1:r90  l0     0    0:r91  l0     0
+++Costs: overall -5000, reg -5000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


dir_tester_capacity

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={6d,2u} r1={5d,1u} r2={4d} r4={5d,2u} r5={7d,4u} r6={1d,5u} r7={1d,8u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1d,4u} r17={4d,1u} r18={3d} r19={1d,11u} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={4d} r37={4d} r38={3d} r39={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} 
;;    total ref usage 286{238d,48u,0e} in 25{22 regular + 3 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 86 87
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])
        (reg:DI 5 di [ self ])) "tester/dir_tester.c":104:65 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ self ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 capacity+0 S4 A32])
        (reg:SI 4 si [ capacity ])) "tester/dir_tester.c":104:65 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ capacity ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 86)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7f916da74000 *.LC19>)) "tester/dir_tester.c":105:3 80 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg:DI 86)) "tester/dir_tester.c":105:3 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 86)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7f916da74000 *.LC19>)
            (nil))))
(insn 9 8 10 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":105:3 83 {*movqi_internal}
     (nil))
(call_insn 10 9 11 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":105:3 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 11 10 12 2 (set (reg/f:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":106:11 80 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 82 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 87)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":106:11 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87)
        (nil)))
(insn 13 12 14 2 (set (reg:SI 83 [ _2 ])
        (mem:SI (plus:DI (reg/f:DI 82 [ _1 ])
                (const_int 4 [0x4])) [2 _1->capacity+0 S4 A32])) "tester/dir_tester.c":106:22 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 82 [ _1 ])
        (nil)))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -12 [0xfffffffffffffff4])) [2 capacity+0 S4 A32])
            (reg:SI 83 [ _2 ]))) "tester/dir_tester.c":106:6 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 83 [ _2 ])
        (nil)))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) "tester/dir_tester.c":106:6 891 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 29)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 84 85 88 89 90
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg/f:DI 88)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":108:16 80 {*movdi_internal}
     (nil))
(insn 18 17 19 3 (set (reg/f:DI 84 [ _3 ])
        (mem/f:DI (plus:DI (reg/f:DI 88)
                (const_int 24 [0x18])) [4 self_8(D)->inner_dir+0 S8 A64])) "tester/dir_tester.c":108:16 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 88)
        (nil)))
(insn 19 18 20 3 (set (reg:SI 85 [ _4 ])
        (mem:SI (plus:DI (reg/f:DI 84 [ _3 ])
                (const_int 4 [0x4])) [2 _3->capacity+0 S4 A32])) "tester/dir_tester.c":107:5 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 84 [ _3 ])
        (nil)))
(insn 20 19 21 3 (set (reg:SI 89)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 capacity+0 S4 A32])) "tester/dir_tester.c":107:5 81 {*movsi_internal}
     (nil))
(insn 21 20 22 3 (set (reg:SI 1 dx)
        (reg:SI 89)) "tester/dir_tester.c":107:5 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 89)
        (nil)))
(insn 22 21 23 3 (set (reg:SI 4 si)
        (reg:SI 85 [ _4 ])) "tester/dir_tester.c":107:5 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 85 [ _4 ])
        (nil)))
(insn 23 22 24 3 (set (reg:DI 90)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7f916da74090 *.LC20>)) "tester/dir_tester.c":107:5 80 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 5 di)
        (reg:DI 90)) "tester/dir_tester.c":107:5 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 90)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7f916da74090 *.LC20>)
            (nil))))
(insn 25 24 26 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":107:5 83 {*movqi_internal}
     (nil))
(call_insn 26 25 38 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":107:5 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(jump_insn 38 26 39 3 (set (pc)
        (label_ref 36)) "tester/dir_tester.c":109:5 892 {jump}
     (nil)
 -> 36)
;;  succ:       5 [always]  tester/dir_tester.c:109:5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 39 38 29)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 91
(code_label 29 39 30 4 38 (nil) [1 uses])
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 4 (set (reg:DI 91)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)) "tester/dir_tester.c":111:3 80 {*movdi_internal}
     (nil))
(insn 32 31 33 4 (set (reg:DI 5 di)
        (reg:DI 91)) "tester/dir_tester.c":111:3 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 91)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f916da57ea0 *.LC11>)
            (nil))))
(call_insn 33 32 36 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f916dcc6700 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":111:3 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;;              3 [always]  tester/dir_tester.c:109:5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 36 33 37 5 37 (nil) [1 uses])
(note 37 36 0 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function check_success (check_success, funcdef_no=14, decl_uid=3202, cgraph_uid=15, symbol_order=14)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 11 n_edges 13 count 11 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10
;; 2 succs { 3 7 }
;; 3 succs { 4 5 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 10 }
;; 7 succs { 8 9 }
;; 8 succs { 10 }
;; 9 succs { 10 }
;; 10 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 54.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r93: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r93,l0) best DIREG, allocno GENERAL_REGS
    r92: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r92,l0) best SIREG, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r90,l0) best DIREG, allocno GENERAL_REGS
    r89: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a6 (r89,l0) best SIREG, allocno GENERAL_REGS
    r88: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r88,l0) best DREG, allocno GENERAL_REGS
    r87: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r87,l0) best DIREG, allocno GENERAL_REGS
    r86: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r86,l0) best SIREG, allocno GENERAL_REGS
    r85: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a10 (r85,l0) best DREG, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r83,l0) best AREG, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r83,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a1(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:31000 INT_SSE_REGS:31000 ALL_REGS:512000 MEM:8000
  a2(r93,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a3(r92,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r90,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a6(r89,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a7(r88,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a8(r87,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a9(r86,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a10(r85,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a11(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 68(l0): point = 0
   Insn 67(l0): point = 2
   Insn 63(l0): point = 4
   Insn 60(l0): point = 7
   Insn 74(l0): point = 10
   Insn 55(l0): point = 12
   Insn 54(l0): point = 14
   Insn 53(l0): point = 16
   Insn 52(l0): point = 18
   Insn 51(l0): point = 20
   Insn 50(l0): point = 22
   Insn 49(l0): point = 24
   Insn 47(l0): point = 27
   Insn 46(l0): point = 29
   Insn 72(l0): point = 32
   Insn 41(l0): point = 34
   Insn 40(l0): point = 36
   Insn 39(l0): point = 38
   Insn 36(l0): point = 41
   Insn 35(l0): point = 43
   Insn 34(l0): point = 45
   Insn 33(l0): point = 47
   Insn 32(l0): point = 49
   Insn 31(l0): point = 51
   Insn 30(l0): point = 53
   Insn 29(l0): point = 55
   Insn 70(l0): point = 58
   Insn 24(l0): point = 60
   Insn 23(l0): point = 62
   Insn 22(l0): point = 64
   Insn 21(l0): point = 66
   Insn 20(l0): point = 68
   Insn 19(l0): point = 70
   Insn 18(l0): point = 72
   Insn 17(l0): point = 74
   Insn 15(l0): point = 77
   Insn 14(l0): point = 79
   Insn 12(l0): point = 82
   Insn 11(l0): point = 84
   Insn 10(l0): point = 86
   Insn 6(l0): point = 88
   Insn 5(l0): point = 90
   Insn 4(l0): point = 92
   Insn 3(l0): point = 94
   Insn 2(l0): point = 96
 a0(r83): [3..4]
 a1(r82): [32..34] [10..12] [5..7]
 a2(r93): [19..20]
 a3(r92): [23..24]
 a4(r91): [37..38]
 a5(r90): [46..47]
 a6(r89): [50..53]
 a7(r88): [52..55]
 a8(r87): [65..66]
 a9(r86): [69..72]
 a10(r85): [71..74]
 a11(r84): [85..86]
Compressing live ranges: from 99 to 24 - 24%
Ranges after the compression:
 a0(r83): [0..1]
 a1(r82): [10..11] [2..5]
 a2(r93): [6..7]
 a3(r92): [8..9]
 a4(r91): [12..13]
 a5(r90): [14..15]
 a6(r89): [16..17]
 a7(r88): [16..17]
 a8(r87): [18..19]
 a9(r86): [20..21]
 a10(r85): [20..21]
 a11(r84): [22..23]
  pref0:a2(r93)<-hr5@1500
  pref1:a3(r92)<-hr4@1500
  pref2:a5(r90)<-hr5@1500
  pref3:a6(r89)<-hr4@1500
  pref4:a7(r88)<-hr1@1500
  pref5:a8(r87)<-hr5@1500
  pref6:a9(r86)<-hr4@1500
  pref7:a10(r85)<-hr1@1500
  pref8:a0(r83)<-hr0@1500
  regions=1, blocks=11, points=24
    allocnos=12 (big 0), copies=0, conflicts=0, ranges=13
Disposition:
    1:r82  l0     0    0:r83  l0     0   11:r84  l0     0   10:r85  l0     1
    9:r86  l0     0    8:r87  l0     0    7:r88  l0     1    6:r89  l0     0
    5:r90  l0     0    4:r91  l0     0    3:r92  l0     0    2:r93  l0     0
+++Costs: overall -9000, reg -9000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


check_success

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 36 [r8]
;;  ref usage 	r0={8d,5u} r1={6d,3u} r2={4d,1u} r4={7d,4u} r5={7d,4u} r6={1d,10u} r7={1d,13u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1d,9u} r17={6d,3u} r18={3d} r19={1d,25u} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={4d,1u} r37={4d} r38={3d} r39={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r82={3d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} 
;;    total ref usage 339{249d,90u,0e} in 45{42 regular + 3 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8]
;; lr  def 	 17 [flags] 84
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])
        (reg:DI 5 di [ self ])) "tester/dir_tester.c":115:64 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ self ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 success+0 S4 A32])
        (reg:SI 4 si [ success ])) "tester/dir_tester.c":115:64 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ success ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 result+0 S4 A32])
        (reg:SI 1 dx [ result ])) "tester/dir_tester.c":115:64 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ result ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 success_tip+0 S8 A64])
        (reg:DI 2 cx [ success_tip ])) "tester/dir_tester.c":115:64 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ success_tip ])
        (nil)))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [1 failed_tip+0 S8 A64])
        (reg:DI 36 r8 [ failed_tip ])) "tester/dir_tester.c":115:64 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 36 r8 [ failed_tip ])
        (nil)))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg:SI 84)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 success+0 S4 A32])) "tester/dir_tester.c":117:6 81 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 84)
            (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 result+0 S4 A32]))) "tester/dir_tester.c":117:6 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 84)
        (nil)))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) "tester/dir_tester.c":117:6 891 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 44)
;;  succ:       3 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 result+0 S4 A32])
            (const_int 0 [0]))) "tester/dir_tester.c":118:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 15 14 16 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) "tester/dir_tester.c":118:8 891 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 27)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 85 86 87
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg:DI 85)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [1 failed_tip+0 S8 A64])) "tester/dir_tester.c":119:7 80 {*movdi_internal}
     (nil))
(insn 18 17 19 4 (set (reg:DI 86)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 success_tip+0 S8 A64])) "tester/dir_tester.c":119:7 80 {*movdi_internal}
     (nil))
(insn 19 18 20 4 (set (reg:DI 1 dx)
        (reg:DI 85)) "tester/dir_tester.c":119:7 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 85)
        (nil)))
(insn 20 19 21 4 (set (reg:DI 4 si)
        (reg:DI 86)) "tester/dir_tester.c":119:7 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 86)
        (nil)))
(insn 21 20 22 4 (set (reg:DI 87)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f916da746c0 *.LC21>)) "tester/dir_tester.c":119:7 80 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:DI 5 di)
        (reg:DI 87)) "tester/dir_tester.c":119:7 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 87)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f916da746c0 *.LC21>)
            (nil))))
(insn 23 22 24 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":119:7 83 {*movqi_internal}
     (nil))
(call_insn 24 23 70 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":119:7 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(jump_insn 70 24 71 4 (set (pc)
        (label_ref 37)) 892 {jump}
     (nil)
 -> 37)
;;  succ:       6 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 71 70 27)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 88 89 90
(code_label 27 71 28 5 42 (nil) [1 uses])
(note 28 27 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 5 (set (reg:DI 88)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 success_tip+0 S8 A64])) "tester/dir_tester.c":122:7 80 {*movdi_internal}
     (nil))
(insn 30 29 31 5 (set (reg:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [1 failed_tip+0 S8 A64])) "tester/dir_tester.c":122:7 80 {*movdi_internal}
     (nil))
(insn 31 30 32 5 (set (reg:DI 1 dx)
        (reg:DI 88)) "tester/dir_tester.c":122:7 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 88)
        (nil)))
(insn 32 31 33 5 (set (reg:DI 4 si)
        (reg:DI 89)) "tester/dir_tester.c":122:7 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 89)
        (nil)))
(insn 33 32 34 5 (set (reg:DI 90)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f916da746c0 *.LC21>)) "tester/dir_tester.c":122:7 80 {*movdi_internal}
     (nil))
(insn 34 33 35 5 (set (reg:DI 5 di)
        (reg:DI 90)) "tester/dir_tester.c":122:7 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 90)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f916da746c0 *.LC21>)
            (nil))))
(insn 35 34 36 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":122:7 83 {*movqi_internal}
     (nil))
(call_insn 36 35 37 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":122:7 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;;              4 [always] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 82 91
(code_label 37 36 38 6 43 (nil) [1 uses])
(note 38 37 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 6 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [11 self+0 S8 A64])) "tester/dir_tester.c":125:17 80 {*movdi_internal}
     (nil))
(insn 40 39 41 6 (set (mem:SI (plus:DI (reg/f:DI 91)
                (const_int 32 [0x20])) [2 self_14(D)->error+0 S4 A64])
        (const_int 1 [0x1])) "tester/dir_tester.c":125:17 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91)
        (nil)))
(insn 41 40 72 6 (set (reg:SI 82 [ _1 ])
        (const_int 0 [0])) "tester/dir_tester.c":126:12 81 {*movsi_internal}
     (nil))
(jump_insn 72 41 73 6 (set (pc)
        (label_ref 61)) "tester/dir_tester.c":126:12 892 {jump}
     (nil)
 -> 61)
;;  succ:       10 [always]  tester/dir_tester.c:126:12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82

(barrier 73 72 44)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       2
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 44 73 45 7 41 (nil) [1 uses])
(note 45 44 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 result+0 S4 A32])
            (const_int 0 [0]))) "tester/dir_tester.c":128:6 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 47 46 48 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 58)
            (pc))) "tester/dir_tester.c":128:6 891 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 58)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 92 93
(note 48 47 49 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 8 (set (reg:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [1 failed_tip+0 S8 A64])) "tester/dir_tester.c":129:5 80 {*movdi_internal}
     (nil))
(insn 50 49 51 8 (set (reg:DI 4 si)
        (reg:DI 92)) "tester/dir_tester.c":129:5 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 92)
        (nil)))
(insn 51 50 52 8 (set (reg:DI 93)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f916da74750 *.LC22>)) "tester/dir_tester.c":129:5 80 {*movdi_internal}
     (nil))
(insn 52 51 53 8 (set (reg:DI 5 di)
        (reg:DI 93)) "tester/dir_tester.c":129:5 80 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 93)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f916da74750 *.LC22>)
            (nil))))
(insn 53 52 54 8 (set (reg:QI 0 ax)
        (const_int 0 [0])) "tester/dir_tester.c":129:5 83 {*movqi_internal}
     (nil))
(call_insn 54 53 55 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f916dcc6000 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "tester/dir_tester.c":129:5 909 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 55 54 74 8 (set (reg:SI 82 [ _1 ])
        (const_int 0 [0])) "tester/dir_tester.c":130:12 81 {*movsi_internal}
     (nil))
(jump_insn 74 55 75 8 (set (pc)
        (label_ref 61)) "tester/dir_tester.c":130:12 892 {jump}
     (nil)
 -> 61)
;;  succ:       10 [always]  tester/dir_tester.c:130:12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82

(barrier 75 74 58)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 82
(code_label 58 75 59 9 45 (nil) [1 uses])
(note 59 58 60 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 9 (set (reg:SI 82 [ _1 ])
        (const_int 1 [0x1])) "tester/dir_tester.c":132:10 81 {*movsi_internal}
     (nil))
;;  succ:       10 (FALLTHRU) tester/dir_tester.c:132:10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL)
;;  pred:       9 (FALLTHRU) tester/dir_tester.c:132:10
;;              6 [always]  tester/dir_tester.c:126:12
;;              8 [always]  tester/dir_tester.c:130:12
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 82
;; lr  def 	 0 [ax] 83
(code_label 61 60 62 10 44 (nil) [2 uses])
(note 62 61 63 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 67 10 (set (reg:SI 83 [ <retval> ])
        (reg:SI 82 [ _1 ])) "tester/dir_tester.c":133:1 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 82 [ _1 ])
        (nil)))
(insn 67 63 68 10 (set (reg/i:SI 0 ax)
        (reg:SI 83 [ <retval> ])) "tester/dir_tester.c":133:1 81 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 83 [ <retval> ])
        (nil)))
(insn 68 67 0 10 (use (reg/i:SI 0 ax)) "tester/dir_tester.c":133:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

